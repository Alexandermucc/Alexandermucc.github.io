<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DS-字符串017-含有所有字符的最短字符串</title>
      <link href="/2022/03/23/ds-zi-fu-chuan-017-han-you-suo-you-zi-fu-de-zui-duan-zi-fu-chuan/"/>
      <url>/2022/03/23/ds-zi-fu-chuan-017-han-you-suo-you-zi-fu-de-zui-duan-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个字符串 s 和 t 。返回 s 中包含 t 的所有字符的最短子字符串。如果 s 中不存在符合条件的子字符串，则返回空字符串 “” 。</p><p>如果 s 中存在多个符合条件的子字符串，返回任意一个。</p><p>注意： 对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。</p><p>示例 1：</p><p>输入：s &#x3D; “ADOBECODEBANC”, t &#x3D; “ABC”<br>输出：”BANC”<br>解释：最短子字符串 “BANC” 包含了字符串 t 的所有字符 ‘A’、’B’、’C’<br>示例 2：</p><p>输入：s &#x3D; “a”, t &#x3D; “a”<br>输出：”a”<br>示例 3：</p><p>输入：s &#x3D; “a”, t &#x3D; “aa”<br>输出：””<br>解释：t 中两个字符 ‘a’ 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这是关于统计 子字符串中出现的字符以及每个字符出现的次数的面试题。如果需要满足条件，则t中出现的字符在s中都会出现。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h4><ol><li>通过建立哈希表，来存放字符串<code>t</code>中出现的字符，并将出现次数记录</li><li>通过双指针，将字符串<code>s</code>进行判别。右指针用于查找字符，左指针用于判断长度<ol><li>如果存在<code>s</code>中有元素能够匹配哈希表中的元素，那么就进行<code>-1</code>操作，同时还需要将该指针右移直到<code>s</code>中包括<code>t</code>中的字符</li><li>如果没有出现则说明不存在这种子字符串。</li></ol></li><li>当找到这种子字符串，然后判断最小长度。根据移除左指针所在的元素之后，是否该子字符串中还是包含<code>t</code>的所有字符来判别是否为最小长度<ol><li>根据左指针所在字符判断哈希表中是否出现，如果出现则进行<code>+1</code>操作移出</li></ol></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>关于 String.substring(int start,int end);</p><ul><li><strong>该函数是不多见的小写情况，不符合驼峰命名法</strong></li><li>参数的理解，从下标start开始，往后数end个元素。也就是<code>[start,end)</code></li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">minWindow</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// getOrDefault表示 找到key所在的value就返回该值,否则就返回默认值</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> hashMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 出现在t中但未出现在s字符的个数</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// start与end是找到符合条件的 minStart与minEnd表示匹配符合结果的</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minLength <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二个判别条件是，当这个子字符串是末尾才匹配成功</span>    <span class="token comment" spellcheck="true">// ADOEODEDDDNBC", "ABC" 到结尾才能匹配</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// count > 0 表示s中还没有找到匹配的子字符串</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> endCh <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 没有该值就直接跳过</span>            <span class="token comment" spellcheck="true">// 有则将哈希表有的结果减一</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>endCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>endCh<span class="token punctuation">,</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>endCh<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断如果count的值为0，表示在s中找到符合t的字符</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>endCh<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            end<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// count &lt;= 0 表示都找到了,现在只需要找到符合条件的子字符串的最小长度</span>            <span class="token comment" spellcheck="true">// 这句话如果count &lt;= 0时,第一次肯定会执行啊</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">&lt;</span> minLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minLength <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可能疑问点在于 为什么不进行+1的操作,原因在于 if(count > 0)已经给end进行了+1操作</span>                minStart <span class="token operator">=</span> start<span class="token punctuation">;</span>                minEnd <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">char</span> startCh <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>startCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>startCh<span class="token punctuation">,</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>startCh<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>startCh<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> minLength <span class="token operator">&lt;</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>minStart<span class="token punctuation">,</span> minEnd<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-字符串016-不含重复字符的最长子字符串</title>
      <link href="/2022/03/23/ds-zi-fu-chuan-016-bu-han-chong-fu-zi-fu-de-zui-chang-zi-zi-fu-chuan/"/>
      <url>/2022/03/23/ds-zi-fu-chuan-016-bu-han-chong-fu-zi-fu-de-zui-chang-zi-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长连续子字符串 的长度。</p><p>示例 1:</p><p>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子字符串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子字符串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。<br>示例 4:</p><p>输入: s &#x3D; “”<br>输出: 0</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>题目要求：</strong></p><p>是一个字符，并不是字母，<strong>char类型的字符能够表示2个字节，故有256个字符</strong>。</p><p>因此标记数组的大小为256。</p><p><strong>过程分析：</strong></p><p>使用两个指针，指针之间的子字符串就是满足条件的字符串，他们的长度可以通过他们指针下标的差值运算得出。</p><ol><li><p>判断是否重复</p><ul><li><p>如果该字符没有出现，则对该标记数组+1</p></li><li><p>如果重复出现则该标记数组的值肯定大于1</p></li></ul></li><li><p>执行操作</p><ul><li>如果第一次出现，将右指针向右移动一位，继续判断</li><li>如果重复出现，则将左指针向右移动一位，同时将该元素所在的标记数组的值减1</li></ul></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>使用方法判定是否为重复的元素</li></ol><blockquote><p>因为如果重复 该标记数组的值肯定比1大。</p><p>另外</p><pre class="line-numbers language-java"><code class="language-java">counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hasGreaterThan1</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">++</span>j<span class="token punctuation">;</span>    counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span>longest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>longest<span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么需要加了之后判断是否超出呢？原因在于因为可能添加之后的元素之前的标记数组中有了，所以需要判别，例如当出现<code>aa</code>时，该标记数组的值就为2了，说明出现重复，直到他不重复时，就可以进行比较最大值。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i 右指针</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// j 左指针 但是为什么是负一？其实为0也是可以 只不过在判断最大值时需要加1操作</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> longest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hasGreaterThan1</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        longest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>longest<span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> longest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasGreaterThan1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">:</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 只要有一个大于1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>根据一个标记数来记录是否重复</li></ol><blockquote><p>对上一个方法进行改进，不需要对counts标记数组进行遍历</p><p>只是用一个标记数表示。</p><p>思路是当该值为1则表示重复，需要进行左指针移位操作直到该标记数的值为0，则进行最大值比较</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> longest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个标记的数只按一位一位的运算</span>    <span class="token keyword">int</span> countDup <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            countDup<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 为0 才表示不重复</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>countDup <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将j所在的字符移除</span>            counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果把重复的元素移除去了 等于1 表示没有重复</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                countDup<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        longest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token punctuation">,</span> longest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> longest<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-字符串015-字符串中所有变位词</title>
      <link href="/2022/03/22/ds-zi-fu-chuan-015-zi-fu-chuan-zhong-suo-you-bian-wei-ci/"/>
      <url>/2022/03/22/ds-zi-fu-chuan-015-zi-fu-chuan-zhong-suo-you-bian-wei-ci/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个字符串 s 和 p，找到 s 中所有 p 的 变位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p><p>变位词 指字母相同，但排列不同的字符串。</p><p>示例 1:</p><p>输入: s &#x3D; “cbaebabacd”, p &#x3D; “abc”<br>输出: [0,6]<br>解释:<br>起始索引等于 0 的子串是 “cba”, 它是 “abc” 的变位词。<br>起始索引等于 6 的子串是 “bac”, 它是 “abc” 的变位词。<br> 示例 2:</p><p>输入: s &#x3D; “abab”, p &#x3D; “ab”<br>输出: [0,1,2]<br>解释:<br>起始索引等于 0 的子串是 “ab”, 它是 “ab” 的变位词。<br>起始索引等于 1 的子串是 “ba”, 它是 “ab” 的变位词。<br>起始索引等于 2 的子串是 “ab”, 它是 “ab” 的变位词。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>思路<code>与DS-字符串014-字符串中的变位词</code>思路差不多，主要是一个求是否是变位词，一个求的是次数的下标。</p><p>主要还是借用标记数组，用来标识p出现的次数，然后在s中寻找。</p><p><strong>该标记数组中，-1表示多出来的字符，0表示匹配成功，1表示还没有被匹配的字符</strong></p><blockquote><p> 其中这个寻找的过程使用到了一些知识，开始看我并没有看懂，后来通过自己演绎得出的结果。</p></blockquote><blockquote><p><strong>演绎过程</strong></p><p>假设s为<code>cbaebabacd</code>，p为<code>abc</code></p><p>下面为演示结果，**-1表示多出来的字符，0表示匹配成功，1表示还没有被匹配的字符**</p><table><thead><tr><th align="center">i的取值</th><th align="center">a，b，c，d，e</th><th align="center">s中的字符</th></tr></thead><tbody><tr><td align="center">i&#x3D;0</td><td align="center">1，0，-1，0，0</td><td align="center">c</td></tr><tr><td align="center">i&#x3D;1</td><td align="center">1，0，-1，0，0</td><td align="center">c，b</td></tr><tr><td align="center">i&#x3D;2</td><td align="center">0，0，0，0，0</td><td align="center">c，b，a</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">b，a，e</td></tr><tr><td align="center">i&#x3D;3</td><td align="center">0，0，1，-1，0</td><td align="center">b，a，e</td></tr><tr><td align="center">i&#x3D;4</td><td align="center">0，0，1，0，-1</td><td align="center">a，e，b</td></tr><tr><td align="center">i&#x3D;5</td><td align="center">0，0，1，0，-1</td><td align="center">e，b，a</td></tr><tr><td align="center">i&#x3D;6</td><td align="center">0，-1，1，0，0</td><td align="center">b，a，b</td></tr><tr><td align="center">i&#x3D;7</td><td align="center">-1，0，1，0，0</td><td align="center">a，b，a</td></tr><tr><td align="center">i&#x3D;8</td><td align="center">0，0，0，0，0</td><td align="center">b，a，c</td></tr><tr><td align="center">i&#x3D;9</td><td align="center">0，1，0，-10</td><td align="center">a，c，d</td></tr></tbody></table></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下面两种代码看起来不同实则一样</p><p><strong>在for循环中只是用一个指针</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 为什么i放在外面</span>        <span class="token comment" spellcheck="true">// 首次匹配的情况需要考虑</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                counts<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                counts<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areAllZero</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 为什么添加0？</span>                <span class="token comment" spellcheck="true">// 表示如果一开始就有匹配的，说明s1前几个是变位词，所以需要添加下标0</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 从s2.length()的长度给值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                counts<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这一步 为什么要减去s2.length 是除去？</span>                <span class="token comment" spellcheck="true">// 用于将s1中的首头元素放回到标记数组中</span>                counts<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areAllZero</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">areAllZero</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">:</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在for循环中使用两个指针</strong></p><p><code>int i=0;</code></p><p><code>int i = p.length()</code></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flags<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            flags<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAllZero</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flags<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            flags<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isAllZero</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">-</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isAllZero</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> flag <span class="token operator">:</span> flags<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-字符串014-字符串中的变位词</title>
      <link href="/2022/03/22/ds-zi-fu-chuan-014-zi-fu-chuan-zhong-de-bian-wei-ci/"/>
      <url>/2022/03/22/ds-zi-fu-chuan-014-zi-fu-chuan-zhong-de-bian-wei-ci/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-II-014-字符串中的变位词"><a href="#剑指-Offer-II-014-字符串中的变位词" class="headerlink" title="[剑指 Offer II 014]字符串中的变位词"></a>[剑指 Offer II 014]字符串中的变位词</h2><blockquote><p>变位词：指组成各个单词的字母以及每个字母出现的次数完全相同，只是字母的排列顺序不同。例如<code>pots,stop,tops</code>就是一组变位词。</p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的某个变位词。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的 子串 。</p><p>示例 1：</p><p>输入: s1 &#x3D; “ab” s2 &#x3D; “eidbaooo”<br>输出: True<br>解释: s2 包含 s1 的排列之一 (“ba”).<br>示例 2：</p><p>输入: s1&#x3D; “ab” s2 &#x3D; “eidboaoo”<br>输出: False</p></blockquote><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p><code>基于双指针和哈希表</code><br>主要根据s1中出现的字符的次数与s2中子字符出现的次数相等则表示是变位词。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>首先给出s1字符串出现的次数<ol><li>将s1的字符串在哈希表中表示出现的次数。<code>int[] counts = new int[26];</code>，</li><li>如果s1中有则<code>counts[s1.charAt(i) - &#39;a&#39;]++;</code></li><li>并将<code>counts[s2.charAt(i) - &#39;a&#39;]--;</code>表示当成子数列</li></ol></li><li>然后找s2中与s1匹配的子字符串<ol><li><code>counts[s2.charAt(i) - &#39;a&#39;]--; </code>向后移动一位，当成子字符串</li><li><code>counts[s2.charAt(i - s1.length()) - &#39;a&#39;]++;</code>将子字符串最左边的字符删掉</li></ol></li><li>最后比较该哈希表中是否都为0则表示查询到了</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过<code>+1</code>的操作表示标记的字符，通过<code>-1</code>表示找到的字符。如果两者相等即结果为0则表示找到该变位词。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>当字符串使用<code>toCharArray()</code>方法时，执行效率会变低，因为先将String对象转换为字符数组，然后遍历</p><p>而直接用<code>str.length()</code>则会快很多，不需要经过字符串转换为字符数组</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counts<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            counts<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areAllZero</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counts<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            counts<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areAllZero</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">areAllZero</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">:</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面使用<code>toCharArray()</code>方式的执行效率慢</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 标记数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            flags[s1.charAt(i) - 'a'] += 1;</span><span class="token comment" spellcheck="true">//            flags[s2.charAt(i) - 'a'] -= 1;</span>            flags<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>            flags<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmptyOfFlags</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            flags[s2.charAt(i) - 'a'] -= 1;</span><span class="token comment" spellcheck="true">//            flags[s2.charAt(i - length) - 'a'] += 1;</span>            flags<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>            flags<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> length<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmptyOfFlags</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isEmptyOfFlags</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> flag <span class="token operator">:</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组013-二维子矩阵的和</title>
      <link href="/2022/03/22/ds-shu-zu-013-er-wei-zi-ju-zhen-de-he/"/>
      <url>/2022/03/22/ds-shu-zu-013-er-wei-zi-ju-zhen-de-he/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二维矩阵 matrix，以下类型的多个请求：</p><p>计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2) 。<br>实现 NumMatrix 类：</p><p>NumMatrix(int[][] matrix) 给定整数矩阵 matrix 进行初始化<br>int sumRegion(int row1, int col1, int row2, int col2) 返回左上角 (row1, col1) 、右下角 (row2, col2) 的子矩阵的元素总和。</p><p>示例 1：</p><p><img src="https://pic.leetcode-cn.com/1626332422-wUpUHT-image.png" alt="img"></p><p>输入:<br>[“NumMatrix”,”sumRegion”,”sumRegion”,”sumRegion”]<br>[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]<br>输出:<br>[null, 8, 11, 12]</p><p>解释:<br>NumMatrix numMatrix &#x3D; new NumMatrix([[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]]);<br>numMatrix.sumRegion(2, 1, 4, 3); &#x2F;&#x2F; return 8 (红色矩形框的元素总和)<br>numMatrix.sumRegion(1, 1, 2, 2); &#x2F;&#x2F; return 11 (绿色矩形框的元素总和)<br>numMatrix.sumRegion(1, 2, 2, 4); &#x2F;&#x2F; return 12 (蓝色矩形框的元素总和)</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目要求：求子矩阵的和</p><p><strong>思路：</strong></p><ol><li>根据一个辅助求和矩阵，该矩阵表示从最左边的顶点到目标最右下的顶点的元素和</li><li>根据下面例子的公式，目标矩阵是在该大矩阵的范围内，只需要对其进行分解运算即可。</li><li>为了方便理解，可看下面的实例说明。</li></ol><blockquote><p><strong>注意点:</strong></p><p><strong>1. 根据格子来算下标位置，如果根据线则不好判别</strong></p><p><strong>2. 关于辅助求和矩阵：</strong>因为涉及到多个列值，那么则可以通过对上一列的所在行的和得到下一列的和。什么意思呢？例如一个矩阵为</p><p>3，0，1，4，2</p><p>5，6，3，2，1</p><p>1，2，0，1，5</p><p>那么第一行中的列数和，直接可以对该列累加求和运算得出<code>colSum += matrix[row][col];</code></p><p>第二行中的列数和，则需要通过第一行的列数和进行相加运算。比如如果要求第二行元素6的和，那么则是第一行中0的元素和+第二行5和6的元素和。抽象为数据公式则是<code>colSum【0~col】+sum【row，col】</code></p></blockquote><p>图中，红色代表目标矩阵，该矩阵的和<code>sum[(4-7),(3-5)] = sum[(0-7),(0-5)] - sum[(0-7),(0-2)] - sum[(0-3),(0-5)] + sum[(0-3),(0-2)]</code> </p><p>其中<code>sum[(0-7),(0-5)]</code>为大蓝色的方框</p><p>其中<code>sum[(0-7),(0-2)]</code>为黄色色的方框</p><p>其中<code>sum[(0-3),(0-5)]</code>为绿色的方框</p><p>其中<code>sum[(0-3),(0-2)]</code>为黄色和绿色相交的方框</p><p>这种方法通过将对角线的和先算出来，到时候计算时候只需要<code>O(1)</code></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1647061683877-30123342-4b13-4b59-a099-f54a4b66a0c4.png" alt="无标题.png"></p><hr><p><strong><code>错误思路</code></strong></p><p>有一个最简单的思路，我直接将需要查询的行列直接求和计算就可以。但是可能会出现的问题，时间复杂度太高，会导致超时</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> row1 <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>row2 <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> col1 <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> col2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用n个时，该方法的执行效率很低，不可取</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 标记数组初始化,用于记录到下标的和</span>        flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//                int colSum = 0;</span>            <span class="token keyword">int</span> rowSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 应该是前一个的和减去下一个的和</span>                <span class="token comment" spellcheck="true">//                    rowSum = flags[row][col + 1];</span>                <span class="token comment" spellcheck="true">//                    colSum += matrix[row][col];</span>                <span class="token comment" spellcheck="true">//                    flags[row + 1][col + 1] = colSum + rowSum;</span>                rowSum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>                flags<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rowSum <span class="token operator">+</span> flags<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h4><p>注意判断条件<code>matrix.length == 0 || matrix[0].length == 0</code>matrix必须有意义才行</p><ol><li>关于这个代码，就是刚刚上面关于<code>关于辅助求和矩阵</code>的思想</li></ol><pre class="line-numbers language-java"><code class="language-java">                <span class="token keyword">int</span> colSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> rowSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 应该是前一个的和减去下一个的和</span>                   rowSum <span class="token operator">=</span> flags<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   colSum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>                   flags<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> colSum <span class="token operator">+</span> rowSum<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>而这个则是上面代码的简化版本</li></ol><pre class="line-numbers language-java"><code class="language-java"> rowSum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>flags<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rowSum <span class="token operator">+</span> flags<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>关于返回子矩阵的和</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">return</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可查看上面的图例进行理解</p><p><strong>有一点注意是初始的flags数组是比他的长度加1，原因防止越界异常。</strong></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 二维子矩阵的和 <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 标记数组初始化,用于记录到下标的和</span>            flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                int colSum = 0;</span>                <span class="token keyword">int</span> rowSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 应该是前一个的和减去下一个的和</span><span class="token comment" spellcheck="true">//                    rowSum = flags[row][col + 1];</span><span class="token comment" spellcheck="true">//                    colSum += matrix[row][col];</span><span class="token comment" spellcheck="true">//                    flags[row + 1][col + 1] = colSum + rowSum;</span>                    rowSum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>                    flags<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rowSum <span class="token operator">+</span> flags<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NumMatrix matrix <span class="token operator">=</span> <span class="token keyword">new</span> 二维子矩阵的和<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> matrix<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag <span class="token operator">:</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组012-左右两边子数组的和相等</title>
      <link href="/2022/03/22/ds-shu-zu-012-zuo-you-liang-bian-zi-shu-zu-de-he-xiang-deng/"/>
      <url>/2022/03/22/ds-shu-zu-012-zuo-you-liang-bian-zi-shu-zu-de-he-xiang-deng/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给你一个整数数组 nums ，请计算数组的 中心下标 。</p><p>数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p><p>如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。</p><p>示例 1：</p><p>输入：nums &#x3D; [1,7,3,6,5,6]<br>输出：3<br>解释：<br>中心下标是 3 。<br>左侧数之和 sum &#x3D; nums[0] + nums[1] + nums[2] &#x3D; 1 + 7 + 3 &#x3D; 11 ，<br>右侧数之和 sum &#x3D; nums[4] + nums[5] &#x3D; 5 + 6 &#x3D; 11 ，二者相等。<br>示例 2：</p><p>输入：nums &#x3D; [1, 2, 3]<br>输出：-1<br>解释：<br>数组中不存在满足此条件的中心下标。<br>示例 3：</p><p>输入：nums &#x3D; [2, 1, -1]<br>输出：0<br>解释：<br>中心下标是 0 。<br>左侧数之和 sum &#x3D; 0 ，（下标 0 左侧不存在元素），<br>右侧数之和 sum &#x3D; nums[1] + nums[2] &#x3D; 1 + -1 &#x3D; 0 。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目要求是求出满足左右相等的中心下标</p><p><strong>思路：</strong></p><p><strong>思路一：</strong>使用可以通过遍历两个循环，一个循环从前往后找，一个循环从后往前找，每次累计记录当前 前i项和的下标，使用哈希表记录，最后匹配哈希表中的下标位置，如果找到就返回该位置，否则就返回-1表示没有找到。</p><p><strong>思路二</strong>： 可以先求整个数组的和，然后可以根据公式**sum<del>n</del> - sum<del>i</del>&#x3D;sum<del>i</del>-nums<del>i</del>**得到，不需要通过标记数组</p><p>下面给出思路一与思路二的代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>思路一</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map_i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map_j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum_j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum_i <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum_i<span class="token punctuation">;</span>        map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum_j <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        map_j<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum_j<span class="token punctuation">;</span>        map_j<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map_i<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map_j<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> map_j<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> map_j<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路二：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        total <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">-</span> sum <span class="token operator">==</span> sum <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组011-0和1个数相同的子数组</title>
      <link href="/2022/03/22/ds-shu-zu-011-0-he-1-ge-shu-xiang-tong-de-zi-shu-zu/"/>
      <url>/2022/03/22/ds-shu-zu-011-0-he-1-ge-shu-xiang-tong-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。</p><p>示例 1:</p><p>输入: nums &#x3D; [0,1]<br>输出: 2<br>说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。<br>示例 2:</p><p>输入: nums &#x3D; [0,1,0]<br>输出: 2<br>说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>该题目可以运用010的解题思路，首先回顾DS-数组010-和为k的子数组</p><blockquote><p><strong>题目要求</strong>是求出子数列的和等于k的个数</p><p><strong>解题思路：</strong>知道前i项和sum<del>i</del>和前j项和sum<del>j</del>（j&lt;i）,那么就有，如果有 sum<del>j</del> &#x3D; sum<del>i</del>-k，只需要判断sum<del>j</del>的个数就知道满足和为k的子数列的个数</p></blockquote><p>同理：该题求含有相同数量的 0 和 1 的最长连续子数组只需要将上述的k值变换成sum<del>i</del>的值，那么就有可以得到和为0的子数列，问题关键需要<strong>将0转换为-1</strong>，这样做的<strong>目的</strong>是保证是相同的，因为如果是相同的话，他们的和是0。如果不转换的话不好直接求解。</p><p><strong>思路</strong>：首先使用哈希表存放sum和数组下表，就能知道该子数组满足和为0的长度有多长。通过和为i的和与和为j的和找到 i-j+1,而和为j可以通过哈希表查询，和为i可以通过到该数组长度的累加</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>可能疑问点：<code>sumToIndex.put(0, -1);</code></p><p>目的是方便计算。</p><p>而<strong>DS-数组010-和为k的子数组</strong>中的则是sumToIndex.put(0, 1);表示的是当前sum<del>i</del>项和为k时，那么他们相减的结果为0，但是这种情况他们出现了一次。，所以需要哈希表中key&#x3D;0的值设置value为1</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> sumToIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sumToIndex<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sumToIndex<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// i - sumToIndex.get(sum) 表示需要找到sum 对应的j的值，这样才能找到 j+1~i之间子数组的长度</span>            maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> i <span class="token operator">-</span> sumToIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sumToIndex<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组008-和大于等于target的最短子数组</title>
      <link href="/2022/03/20/ds-shu-zu-008-he-da-yu-deng-yu-target-de-zui-duan-zi-shu-zu/"/>
      <url>/2022/03/20/ds-shu-zu-008-he-da-yu-deng-yu-target-de-zui-duan-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个含有 n 个<strong>正整数</strong>的数组和一个<strong>正整数</strong> target 。</p><p>找出该数组中<strong>满足其和 ≥ target</strong> 的<strong>长度最小</strong>的 <strong>连续子数组</strong> [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><p>示例 1：</p><p>输入：target &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]<br>输出：2<br>解释：子数组 [4,3] 是该条件下的长度最小的子数组。<br>示例 2：</p><p>输入：target &#x3D; 4, nums &#x3D; [1,4,4]<br>输出：1<br>示例 3：</p><p>输入：target &#x3D; 11, nums &#x3D; [1,1,1,1,1,1,1,1]<br>输出：0</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>题目要求是 正整数，并且数组也为正整数，可以知道求和结果肯定比之前求和的结果大，所以可以使用双指针，从头开始，求和如果比这个target大则进行减法，否则则进行加法</li><li>使用2个指针指向首元素</li><li>依次包裹这个数组，相当于他的子数列。例如<code>数组为【1，2，3，4】 target=2，i=0,j=1</code>则<code>[1,2]</code>为他的子数列，但是不满足该条件比target大，所以需要将<code>1</code>剔除，然后<code>[2]</code>就是满足条件</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用双指针</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> sum <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组010-和为k的子数组</title>
      <link href="/2022/03/20/ds-shu-zu-010-he-wei-k-de-zi-shu-zu/"/>
      <url>/2022/03/20/ds-shu-zu-010-he-wei-k-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个整数数组和一个整数 <code>k</code> <strong>，</strong>请找到该数组中和为 <code>k</code> 的连续子数组的个数。</p><p>示例 1 :</p><p>输入:nums &#x3D; [1,1,1], k &#x3D; 2<br>输出: 2<br>解释: 此题 [1,1] 与 [1,1] 为两种不同的情况<br>示例 2 :</p><p>输入:nums &#x3D; [1,2,3], k &#x3D; 3<br>输出: 2</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>思路，双指针在该问题中无法求解，原因有两点</p><ol><li>该求的数组是子数组</li><li>该数组不是正数</li><li>为什么？原因在于子数组求和中如果出现负数的情况下，不能够判断增加一个数是比之前大还是比之前小，对目标值会造成影响</li></ol></li><li><p>该方法<strong>使用累加数组求子数组的和</strong></p><ol><li>通过知道前n项和sum<del>0-n</del>，如果需要找出目标值为k的数，则只需要找到前sum<del>0-j</del>的和，那么有<strong>sum<del>0-n</del>&#x3D;k + sum<del>0-j</del> &#x3D; sum<del>j+1-n</del> + sum<del>0-j</del></strong></li><li>所以也就是求**sum<del>0-j</del>**的个数问题</li><li>故可以使用哈希表，存放sum以及出现的次数可以方便得出结果</li></ol></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>可能对于<code>map.put(0,1);</code>这个语句有两个作用</p><ol><li><p>初始化map集合，不然他的结果为null值</p></li><li><p>因为可能会出现求和数列<code>sum=k</code>，这时候需要有一个默认值。</p></li></ol><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> k <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组009-乘积小于K的子数组</title>
      <link href="/2022/03/20/ds-shu-zu-009-cheng-ji-xiao-yu-k-de-zi-shu-zu/"/>
      <url>/2022/03/20/ds-shu-zu-009-cheng-ji-xiao-yu-k-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个正整数数组 nums和整数 k ，请找出该数组内乘积小于 k 的连续的子数组的个数。</p><p> 示例 1:</p><p>输入: nums &#x3D; [10,5,2,6], k &#x3D; 100<br>输出: 8<br>解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。<br>需要注意的是 [10,5,2] 并不是乘积小于100的子数组。<br>示例 2:</p><p>输入: nums &#x3D; [1,2,3], k &#x3D; 0<br>输出: 0</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>这个和找出求和大于等于targe类似，都是根据运算得出是否比目标值大（或者小），但是区别在于一个是求长度，一个是求数量</li><li>关于数量如何求解数量需要使用到<code>count +=j - i + 1;</code>，这个的意思是<code>(i,j] + 1</code></li></ol><blockquote><p>例如该数组为【10，5，2，6】</p><p>则 </p><p>【10】 (0,0】+ 1 &#x3D; ∅ + 1 &#x3D; 1；</p><p>【10，5】 (0,1】 + 1 &#x3D; 1 + 1 &#x3D; 2; 表示【5】，【10，5】</p><p>【10，5，2】 不满足100 故而是【5，2】 （1，2】+1 &#x3D; 2； 表示【2】，【5，2】</p><p>【5，2，6】 （1，3】 + 1 &#x3D; 2 + 1 &#x3D; 3；表示【6】，【2，6】，【5，2，6】</p><p><strong>因此结果为 1+2+2+3 &#x3D;8</strong></p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>count +=j - i + 1;</code>与<code>count += right &gt;= left ? right - left + 1 : 0;</code>是一样的，原因在于当该<code>while (i &lt;= j &amp;&amp; sum &gt;= k) &#123;</code>中限制了<code>i</code>只能比<code>j</code>大<code>1</code></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSubarrayProductLessThanK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">*=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> sum <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">/=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            count <span class="token operator">+=</span>j <span class="token operator">>=</span> i <span class="token operator">?</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组007-数组中和为0的三个数</title>
      <link href="/2022/03/20/ds-shu-zu-007-shu-zu-zhong-he-wei-0-de-san-ge-shu/"/>
      <url>/2022/03/20/ds-shu-zu-007-shu-zu-zhong-he-wei-0-de-san-ge-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a ，b ，c ，使得 a + b + c &#x3D; 0 ？请找出所有和为 0 且 不重复 的三元组。</p><p>示例 1：</p><p>输入：nums &#x3D; [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br>示例 2：</p><p>输入：nums &#x3D; []<br>输出：[]<br>示例 3：</p><p>输入：nums &#x3D; [0]<br>输出：[]</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>可以根据 <a href="">DS-数组006-排序数组中两个数字之和</a>求解，问题关键是<code>a+b+c=0</code>转换为<code>a+b=-c</code></p></li><li><p>但是这个前提条件是有序</p></li><li><p>不重复的判定可以根据下面代码判定</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>疑问点</p><ol><li><p>为什么这个会进行，是否会出现死循环的情况</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原因在于上面的赋值语句中赋值了一次，该循环在满足<code>i &lt; nums.length - 2</code>条件下会执行一次</li></ul></li><li><p>为什么不用判断k的数组是否重复？</p><ul><li><p>因为k下表所在的数组元素<code>nums[k]</code>是最后一个满足条件的，而k之前的数组元素只能小于等于该值<code>nums[k]</code>，因而如果出现<code>num[k]</code>重复，则只需要判断<code>nums[j]</code>是否和<code>num[k]</code>相等，即不用判断<code>nums[k]</code>。</p></li><li><p>也就是<code>nums[j]</code>最终会找到<code>nums[k]</code>，也就找到了重复的<code>nums[k]</code></p></li></ul></li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> lists<span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">twoSums</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为什么这个会进行，是否会出现死循环的情况？ 由于temp == nums[i] 所以至少会执行一次</span>        <span class="token comment" spellcheck="true">// 并且这个是找到相同中的最后一个元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lists<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">twoSums</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 为什么不用判断k的数组是否重复？</span>            <span class="token comment" spellcheck="true">// 因为到最后如果有相同的,则会退出该数列的和比如有 -4，2，2中2有多个则会通过前一个j判断是否与后一面k相同，相同则返回到末尾即跳出循环</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> temp <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-掌握不熟练的题型</title>
      <link href="/2022/03/19/ds-zhang-wo-bu-shou-lian-de-ti-xing/"/>
      <url>/2022/03/19/ds-zhang-wo-bu-shou-lian-de-ti-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="掌握不熟练的题型"><a href="#掌握不熟练的题型" class="headerlink" title="掌握不熟练的题型"></a>掌握不熟练的题型</h4><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><ol><li>001-整数除法</li><li>004-只出现一次的数字</li><li>005-单词的最大乘积</li></ol><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li><a href="https://leetcode-cn.com/problems/1fGaJU/">007-数组中和为 0 的三个数</a></li><li>[<a href="https://leetcode-cn.com/problems/QTMn0o/submissions/">剑指 Offer II 010. 和为 k 的子数组</a></li><li><a href="https://leetcode-cn.com/problems/A1NYOS/">剑指 Offer II 011. 0 和 1 个数相同的子数组</a> </li><li><a href="https://leetcode-cn.com/problems/O4NDxx/">剑指 Offer II 013. 二维子矩阵的和</a> 【关于二维矩阵的和，以及如何计算】</li></ol><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ol><li><a href="https://leetcode-cn.com/problems/VabMRr/">剑指 Offer II 015. 字符串中的所有变位词</a></li><li><a href="https://leetcode-cn.com/problems/wtcaE1/">剑指 Offer II 016. 不含重复字符的最长子字符串</a></li><li><a href="https://leetcode-cn.com/problems/M1oyTv/">剑指 Offer II 017. 含有所有字符的最短字符串</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组006-排序数组中两个数字之和</title>
      <link href="/2022/03/19/ds-shu-zu-006-pai-xu-shu-zu-zhong-liang-ge-shu-zi-zhi-he/"/>
      <url>/2022/03/19/ds-shu-zu-006-pai-xu-shu-zu-zhong-liang-ge-shu-zi-zhi-he/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个已按照 升序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p><p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 0 开始计数 ，所以答案数组应当满足 0 &lt;&#x3D; answer[0] &lt; answer[1] &lt; numbers.length 。</p><p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p><p><strong>示例 1：</strong></p><p>输入：numbers &#x3D; [1,2,4,6,10], target &#x3D; 8<br>输出：[1,3]<br>解释：2 与 6 之和等于目标数 8 。因此 index1 &#x3D; 1, index2 &#x3D; 3 。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>因为该数组是一个升序排序的数组，故可以使用双指针，从第一个和最后一个比较，类似于二分查找，</p><ul><li>当比目标值大则，则对最后一个移位，否则对前一个移位</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数005-单词长度的最大乘积</title>
      <link href="/2022/03/18/ds-zheng-shu-005-dan-ci-chang-du-de-zui-da-cheng-ji/"/>
      <url>/2022/03/18/ds-zheng-shu-005-dan-ci-chang-du-de-zui-da-cheng-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个字符串数组 words，请计算当两个字符串 words[i] 和 words[j] 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。</p><p>示例 1:</p><p>输入: words &#x3D; [“abcw”,”baz”,”foo”,”bar”,”fxyz”,”abcdef”]<br>输出: 16<br>解释: 这两个单词为 “abcw”, “fxyz”。它们不包含相同字符，且长度的乘积最大。<br>示例 2:</p><p>输入: words &#x3D; [“a”,”ab”,”abc”,”d”,”cd”,”bcd”,”abcd”]<br>输出: 4<br>解释: 这两个单词为 “ab”, “cd”。<br>示例 3:</p><p>输入: words &#x3D; [“a”,”aa”,”aaa”,”aaaa”]<br>输出: 0<br>解释: 不存在这样的两个单词。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可通过建立标记数组完成，通过查询该标记数组可以将快速得出是否匹配</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="用哈希表记录字符串出现的次数"><a href="#用哈希表记录字符串出现的次数" class="headerlink" title="用哈希表记录字符串出现的次数"></a>用哈希表记录字符串出现的次数</h4><p>该标记数组充当哈希表，用于快速查询各个字符串的字符是否相等，通过<code>if (flags[i][k] &amp;&amp; flags[j][k])</code>判别</p><ol><li><p>创建一个标记数组，用来记录数组中每个单词的每个字母是否出现</p></li><li><p>字符比较：通过<code>flags[i][k] &amp;&amp; flags[j][k]</code>判断，因为flags数组是布尔类型的，只需要判断每个位【单词表上abcd… xyz】上是否有值即可</p></li><li><p>最后通过结束条件<code>k==26</code>计算乘积的结果，通过<code>Math.max(int a,int b)</code>比较即可</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span><span class="token punctuation">{</span>                flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>aChar <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span>words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> flags<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用整数二进制数位记录字符串出现的次数"><a href="#用整数二进制数位记录字符串出现的次数" class="headerlink" title="用整数二进制数位记录字符串出现的次数"></a>用整数二进制数位记录字符串出现的次数</h4><p>思路</p><ol><li>标记数组：通过二进制的方式表示字母(abcd…)，<code>int</code>类型有32位，而字母表一共才26个所以能够放下，不会出现溢出的问题。通过<code>1或者0</code>充当布尔类型  <code>1 &lt;&lt; (ch - &#39;a&#39;)</code></li><li>判断：通过各个位数的<code>&amp;</code>与运算即可求得是否相等。<code>(flags[i] &amp; flags[j])==0</code></li></ol><blockquote><p><strong>1. 可能疑问点在于：</strong>这个是int类型有值的地方都是1，可以直接位运算吗？</p><p>可以，因为<code>1 &lt;&lt; (ch - &#39;a&#39;)</code>本来就是位运算，左移位运算。只是判断的位数</p><p><strong>2.疑问点二：</strong><code>flags[i] |= 1 &lt;&lt; (ch - &#39;a&#39;);</code>，为什么不能用<code>flags[i] += 1 &lt;&lt; (ch - &#39;a&#39;);</code></p><p>这个用<code>|=</code>表示该位不管有几个相同的字符都看做只有一个，例如如果出现<code>aaaa</code>时，则该位数只会为1，而不是为4。为什么不能为四呢，因为该数组需要变成二进制的表示形式，而如果为3则会将<code>a</code>与<code>aaaa</code>看成<code>1与4的与运算</code>那么结果为0，表示每个位数都不相同，而实际情况是相同的。</p></blockquote><p>与解法1的不同在于</p><ol><li>flags数组只用到了一维</li><li>判断方面只需要一次循环，时间复杂度看起来一样，但实际还是比较快</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个数组，用来以二进制的方式存放单词的字母</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给flags数组存放二进制值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 比较各个单词的字符匹配</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 表示每个数位都不相同</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> flags<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> prod <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>prod<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数004-只出现一次的数字</title>
      <link href="/2022/03/18/ds-zheng-shu-004-zhi-chu-xian-yi-ci-de-shu-zi/"/>
      <url>/2022/03/18/ds-zheng-shu-004-zhi-chu-xian-yi-ci-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。</p><p> 示例 1：</p><p>输入：nums &#x3D; [2,2,3,2]<br>输出：3<br>示例 2：</p><p>输入：nums &#x3D; [0,1,0,1,0,1,100]<br>输出：100</p></blockquote><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>思路：</p><ol><li>整数用二进制表示是32位的0或1组成，如果有3个一样的数，那么他的任意位数<code>i,i∈[0,31]</code>的累计和都能被3整除，除去这个被3整除的。如果还有余数，则那个余数表示那个只出现1次的数字的位数上是否有1；</li><li>通过被3除的位数，我们可以知道这个二进制所代表的值是什么</li></ol><blockquote><p>举例：</p><p>nums &#x3D; [2,2,3,2]</p><p>3：11</p><p>2：10</p><p>3个2： bitSums &#x3D; [0……. 3,0] <strong>能够被3除</strong></p><p>3个2和1个3  bitSums &#x3D; [0……. 4,1] <strong>被3除有余数表示的是3的二进制表示</strong></p></blockquote><p><code>bitSums[i] += (num &gt;&gt; (31 - i)) &amp; 1;</code>表示从最高位开始取，如果<code>&amp; 1</code>有值，则为<code>1</code>，否则为<code>0</code>，将<code>nums</code>数组中的每个数字都计算。</p><p><code>**result = (result &lt;&lt; 1) + bitSums[i] % 3;**</code><strong>表示根据数组表示的二进制数。只能从最最左边往右边取，如果从右往左边取会把地位覆盖为0</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bitSums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bitSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> bitSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>题目：输入一个整数数组，数组中只有一个数字出现m次，其他数字都出现n次。请找出那个唯一出现m次的数字。假设m不能被n整除</p><pre><code>result = (result &lt;&lt; 1) + bitSums[i] % n  % m;</code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数003-前n个数字二进制中1的个数</title>
      <link href="/2022/03/18/ds-zheng-shu-003-qian-n-ge-shu-zi-er-jin-zhi-zhong-1-de-ge-shu/"/>
      <url>/2022/03/18/ds-zheng-shu-003-qian-n-ge-shu-zi-er-jin-zhi-zhong-1-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p><pre class="line-numbers language-java"><code class="language-java">示例 <span class="token number">1</span><span class="token operator">:</span>输入<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">2</span>输出<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>解释<span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token number">1</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">1</span><span class="token number">2</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA"><code class="language-JAVA">示例 2:输入: n = 5输出: [0,1,1,2,1,2]解释:0 --> 01 --> 12 --> 103 --> 114 --> 1005 --> 101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><code>n</code>与<code>n-1</code>之间差一个1，在位运算中就是<code>n</code>与<code>n-1</code>的位相差最后一位1</p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><h4 id="通过-n-amp-n-1-的位运算求解"><a href="#通过-n-amp-n-1-的位运算求解" class="headerlink" title="通过 n&amp;(n-1)的位运算求解"></a>通过 <code>n&amp;(n-1)</code>的位运算求解</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arrResult<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    j <span class="token operator">=</span> j <span class="token operator">&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arrResult<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过Integer类中的bitCount-方法直接求解"><a href="#通过Integer类中的bitCount-方法直接求解" class="headerlink" title="通过Integer类中的bitCount()方法直接求解"></a>通过<code>Integer</code>类中的<code>bitCount()</code>方法直接求解</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="n-amp-n-1-的位运算求解的改进版本"><a href="#n-amp-n-1-的位运算求解的改进版本" class="headerlink" title="n&amp;(n-1)的位运算求解的改进版本"></a><code>n&amp;(n-1)</code>的位运算求解的改进版本</h4><p>原因在于数字<code>0</code>本来就没有位<code>1</code>。</p><p>这个才是重点：<code>res[i] = res[i &amp; (i - 1)] + 1;</code></p><p>整数<code>i</code>的二进制形式比<code>i &amp; (i - 1)</code>的二进制形式多一个<code>1</code>。可以举例说明</p><table><thead><tr><th>十进制数</th><th>二进制数</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td></tr><tr><td>3</td><td>11</td></tr><tr><td>4</td><td>100</td></tr></tbody></table><p>假如<code>i=4</code>，则<code>i-1=3</code>，可有<code>i &amp; (i - 1)=100 &amp; 011=0</code>。这个规律成立，并且为什么对应数组元素下表的数呢？原因也是上面所说<strong>整数</strong><code>**i**</code><strong>的二进制形式比</strong><code>**i &amp; (i - 1)**</code><strong>的二进制形式多一个</strong><code>**1**</code>。<code>**i &amp; (i - 1)**</code>肯定会对应该一个二进制数，而这个二进制数在数组中肯定有值，也就是相当于对应数组中的数<code>res[i &amp; (i - 1)]</code>与这个<code>res[i]</code>的差值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二个方法countBits-则是通过位运算进行的改进。"><a href="#第二个方法countBits-则是通过位运算进行的改进。" class="headerlink" title="第二个方法countBits_则是通过位运算进行的改进。"></a>第二个方法<code>countBits_</code>则是通过位运算进行的改进。</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits_</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为位运算的执行效率比数值运算效率高，直接是底层操作，而数值计算需要进行转换成二进制，故而效率比较低</p><p>重点是<code>res[i] = res[i &gt;&gt; 1] + (i &amp; 1);</code></p><p>为什么需要左移运算呢？</p><p>因为<code>i</code>的取值只有奇数或者偶数</p><ul><li>如果<code>i</code>是偶数的话，那么最低位就不可能为<code>1</code>，只能为0；另外<code>i</code>左移一位的二进制的<code>1</code>的值还是会没有变化，因为左移一位，相当于把最低位的<code>0</code>给抹去了。也就是计算<code>i/2</code>的结果的二进制<code>1</code>的个数。</li><li>如果<code>i</code>是奇数，则是相当于十进制中<code>i/2 + 1</code>，其他同上</li></ul><p>最后根据<code>(i &amp; 1)</code>判断最低位是奇数还是偶数，则进行<code>+1</code>的操作</p><p><strong>上面几种方法 我个人觉得最后一种方法比较容易理解。</strong></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数002-二进制加法</title>
      <link href="/2022/03/18/ds-zheng-shu-002-er-jin-zhi-jia-fa/"/>
      <url>/2022/03/18/ds-zheng-shu-002-er-jin-zhi-jia-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个 01 字符串 a 和 b ，请计算它们的和，并以二进制字符串的形式输出。</p><p>输入为 非空 字符串且只包含数字 1 和 0。</p><p><strong>示例 1:</strong></p><p>输入: a &#x3D; “11”, b &#x3D; “10”<br>输出: “101”</p><p><strong>示例 2:</strong></p><p>输入: a &#x3D; “1010”, b &#x3D; “1011”<br>输出: “10101”</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>处理这种问题关键在于</p><ol><li>如何取得进位</li><li>如何转换</li></ol><p>因为存在字符串的长度不固定，故不可用<code>int</code>类型，可能会导致溢出</p><p><strong>解决关键有两点</strong></p><ol><li>获取字符串的最后一位，进行加法运算。使用<code>String</code>类中的<code>charAt(int index)</code>方法</li><li>加法运算可能发生进位，需要有一个标志位<code>flag</code>,并依次位数加法，如果进位就进位。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">addBinary</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len_a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len_b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>len_a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> len_b <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> digitA <span class="token operator">=</span> len_a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>len_a<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> digitB <span class="token operator">=</span> len_b <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>len_b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                        sum <span class="token operator">=</span> digitA <span class="token operator">+</span> digitB <span class="token operator">+</span> flag<span class="token punctuation">;</span>            flag <span class="token operator">=</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> sum <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">:</span> sum<span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数001-整数除法</title>
      <link href="/2022/03/18/ds-zheng-shu-001-zheng-shu-chu-fa/"/>
      <url>/2022/03/18/ds-zheng-shu-001-zheng-shu-chu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个整数 <code>a</code> 和 <code>b</code> ，求它们的除法的商 <code>a/b</code> ，要求不得使用乘号 <code>&#39;*&#39;</code>、除号 <code>&#39;/&#39;</code> 以及求余符号 <code>&#39;%&#39;</code> 。</p><p><strong>注意：</strong></p><p>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) &#x3D; 8 以及 truncate(-2.7335) &#x3D; -2<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231−1]。本题中，如果除法结果溢出，则返回 231 − 1</p><p><strong>实例</strong></p><p>输入：a &#x3D; 15, b &#x3D; 2<br>输出：7<br>解释：15&#x2F;2 &#x3D; truncate(7.5) &#x3D; 7</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>判断溢出情况 <code>if (a == 0x80000000 &amp;&amp; b == -1) return 0x7fffffff;</code></li><li>判断结果的正负情况  <code>return divide==1?-result:result;</code></li><li>计算商，该问题中计算商采用累加的形式，类似于<code>✖2</code>。<code>value &gt; 0xc0000000 &amp;&amp; a &lt;= (value + value)</code>，其中<code>value &gt; 0xc0000000</code>是说明不能负数溢出。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0x80000000</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> divide <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            a <span class="token operator">=</span> <span class="token operator">-</span>a <span class="token punctuation">;</span>            divide<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>            divide<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> <span class="token function">divideCore</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> divide<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token operator">-</span>result<span class="token operator">:</span>result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divideCore</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">0xc0000000</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>value <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count <span class="token operator">+=</span> count<span class="token punctuation">;</span>                value <span class="token operator">+=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">+=</span> count<span class="token punctuation">;</span>            a <span class="token operator">-=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题matery中代码大括号显示不正确</title>
      <link href="/2022/03/17/hexo-zhu-ti-matery-zhong-dai-ma-da-gua-hao-xian-shi-bu-zheng-que/"/>
      <url>/2022/03/17/hexo-zhu-ti-matery-zhong-dai-ma-da-gua-hao-xian-shi-bu-zheng-que/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo主题matery中代码大括号显示不正确"><a href="#hexo主题matery中代码大括号显示不正确" class="headerlink" title="hexo主题matery中代码大括号显示不正确"></a>hexo主题matery中代码大括号显示不正确</h3><p><code>node_modules/hexo-prism-plugin/src/index.js</code>文件中map里未支持大括号，补上以下内容后发现有效，即在map中加上对应字符即可:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//添加的代码</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span>        <span class="token comment" spellcheck="true">//添加的代码</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>版权声明：本文为CSDN博主「Rewind-922」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_49230318/article/details/111619538">https://blog.csdn.net/weixin_49230318/article/details/111619538</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windos端口被占用解决方法</title>
      <link href="/2022/03/17/windos-duan-kou-bei-zhan-yong-jie-jue-fang-fa/"/>
      <url>/2022/03/17/windos-duan-kou-bei-zhan-yong-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>当启动idea中 运行<code>SpringBoot</code>项目出现</p><p><code>Identify and stop the process that&#39;s listening on port 8888 or configure this application to listen on another port.</code>错误</p><p>发现是端口被占用</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方式一-修改默认端口号"><a href="#方式一-修改默认端口号" class="headerlink" title="方式一-修改默认端口号"></a>方式一-修改默认端口号</h3><p><strong>在application.properties文件中添加server.port&#x3D;8081</strong></p><p><code>server.port=8081</code></p><h3 id="方式二-CMD查杀端口"><a href="#方式二-CMD查杀端口" class="headerlink" title="方式二-CMD查杀端口"></a>方式二-CMD查杀端口</h3><h4 id="1-netstat-ano"><a href="#1-netstat-ano" class="headerlink" title="1. netstat -ano"></a>1. netstat -ano</h4><ol><li>按win键，输入cmd，用管理员身份运行</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1647519134092-da513043-627c-4251-8324-1ee076931afa.png" alt="img"></p><ol start="2"><li>找到占用的端口8888 ，PID为3632</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1647519059519-ede4585c-8888-4e6a-9e8a-d00b421bbd4e.png" alt="img"></p><ol start="3"><li>输入<code>taskkill /pid 3632 -f</code> 杀掉端口</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1647519266735-8773d4b8-1f21-424e-8774-d291273b80b8.png" alt="img"></p><h2 id="第二种：netstat-aon-findstr-8888"><a href="#第二种：netstat-aon-findstr-8888" class="headerlink" title="第二种：netstat -aon|findstr 8888"></a>第二种：netstat -aon|findstr 8888</h2><ol><li>还是先打开cmd窗口，用管理员运行</li><li>输入<code>netstat -aon|findstr 8888</code>并回车</li></ol><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h2><p><a href="https://blog.csdn.net/weixin_44519467/article/details/104072131">https://blog.csdn.net/weixin_44519467/article/details/104072131</a></p><p><a href="https://blog.csdn.net/weixin_44519467/article/details/104072103">https://blog.csdn.net/weixin_44519467/article/details/104072103</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo报ErrorSpanwnFailed</title>
      <link href="/2022/03/16/hexo-bao-errorspanwnfailed/"/>
      <url>/2022/03/16/hexo-bao-errorspanwnfailed/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo部署出现错误-Error-Spawn-failed-解决方式"><a href="#Hexo部署出现错误-Error-Spawn-failed-解决方式" class="headerlink" title="Hexo部署出现错误 Error: Spawn failed 解决方式"></a>Hexo部署出现错误 Error: Spawn failed 解决方式</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##进入站点根目录</span><span class="token comment" spellcheck="true">##删除git提交内容文件夹</span><span class="token function">rm</span> -rf .deploy_git/<span class="token comment" spellcheck="true">##执行</span><span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span><span class="token comment" spellcheck="true">##最后</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>修改 _config.yml 文件，将配置地址http方式切换成ssh方式</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##进入站点根目录</span><span class="token comment" spellcheck="true">##删除git提交内容文件夹</span>vim _config.yml<span class="token comment" spellcheck="true">##修改</span>deploy:type: <span class="token function">git</span>repository: https://github.com/Uninfo/blog.github.io.git -<span class="token operator">></span> git@github.com:Uninfo/blog.github.io.gitbranch: master<span class="token comment" spellcheck="true">##最后</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><blockquote><p>强制上传，不建议</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##进入站点根目录</span><span class="token comment" spellcheck="true">##进入depoly文件夹</span><span class="token function">cd</span> .deploy_git/<span class="token comment" spellcheck="true">##强制推送</span><span class="token function">git</span> push -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>本文作者：</strong>毋忘草</li><li><strong>本文链接：</strong><a href="https://blog.myosotis.xin/2021/08/25/hexo-8/">https://blog.myosotis.xin/2021/08/25/hexo-8/</a></li><li><strong>版权声明：</strong>本博客所有文章除特别声明外，均默认采用 许可协议。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java书籍阅读顺序</title>
      <link href="/2022/03/16/java-shu-ji-yue-du-shun-xu/"/>
      <url>/2022/03/16/java-shu-ji-yue-du-shun-xu/</url>
      
        <content type="html"><![CDATA[<p>今天和大家说说学 Java 的读书路线。路线中的书籍我自己都看过，希望整理的这份读书路线，能帮大家少走弯路，对大家学 Java 有个参考。</p><h2 id="初学乍练"><a href="#初学乍练" class="headerlink" title="初学乍练"></a>初学乍练</h2><p>入门 Java，推荐《Java核心技术》第 11 版，这其实是一套书，分为两本:</p><ul><li>卷1 基础知识（豆瓣 9.2 分）</li><li>卷2 高级特性（豆瓣 8.4 分）</li></ul><p><img src="https://pic2.zhimg.com/80/v2-1147acb50369aeb851b740501c8bf46d_720w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-4e6d44fb13a8840c4d0ffc64c4c58c8c_720w.jpg" alt="img"></p><p>我估计 70% 的 Java 程序员入门看的是这本书，写的经典、全面，对 Java 各种特性，都会有对应的代码示例。</p><p>不过，这里的内容，有不少是没必要学的。我在以前的文章提起过，大家可以参考。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&mid=2247485760&idx=3&sn=1cb21c2b568ba2812d5ae5cfb5a58af8&chksm=fcd8c501cbaf4c17ac5978b0e3dadaa8b9a240a0f3c759380f1bfe1de2b478dff1add4dde9c8&token=909381664&lang=zh_CN#rd">Java学习之路上的“路障”太坑了</a></p><p>同时，光看这本书作为入门有个问题，就是只能知其然，却不知所以然。而不知所以然，必然会导致咱们的基础会不够牢靠。</p><p>所以再推荐一本书配合《Java核心技术》一起看，书的名字叫《Java编程的逻辑》（豆瓣 9.1 分），作者马俊昌。</p><p><img src="https://pic1.zhimg.com/80/v2-0cb5e05b4705ad6229a7abdc5c293188_720w.jpg" alt="img"></p><p>这本书讲解 Java 基础知识的基础上还会告诉你底层的原理，比如，Java 的枚举本质是什么，还会告诉你 Java 为什么这样设计 API。</p><p>总之，《Java核心技术》和《Java编程的逻辑》联合学习，算是珠联璧合，对入门 Java 是再合适不过的了。</p><p>这里多说几句，入门打基础十分重要，对于编程这种实践类的学习，想打好基础，光靠读书，是远远不够的。一定要经过大量的代码练习。所以，在这个时期一定要多作代码练习。这里，我给出一些可以自己尝试的练习：排序算法的小练习</p><ul><li>字符串查找的小练习</li><li>对系统文件做下增删查改</li><li>递归的小练习</li><li>使用 Java 集合的小练习</li><li>写个小游戏、小东西能综合训练下学到的所有技能</li></ul><h2 id="得窥门径"><a href="#得窥门径" class="headerlink" title="得窥门径"></a>得窥门径</h2><p>做程序员，大部分的时候，咱们都需要通过写各种各样的 SQL 操作数据库。咱们是 CRUD Boy 嘛。</p><p>所以，SQL 咱们要学，学 SQL 我推荐《SQL必知必会（第5版）》（豆瓣 9.5 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-c134651e4e29c1a32a45d65a22c49afc_720w.jpg" alt="img"></p><p>这本书的组织结构非常好，哪怕是你对 SQL 一窍不通，也能通过这本书的引导，由浅入深的把 SQL 语言学个七七八八。</p><p>更重要的是，这本书叫必知必会，也就是说，它的内容都是精挑细选，必须学的内容。里面半分冗余的知识点都没有，内容全是干货。一定要好好读这本书。</p><h2 id="略有所成"><a href="#略有所成" class="headerlink" title="略有所成"></a>略有所成</h2><p>学会了 Java 基础，知道了怎么用 SQL 之后，如果往下走，想继续提升自己该学什么？</p><p>我的答案是去深入掌握多线程编程。因为只有懂了多线程编程，咱们才能处理各种稍微困难的需求。比如，快速处理大量用户对系统的访问；又比如，想同时访问多个第三方接口。</p><p>多线程编程又叫并发编程，其实是很复杂的事情，看一本书就想掌握它是不太现实的。我这里会推荐三本书，配合起来，一步步从多线程的原理到多线程的实战全部贯穿起来。</p><p>对于多线程的理解，我推荐的第一本书是《Java并发编程实战》（豆瓣 9.0 分）。</p><p><img src="https://pic3.zhimg.com/80/v2-1b7e9d8d69b71c85e5f0536ff2b6bfe6_720w.jpg" alt="img"></p><p>这本书是一本非常经典的关于多线程编程的书。里面对Java的多线程方方面面的细节都讲的非常到位。只是由于多线程确实太复杂，涉及到的知识也太广了，导致这本书出现了两个问题：</p><ol><li>理论过多：《Java并发编程实战 》里会花费很大篇幅，去阐述一些多线程涉及到的理念和思想，但是代码例子却给的极少，这就导致咱们看的很吃力、很累。</li><li>某些点讲的不够透：多线程涉及到的知识非常广，《Java并发编程实战 》是尽量全涉及了。这就造成很多知识点讲的很浅，没有讲透。这就会让人很困惑，导致有些知识点连不起来，影响对整本书的理解。</li></ol><p>所以，我这里推荐第二本书《Java多线程编程实战指南（核心篇）》（豆瓣 9.0 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-b4b8e70f51e63a70a7daade95ecad770_720w.jpg" alt="img"></p><p>这本书代码例子多，《Java并发编程实战 》有些讲不透的知识点，这本书会有所弥补。所以，当看《Java并发编程实战 》的时候，不管是需要练习代码，还是想去搞清楚知识点，《Java多线程编程实战指南 》这本书都极为合适。</p><p>多线程我再强调一下，这是 Java 很高级的特性，也是很难的部分，很多哪怕是工作了 3、4 年的程序员，对此也掌握的不到位。</p><p>上面说的两本书，有原理，有代码示例，如果是换成别的知识，那可能足够了。可是对于多线程这么复杂的东西，我们还需要把学过的所有零碎知识点去综合贯穿起来，形成关于多线程的知识体系才算是真正掌握到位。</p><p>所以，这就得推荐第三本书《图解Java多线程设计模式》（豆瓣 8.6 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-01228a52a6a23d2b1f831046a17e8a68_720w.jpg" alt="img"></p><p>跟着这本书的讲解，把咱们所有的知识点通过练习书中介绍的所有模式，去串起来，才最终算是多线程的学习告了一个段落。</p><h2 id="登堂入室"><a href="#登堂入室" class="headerlink" title="登堂入室"></a>登堂入室</h2><p>学会了多线程编程，咱们此时要知道一件事，大部分时候，多线程编程，其实就是网络编程的最重要的一种手段。而网络编程，虽然有了 Netty 框架等很优质的网络框架了，但是理解背后的原理，对咱们定位项目的 bug，优化代码的性能，帮助非常大。</p><p>《Java TCP&#x2F;IP Socket编程》（豆瓣 8.0 分）</p><p><img src="https://pic1.zhimg.com/80/v2-1b9f0706b9dd1aa8f76d346e0bb7fcbc_720w.jpg" alt="img"></p><p>这本书，我们既可以去学到必要的网络基础，也能学会怎么用 Java 去网络编程，非常推荐。</p><p>对于网络编程，大家都知道，这是易学难精的技能。学懂原理，了解网络编程，看看我上面推荐的书就够了。但是，要精通网络编程，写好网络相关的程序，那是相当不容易的。</p><p>所以，在 Java 圈，一旦遇到网络编程相关的事情，大家都会采用 Netty 框架去做。Netty 框架让我们能不需要成为网络编程大师，就能写出非常优秀的网络应用。</p><p>了解 Netty 框架对咱们也是非常重要的一件事，学习 Netty 框架，推荐《Netty实战》（豆瓣 7.5 分）。</p><p><img src="https://pic3.zhimg.com/80/v2-bf3b15ea95976f9729e1eaf650dd4886_720w.jpg" alt="img"></p><p>这本书，把 Netty 的方方面面讲的很全，Netty 的设计思想也覆盖了大部分，对于熟练使用 Netty 完全够用了。</p><h2 id="融汇贯通"><a href="#融汇贯通" class="headerlink" title="融汇贯通"></a>融汇贯通</h2><p>作为 Java 后端工程师，几乎都要用到 Spring 框架的。哦不对，Spring 已经不能叫框架了，得叫体系、生态了。学好 Spring，对咱们找工作，做项目，甚至设计架构，都是极其重要的。</p><p>但是，学好 Spring 也没那么容易。Spring 发展到现在，它已经成为了一套完整的体系了，而且 Spring 迭代非常快，几乎每年都会出现大的变化。所以，市面上的书籍，单独靠那么一两本书，是不太可能学好的，建议把一些经典的 Spring 的书联合起来读，才有希望深入掌握Spring。</p><p>对于 Spring 这套体系，它现在是又多又繁杂，就算要入门，都不知道从何处下手。这里，我想谈谈我的经验。</p><p>虽然 Spring 变化确实很快，但是，它有几个地方，是这么多年几乎没发生过什么变化的。</p><p>没有什么变化的第一部分，就是 Spring 的设计思路。Spring 的设计思路，<strong>永远都是作为 Bean 的容器，去管理好 Bean</strong> ，这是它永恒不变的地方。</p><p>没有什么变化的第二部分，就是 Spring 的内核。Spring 的 ApplicationContext 等核心 API 是没有什么大的变化的。</p><p>所以，咱们就应该先从 Spring 这些不变的核心先入手。<strong>掌握住 Spring 的思想，Spring 的内核，哪怕 Spring 本身再变化，对咱们来说，也只是一种外在的 API 变化而已。</strong></p><p>要达到这个目的，我会推荐大家看一本很老的书《Spring揭秘》（豆瓣 9.1分）。</p><p><img src="https://pic3.zhimg.com/80/v2-5786bd97feb05dc0a41c67920de0713e_720w.jpg" alt="img"></p><p>虽然这本书主要是以 Spring3 的讲解为基础，但是，这本书对于 Spring 的编程思想讲的极为透彻，是有关 Spring 的书中，难得一见的好书。入门 Spring，这是我推荐的第一本书。</p><p>理解了 Spring 的编程思想不够，我们需要利用这些思想，去实践演练，加强我们对 Spring 的理解。</p><p>这时候，就得有本书，能真正的带我们实战下Spring的各个组件——《精通Spring 4.x》（豆瓣 8.5 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-b6cd4c0e9d190e8f484e6dcad4a054c4_720w.jpg" alt="img"></p><p>我知道现在 Spring 5 在逐渐进入主流，但是，Spring 5 也只是在 Spring 4 的基础上增加了一些新特性。而 Spring 5 的书，我至今没看到有《精通Spring 4.x》这本讲的这么全的，所以，写代码做练习，还是推荐用《精通Spring 4.x》。</p><p>理解了 Spring 的理念，用很多代码练习练习实践之后，我们就只需要知道 Spring 5 的一些特性就能跟上 Spring 发展的步伐了。</p><p>可以看下《Spring 5 开发大全》（豆瓣 8.3 分），这本书对 Spring 5 的新特性介绍很全。我们只需要翻翻，熟悉新特性、新 API 即可。</p><p>另外，Spring 5 有个变化最大的地方：它用了很多响应式编程的东西。这方面，大家相对比较陌生，有闲有钱的话，可以看看《Spring响应式编程》。</p><p>关于 SpringBoot，由于它的易用性，它已经迈入主流。不过 SpringBoot 也只是以 Spring 为内核的一套应用框架而已。找本书，学习它是如何通过添加一些模块和功能，去降低大家使用 Spring 的门槛的，也就够了。</p><p>同样，有闲有钱的话，可以读下《Spring Boot 2实战之旅》。</p><h2 id="返璞归真"><a href="#返璞归真" class="headerlink" title="返璞归真"></a>返璞归真</h2><p>前面大家跟着我推荐的书学习完了，基本就可以是一位非常合格的程序员了。但是，注意，你只是合格，但是还不算优秀。</p><p>如果我们想更加优秀，让自己职业道路能走的更远，还需要一些非开发的知识学习。只有通过叠加这些 Buff，我们才能在众多的技术同事中，脱颖而出，锥出于囊。</p><p>在实际开发里，代码可读是我们评价同事好不好合作的一个重要标准。一位同事，写的代码乱七八糟，你不管是接手维护还是想只是用一些对方的代码，都非常别扭难受。</p><p>所以，咱们的代码一定要写的干净整洁可读，给别人非常好的印象。这样，对咱们的团队合作和职场发展，才会有更大的帮助。</p><p>把代码写的干净可读，我推荐看《代码整洁之道》（豆瓣 8.7 分）。</p><p><img src="https://pic4.zhimg.com/80/v2-9237fa21cab46faea0f799d1586cc74b_720w.jpg" alt="img"></p><p>这本书，讲解了什么才是好的代码，跟着这本书学，你写的代码会更让人赞赏，也更让人愿意和你合作。</p><p>除了代码可读，咱们还得让咱们写的代码好维护，易扩展。因为需求是千变万化的，如果你写的代码可维护性，可扩展性不够，那后续你会陷入无休止的改代码海洋里，你所有的精力都会被这些不停变换的需求吃干抹净，直接让你寸步难行。</p><p>而写易扩展，易维护的代码，就必须知道设计模式。有了设计模式，你闭眼都能写出不错的代码来。学习设计模式，推荐《Java设计模式》（豆瓣 9.1 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-5e13947d57e1eebec69ec2bad3686918_720w.jpg" alt="img"></p><p>这本书，对设计模式的来历发展，概念思想，讲解的淋漓尽致，推荐阅读。</p><p>Java 这套读书的学习路线，是我一本一本全部读过，才推荐给大家的，希望大家最终能坚持读完，学透。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后再总结一下这个书单：《Java核心技术》卷1、2</p><ul><li>《Java编程的逻辑》</li><li>《SQL必知必会》</li><li>《Java并发编程实战》</li><li>《Java多线程编程实战指南（核心篇）》</li><li>《图解Java多线程设计模式》</li><li>《Java TCP&#x2F;IP Socket编程》</li><li>《Netty实战》</li><li>《Spring揭秘》</li><li>《精通Spring 4.x》</li><li>《Spring 5 开发大全》</li><li>《Spring响应式编程》</li><li>《Spring Boot 2实战之旅》</li><li>《代码整洁之道》</li><li>《Java设计模式》</li></ul><p>以上书单都是我推荐的，其他没列的书籍，比如《Java编程思想》、《重构》等等，也都是好书，大家自己酌情补充。</p><blockquote><p>转载于<a href="https://zhuanlan.zhihu.com/p/444636383">https://zhuanlan.zhihu.com/p/444636383</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习视频资料</title>
      <link href="/2022/03/16/java-xue-xi-shi-pin-zi-liao/"/>
      <url>/2022/03/16/java-xue-xi-shi-pin-zi-liao/</url>
      
        <content type="html"><![CDATA[<p>工作十几年的Java程序员来回答一下。</p><p>有一说一，培训机构的视频有利有弊：</p><ul><li>利：适合零基础小白入门。</li><li>利：质量肯定是错不了的，相当于买东西之前先让你试吃、试用，肯定要用最好的对吧，否则会砸了自己的招牌。</li><li>弊：培训机构最终还是为了赚钱，所以视频会有所保留，同时会有套路。</li></ul><p><strong>所以，看视频的话，我更建议你按照推荐的视频来学习</strong>（包括了部分尚硅谷、狂神说的视频，也有大学老师的视频）<strong>。</strong></p><p>以下视频是我花了很长时间从b站整理出来的，都是播放量和点赞多的，评价好的视频。</p><p>而且，<strong>我写的这个顺序，就是一份学习路线</strong>，直接照着学就行了。有的一个内容里有多个视频课程，选择适合你的一个就行了。</p><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><p><strong>1、动力节点Java零基础教程视频</strong></p><p>1168万播放，16万赞。千万播放量！</p><p>适合零基础，Java视频中讲解了Java开发环境搭建、基础语法、面向对象。</p><ul><li>P1—P159：JDK8版零基础</li><li>P160—P476：JDK13版零基础【2020版】</li><li>P477—P844：JDK13版进阶【2020版】</li></ul><p><a href="https//https://www.bilibili.com/video/av11361088"><strong>动力节点Java零基础教程视频</strong></a></p><p><strong>2、宋红康的Java零基础入门教程</strong></p><p>784万播放，6.6万赞</p><p>从0基础讲起，循序渐进。涉及JavaSE方方面面，融入数据结构、设计模式、JVM等。2万多行代码+3套课堂实战项目+2套课后实战项目+近百道企业面试真题。</p><p><a href="https://www.bilibili.com/video/av48144058">全网最全Java零基础入门教程（含百道Java真题，2万多行Java代码实战</a></p><p><strong>3、高淇老师的Java300集零基础适合初学者视频教程</strong></p><p>37万播放，1.7万赞</p><p>基于JDK13、IDEA平台讲解的，视频中穿插多个实战项目。高淇老师讲解的非常细致，每一个知识点都讲解的通俗易懂，由浅入深。</p><p>[【尚学堂】Java300集零基础适合初学者视频教程_Java300集零基础教程_Java初学入门视频基础巩固教程_Java语言入门到精通]](<a href="https://www.bilibili.com/video/BV1oy4y1H7R6">https://www.bilibili.com/video/BV1oy4y1H7R6</a>)</p><p><strong>4、求知讲堂Java视频 128天完整版</strong></p><p>115万播放，2.2万赞</p><p>讲解同样的内容只需别套课程一半时间，而且老师讲的清晰，比较有条理，而且没啥废话。</p><p><a href="https://www.bilibili.com/video/av76235341">求知讲堂Java视频 128天完整版 学完可就业_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av76235341https://www.bilibili.com/video/av76235341https://www.bilibili.com/video/av76235341<img src="https://pic3.zhimg.com/v2-e38836b6f76661a06875c379c58ffea6_180x120.jpg" alt="img"></a></p><p><strong>5、刘意(风清扬)Java入门视频</strong></p><p>40万播放，2.6k赞</p><p>写的是2019版，但是感觉像之前看的2015版。</p><p><a href="https://www.bilibili.com/video/av33742840">Java_黑马刘意(风清扬)2019最新版_Java入门视频_Java入门_Java编程_Java入门教程_黑马教程_黑马程序员_idea版_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av33742840https://www.bilibili.com/video/av33742840https://www.bilibili.com/video/av33742840<img src="https://pic4.zhimg.com/v2-97c1d173167d3b8551e34e8881cb642f_180x120.jpg" alt="img"></a></p><p><strong>6、韩顺平的零基础30天学会Java</strong></p><p>98.8万播放,1.8万赞</p><p>韩老师毕业于清华大学，录制的视频课程质量都还可以。</p><p><a href="https://www.bilibili.com/video/BV1fh411y7R8">【零基础 快速学Java】韩顺平 零基础30天学会Java_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1fh411y7R8https://www.bilibili.com/video/BV1fh411y7R8https://www.bilibili.com/video/BV1fh411y7R8<img src="https://pic3.zhimg.com/v2-1b6ddcb1e457f46187e5e1e5fbf07222_180x120.jpg" alt="img"></a></p><h3 id="Java设计模式"><a href="#Java设计模式" class="headerlink" title="Java设计模式"></a>Java设计模式</h3><p>韩顺平的Java设计模式（图解+框架源码剖析）</p><p>92万播放，1万赞</p><p><a href="https://www.bilibili.com/video/av57936239">尚硅谷Java设计模式（图解+框架源码剖析）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av57936239https://www.bilibili.com/video/av57936239https://www.bilibili.com/video/av57936239<img src="https://pic3.zhimg.com/v2-01daa8fae91683634c1125a2df44b2fe_180x120.jpg" alt="img"></a></p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p><strong>1、2020最新Spring框架教程IDEA版</strong></p><p>57万播放，1.1万赞</p><p><a href="https://www.bilibili.com/video/BV1nz4y1d7uy">2020最新Spring框架教程【IDEA版】-Spring框架从入门到精通_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1nz4y1d7uyhttps://www.bilibili.com/video/BV1nz4y1d7uyhttps://www.bilibili.com/video/BV1nz4y1d7uy<img src="https://pic4.zhimg.com/v2-1babdad52915db3a083e8cab8149ed3f_180x120.jpg" alt="img"></a></p><p><strong>2、狂神说Spring5最新完整教程IDEA版</strong></p><p>129万播放，1.5万赞</p><p><a href="https://www.bilibili.com/video/BV1WE411d7Dv">【狂神说Java】Spring5最新完整教程IDEA版通俗易懂_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1WE411d7Dvhttps://www.bilibili.com/video/BV1WE411d7Dvhttps://www.bilibili.com/video/BV1WE411d7Dv<img src="https://pic1.zhimg.com/v2-0e9c15a2d14b9f73959881efea2da2a4_180x120.jpg" alt="img"></a></p><p><strong>3、尚硅谷Spring5框架最新版教程（idea版）</strong></p><p>90万播放，近万赞</p><p><a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷-Spring5框架最新版教程（idea版）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Vf4y127N5https://www.bilibili.com/video/BV1Vf4y127N5https://www.bilibili.com/video/BV1Vf4y127N5<img src="https://pic2.zhimg.com/v2-ed214e38c38938087a65ca004903f421_180x120.jpg" alt="img"></a></p><p><strong>4、spring源码全集</strong></p><p>13万播放，1.2k赞</p><p><a href="https://www.bilibili.com/video/av71093907">【spring源码全集】B站唯一阿里P8级别的架构师教程_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av71093907https://www.bilibili.com/video/av71093907https://www.bilibili.com/video/av71093907<img src="https://pic3.zhimg.com/v2-82c0ef000fa82c38a935222df299326e_180x120.jpg" alt="img"></a></p><p><strong>5、spring注解驱动开发-源码版-雷丰阳</strong></p><p>23万播放，2.5k赞</p><p><a href="https://www.bilibili.com/video/BV1gW411W7wy">尚硅谷Spring注解驱动教程(雷丰阳源码级讲解)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1gW411W7wyhttps://www.bilibili.com/video/BV1gW411W7wyhttps://www.bilibili.com/video/BV1gW411W7wy<img src="https://pic1.zhimg.com/v2-6d1e4cf03a8e2a486104db5d42d220e0_180x120.jpg" alt="img"></a></p><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p><strong>1、SpringMVC最新教程IDEA版</strong></p><p>89万播放，一万赞</p><p><a href="https://www.bilibili.com/video/BV1aE41167Tu">【狂神说Java】SpringMVC最新教程IDEA版通俗易懂_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1aE41167Tuhttps://www.bilibili.com/video/BV1aE41167Tuhttps://www.bilibili.com/video/BV1aE41167Tu<img src="https://pic4.zhimg.com/v2-a94b0d3b904cca178aa5b7efb2be27fb_180x120.jpg" alt="img"></a></p><p><strong>2、SpringMVC 2021最新教程</strong></p><p>18万播放，3千赞</p><p><a href="https://www.bilibili.com/video/BV1Ry4y1574R">【尚硅谷】SpringMVC 2021最新教程丨一套快速上手spring mvc_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Ry4y1574Rhttps://www.bilibili.com/video/BV1Ry4y1574Rhttps://www.bilibili.com/video/BV1Ry4y1574R<img src="https://pic1.zhimg.com/v2-d693fbb29f16757c1aeed1bb57b44bd0_180x120.jpg" alt="img"></a></p><h3 id="MySQL、Redis"><a href="#MySQL、Redis" class="headerlink" title="MySQL、Redis"></a>MySQL、Redis</h3><p><strong>1、MySQL_基础+高级篇</strong></p><p>446万播放，4.4万赞</p><p><a href="https://www.bilibili.com/video/BV12b411K7Zu">MySQL_基础+高级篇- 数据库 -sql -mysql教程_mysql视频_mysql入门_尚硅谷_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV12b411K7Zuhttps://www.bilibili.com/video/BV12b411K7Zuhttps://www.bilibili.com/video/BV12b411K7Zu<img src="https://pic2.zhimg.com/v2-bb9aba60fc4e4aae76508e578116c2e5_180x120.jpg" alt="img"></a></p><p><strong>2、老杜带你学_mysql入门基础</strong></p><p>363万播放，2.5万赞</p><p><a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">老杜带你学_mysql入门基础（mysql基础视频+数据库实战)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Vy4y1z7EXhttps://www.bilibili.com/video/BV1Vy4y1z7EXhttps://www.bilibili.com/video/BV1Vy4y1z7EX<img src="https://pic3.zhimg.com/v2-54dac3c35ba2117e9254f0a9c50ad6a2_180x120.jpg" alt="img"></a></p><p><strong>3、2021最新Redis6入门到精通</strong></p><p><a href="https://www.bilibili.com/video/BV1Rv41177Af">【尚硅谷】2021 最新 Redis 6 入门到精通 超详细 教程_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Rv41177Afhttps://www.bilibili.com/video/BV1Rv41177Afhttps://www.bilibili.com/video/BV1Rv41177Af<img src="https://pic3.zhimg.com/v2-41bf26ff57e8d46c55bb49524f4431f2_180x120.jpg" alt="img"></a></p><h3 id="Mybatis、MyBatisPlus"><a href="#Mybatis、MyBatisPlus" class="headerlink" title="Mybatis、MyBatisPlus"></a>Mybatis、MyBatisPlus</h3><p><strong>1、狂神说Mybatis最新完整教程IDEA版</strong></p><p>115万播放，1.4万赞</p><p><a href="https://www.bilibili.com/video/BV1NE411Q7Nx">【狂神说Java】Mybatis最新完整教程IDEA版通俗易懂_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1NE411Q7Nxhttps://www.bilibili.com/video/BV1NE411Q7Nxhttps://www.bilibili.com/video/BV1NE411Q7Nx<img src="https://pic2.zhimg.com/v2-07cb8f3dc15821410a959bb22fca85dd_180x120.jpg" alt="img"></a></p><p><strong>2、尚硅谷MyBatis实战教程全套完整版</strong></p><p>26万播放，2千赞</p><p><a href="https://www.bilibili.com/video/BV1mW411M737">尚硅谷MyBatis实战教程全套完整版(初学者零基础从入门到精通,好评如潮,资料齐全)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1mW411M737https://www.bilibili.com/video/BV1mW411M737https://www.bilibili.com/video/BV1mW411M737<img src="https://pic2.zhimg.com/v2-1c59c31d65f9803516ec487e2b05d4cd_180x120.jpg" alt="img"></a></p><p><strong>3、MyBatis-Plus入门-慕课网</strong></p><p><a href="https://www.imooc.com/learn/1130">MyBatis-Plus入门教程-慕课网https://www.imooc.com/learn/1130https://www.imooc.com/learn/1130https://www.imooc.com/learn/1130</a></p><p><strong>4、MyBatis-Plus进阶-慕课网</strong></p><p><a href="https://www.imooc.com/learn/1171">MyBatis-Plus进阶-慕课网https://www.imooc.com/learn/1171https://www.imooc.com/learn/1171https://www.imooc.com/learn/1171</a></p><h3 id="Java框架整合"><a href="#Java框架整合" class="headerlink" title="Java框架整合"></a>Java框架整合</h3><p><strong>1、雷丰阳大神的Spring、Spring MVC、MyBatis课程</strong></p><p>69万播放，4千赞</p><p><a href="https://www.bilibili.com/video/av56193747">雷神的Spring、Spring MVC、MyBatis课程_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av56193747https://www.bilibili.com/video/av56193747https://www.bilibili.com/video/av56193747<img src="https://pic3.zhimg.com/v2-1119f76ae7641dab764350e458cdb6ce_180x120.jpg" alt="img"></a></p><p><strong>2、尚硅谷SSM实战演练丨ssm整合快速开发CRUD</strong></p><p>28万播放，2千赞</p><p>基于Maven+SpringMVC+Spring+MyBatis+Bootstrap的组合，快速开发一个完整的CRUD功能。</p><p><a href="https://www.bilibili.com/video/av21045215">尚硅谷SSM实战演练丨ssm整合快速开发CRUD_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av21045215https://www.bilibili.com/video/av21045215https://www.bilibili.com/video/av21045215<img src="https://pic4.zhimg.com/v2-ce6a9eaebf8dae1e0f153c91f34be497_180x120.jpg" alt="img"></a></p><p><strong>3、狂神说SSM框架整合教学IDEA版最新</strong></p><p>22万播放，3千赞</p><p><a href="https://www.bilibili.com/video/av73118229">【狂神说Java】SSM框架最新整合教学IDEA版_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av73118229https://www.bilibili.com/video/av73118229https://www.bilibili.com/video/av73118229<img src="https://pic4.zhimg.com/v2-c4b62c1cea064cfef5c57f532791f743_180x120.jpg" alt="img"></a></p><p><strong>4、传智播客SSM框架视频整合</strong></p><p>5.7万播放，200多赞</p><p><a href="https://www.bilibili.com/video/av29422149">【javaWeb(SSM)】+SSM框架视频整合+(传智播客)（一）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av29422149https://www.bilibili.com/video/av29422149https://www.bilibili.com/video/av29422149<img src="https://pic4.zhimg.com/v2-81388d23e2227ac698fc1e79687c865f_180x120.jpg" alt="img"></a></p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p><strong>1、雷丰阳2021版SpringBoot2零基础入门</strong></p><p>102万播放，1.4万赞</p><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT">雷丰阳2021版SpringBoot2零基础入门springboot全套完整版（spring boot2）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV19K4y1L7MThttps://www.bilibili.com/video/BV19K4y1L7MThttps://www.bilibili.com/video/BV19K4y1L7MT<img src="https://pic1.zhimg.com/v2-2f1aa26c1b10c7d20c39ac46c8c91e80_180x120.jpg" alt="img"></a></p><p><strong>2、SpringBoot教程-雷神源码级别讲解</strong></p><p>118万播放，8.6k赞</p><p><a href="https://www.bilibili.com/video/BV1gW411W76m">尚硅谷SpringBoot顶尖教程(springboot之idea版spring boot)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1gW411W76mhttps://www.bilibili.com/video/BV1gW411W76mhttps://www.bilibili.com/video/BV1gW411W76m<img src="https://pic2.zhimg.com/v2-695d606ab922e2307e28832f1d46a825_180x120.jpg" alt="img"></a></p><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p><strong>1、SpringCloud框架开发教程-SpringCloudAlibaba微服务分布式架构</strong></p><p>204万播放，1.8万赞</p><p><a href="https://www.bilibili.com/video/BV18E411x7eT">尚硅谷SpringCloud框架开发教程(SpringCloudAlibaba微服务分布式架构丨Spring Cloud)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV18E411x7eThttps://www.bilibili.com/video/BV18E411x7eThttps://www.bilibili.com/video/BV18E411x7eT<img src="https://pic4.zhimg.com/v2-30b9fa1d652f5b33bd0e5318adb78a0b_180x120.jpg" alt="img"></a></p><p><strong>2、SpringCloud+Vue项目实战——社交项目</strong></p><p>12万播放，750赞</p><p><a href="https://www.bilibili.com/video/av63499215">SpringCloud+Vue项目实战——社交项目_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av63499215https://www.bilibili.com/video/av63499215https://www.bilibili.com/video/av63499215<img src="https://pic2.zhimg.com/v2-cd218b3141f87998bf66aaec8635da45_180x120.jpg" alt="img"></a></p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>尚硅谷宋红康JVM全套教程</p><p>171万播放，2万赞</p><p>课程的内容分为 3 部分：内存与垃圾回收篇、字节码与类的加载篇、性能监控与调优篇。基本把 JVM 中重要的知识点都涵盖到了。</p><p><a href="https://www.bilibili.com/video/av83622425">尚硅谷JVM全套教程，百万播放，全网巅峰（宋红康详解java虚拟机）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av83622425https://www.bilibili.com/video/av83622425https://www.bilibili.com/video/av83622425<img src="https://pic1.zhimg.com/v2-e72468ab70f1d880312da1a647186864_180x120.jpg" alt="img"></a></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><strong>1、2021韩顺平：一周学会Linux</strong></p><p>62万播放，1.7万赞</p><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd">【小白入门 通俗易懂】2021韩顺平 一周学会Linux_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Sv411r7vdhttps://www.bilibili.com/video/BV1Sv411r7vdhttps://www.bilibili.com/video/BV1Sv411r7vd<img src="https://pic1.zhimg.com/v2-914a9e8db7e53c60d4ea41ee739ab4b4_180x120.jpg" alt="img"></a></p><p><strong>2、史上最牛的Linux视频教程—兄弟连</strong></p><p>292万播放，3.3万赞</p><p><a href="https://www.bilibili.com/video/BV1mW411i7Qf">史上最牛的Linux视频教程—兄弟连_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1mW411i7Qfhttps://www.bilibili.com/video/BV1mW411i7Qfhttps://www.bilibili.com/video/BV1mW411i7Qf<img src="https://pic3.zhimg.com/v2-15cbbc37626a9c354ff6ee4471af9c66_180x120.jpg" alt="img"></a></p><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><h4 id="1、数据结构与算法基础（青岛大学-王卓）"><a href="#1、数据结构与算法基础（青岛大学-王卓）" class="headerlink" title="** 1、数据结构与算法基础（青岛大学-王卓）**"></a>** 1、数据结构与算法基础（青岛大学-王卓）**</h4><p>189万播放，2.6万赞，点赞率很高</p><p>老师的声音很好听，听起来如沐春风，PPT做的也很好。</p><p><a href="https://www.bilibili.com/video/BV1nJ411V7bd">数据结构与算法基础（青岛大学-王卓）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1nJ411V7bdhttps://www.bilibili.com/video/BV1nJ411V7bdhttps://www.bilibili.com/video/BV1nJ411V7bd<img src="https://pic4.zhimg.com/v2-f3a30aac4965687457c22ff7098b4903_180x120.jpg" alt="img"></a></p><h4 id="2、郝斌-数据结构入门"><a href="#2、郝斌-数据结构入门" class="headerlink" title="2、郝斌-数据结构入门"></a><strong>2、郝斌-数据结构入门</strong></h4><p>106万播放，1.3万赞</p><p>AVI转的MP4，网上源文件是swf格式的，帧率比较低，所以看着略有不流畅。</p><p><a href="https://www.bilibili.com/video/av6159200">【郝斌】-数据结构入门_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av6159200https://www.bilibili.com/video/av6159200https://www.bilibili.com/video/av6159200</a></p><h4 id="3、尚硅谷Java数据结构与java算法（Java数据结构与算法）"><a href="#3、尚硅谷Java数据结构与java算法（Java数据结构与算法）" class="headerlink" title="3、尚硅谷Java数据结构与java算法（Java数据结构与算法）"></a><strong>3、尚硅谷Java数据结构与java算法（Java数据结构与算法）</strong></h4><p>191万播放，1.9万赞</p><p>Java版本的数据结构很少，大部分是C语言。这个适合用Java语言的人看。</p><p><a href="https://www.bilibili.com/video/av54029771">尚硅谷Java数据结构与java算法（Java数据结构与算法）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av54029771https://www.bilibili.com/video/av54029771https://www.bilibili.com/video/av54029771<img src="https://pic2.zhimg.com/v2-ae729d0ee51f848fca01c5197d2708dd_180x120.jpg" alt="img"></a></p><h4 id="4、数据结构与算法基础-java版（罗召勇）"><a href="#4、数据结构与算法基础-java版（罗召勇）" class="headerlink" title="4、数据结构与算法基础-java版（罗召勇）"></a><strong>4、数据结构与算法基础-java版（罗召勇）</strong></h4><p>32万播放，3千赞</p><p>还是Java的，老师语言比较简单</p><p><a href="https://www.bilibili.com/video/av33835237">数据结构与算法基础-java版（罗召勇）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av33835237https://www.bilibili.com/video/av33835237https://www.bilibili.com/video/av33835237<img src="https://pic3.zhimg.com/v2-503f5501d2a95e4c245191b424b62e5e_180x120.jpg" alt="img"></a></p><h4 id="5、清华大学邓俊辉数据结构与算法"><a href="#5、清华大学邓俊辉数据结构与算法" class="headerlink" title="5、清华大学邓俊辉数据结构与算法"></a><strong>5、清华大学邓俊辉数据结构与算法</strong></h4><p>12万播放，1.5千赞</p><p>清华大学，yyds</p><p><a href="https://www.bilibili.com/video/BV1jt4y117KR">清华大学邓俊辉数据结构与算法【完】_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1jt4y117KRhttps://www.bilibili.com/video/BV1jt4y117KRhttps://www.bilibili.com/video/BV1jt4y117KR<img src="https://pic4.zhimg.com/v2-1934392a8d7643f2bb03c0256777a713_180x120.jpg" alt="img"></a></p><p>####<strong>6、(小甲鱼）数据结构与算法（全99讲完结版）</strong></p><p>20万播放，2.3千赞</p><p>全99课。主讲内容基本是照着《<a href="https://https//www.zhihu.com/search?q=%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2117581963%7D">大话数据结构</a>》这本书念的，但也有不少可取之处。看过书的，可以开启1.25倍速。</p><p><a href="https://www.bilibili.com/video/av29175690">(小甲鱼）数据结构与算法（全99讲完结版）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av29175690https://www.bilibili.com/video/av29175690https://www.bilibili.com/video/av29175690<img src="https://pic3.zhimg.com/v2-a7a4da8e28bda19f6e6257a03b00ac66_180x120.jpg" alt="img"></a></p><h4 id="7、数据结构-浙江大学"><a href="#7、数据结构-浙江大学" class="headerlink" title="7、数据结构-浙江大学"></a><strong>7、数据结构-浙江大学</strong></h4><p>95万播放，近万赞</p><p>[数据结构-浙江大学_哔哩哔哩(https&#x2F;&#x2F;<a href="https://www.bilibili.com/video/BV1JW411i731">https://www.bilibili.com/video/BV1JW411i731</a>)</p><h4 id="8、慕课-课堂实录-数据结构与算法Python版-北京大学-陈斌"><a href="#8、慕课-课堂实录-数据结构与算法Python版-北京大学-陈斌" class="headerlink" title="8、慕课+课堂实录 数据结构与算法Python版-北京大学-陈斌"></a><strong>8、慕课+课堂实录 数据结构与算法Python版-北京大学-陈斌</strong></h4><p>2.4万播放，700多赞</p><p>适合Python语言基础的同学看</p><p><a href="https://www.bilibili.com/video/BV1gy4y1E7M5">【慕课+课堂实录】数据结构与算法Python版-北京大学-陈斌-字幕校对-【完结！】_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1gy4y1E7M5https://www.bilibili.com/video/BV1gy4y1E7M5https://www.bilibili.com/video/BV1gy4y1E7M5<img src="https://pic1.zhimg.com/v2-c70ad7109feef4822bf3a4d42676a548_180x120.jpg" alt="img"></a></p><p>至于你要选择听哪个？你可以根据我整理的播放、点赞数据判断，我更建议你去试听几节课，找一个自己听着舒服的，毕竟每个人的喜好不一样。</p><p>除了看视频，我建议学Java还得结合着看书，Java的最佳读书路线可以看我写的这个文章：</p><p><a href="https://zhuanlan.zhihu.com/p/444636383">四猿外：学Java，Java书籍的最佳阅读顺序22 赞同 · 5 评论文章23 赞同 · 5 评论文章</a></p><p>如果学完想进大厂，如果精力够、能学过来的话，再送你一套电子书，这里还包括很厉害的算法刷题笔记，这份资料已经帮很多人拿到了大厂offer</p><p><a href="mp.weixin.qq.com/s/Eb0EFGOdHutmg8QDq4363A">这些电子书，能帮你进大厂拿高薪，拿走不谢mp.weixin.qq.com&#x2F;s&#x2F;Eb0EFGOdHutmg8QDq4363A<img src="https://pic3.zhimg.com/v2-78a04c89de13c0beb5fbaae803c8e41e_180x120.jpg" alt="img"></a></p><p><strong>还有一点，Java 的知识体系繁冗复杂，但是有很多知识在实际工作中几乎没有人用。很多人在学习过程中，却经常把有限的时间和精力花在了这些“没有用”的知识上，事倍功半。</strong></p><p>所以呢，我接下要说说Java 中那些不建议学习的知识点，这些知识工作中很少用到，面试很少问到。</p><p><strong>Java 的桌面 GUI 相关技术，</strong>包括:</p><ol><li>AWT</li><li>Swing</li><li>SWT&#x2F;JFACE</li><li>JavaFx</li><li>JavaFx2</li></ol><p><strong>Java 的 XML 相关 API</strong></p><p><strong>Java 的安全相关</strong></p><p><strong>Java 的国际化</strong></p><p><strong>Java 的 native 方法</strong></p><p><strong>Struts 和 Hibernate</strong></p><p>以上这些，大家在看视频、看书的时候，可以先跳过，以后用的到的时候，再学也来得及。</p><p>不建议学的原因，不展开说了，否则篇幅太长了，想知道详细原因的看这个</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&mid=2247485760&idx=3&sn=1cb21c2b568ba2812d5ae5cfb5a58af8&chksm=fcd8c501cbaf4c17ac5978b0e3dadaa8b9a240a0f3c759380f1bfe1de2b478dff1add4dde9c8&token=909381664&lang=zh_CN#rd">Java学习之路上的“路障”太坑了</a></p><p>作者：四猿外<br>链接：<a href="https://https//www.zhihu.com/question/460988464/answer/2390732089">https://https://www.zhihu.com/question/460988464/answer/2390732089</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2022/03/14/za-ji-2022-3-14/"/>
      <url>/2022/03/14/za-ji-2022-3-14/</url>
      
        <content type="html"><![CDATA[<h3 id="杂说"><a href="#杂说" class="headerlink" title="杂说"></a>杂说</h3><p>今天算是把博客的东西搞完了，但是自己还是有很多东西都不是很懂，例如关于前端的<code>ejs</code>文件是什么东西，然后自己关于音乐的这一部分没有搞完，另外关于个人博客的东西自己目前知识储备不足还是不是很了解具体的实现过程。所以呢，自己什么不懂就学什么，以内需推动外求。</p><h4 id="自己目前的任务是"><a href="#自己目前的任务是" class="headerlink" title="自己目前的任务是"></a>自己目前的任务是</h4><ul><li>大论文的实验部分如何选择做，以及如何写论文</li></ul><p>我的理解过程主要还是分为三个部分</p><h4 id="求特征子集"><a href="#求特征子集" class="headerlink" title="求特征子集"></a>求特征子集</h4><h4 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h4><h4 id="检测算法"><a href="#检测算法" class="headerlink" title="检测算法"></a>检测算法</h4><h2 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心理抚养</title>
      <link href="/2022/03/14/xin-li-fu-yang/"/>
      <url>/2022/03/14/xin-li-fu-yang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今人有过,不喜人规,如讳病而忌医,宁灭其身而无悟也</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 书单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客需要的改进</title>
      <link href="/2022/03/14/hexo-bo-ke-xu-yao-de-gai-jin/"/>
      <url>/2022/03/14/hexo-bo-ke-xu-yao-de-gai-jin/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客需要的改进"><a href="#hexo博客需要的改进" class="headerlink" title="hexo博客需要的改进"></a>hexo博客需要的改进</h2><ul><li>关于这个博客主题，音乐的方面没有搞好，目前自己对前端不是很懂，这方面需要学习，不过可以用视频的方式实现关于音乐的歌唱</li><li>其他的感觉还是比较完善的</li><li>希望自己能够坚持下去持续输出</li></ul><ol><li>关于统计某一个类别的总用时长，干了什么</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo主题matery的使用</title>
      <link href="/2022/03/14/guan-yu-hexo-zhu-ti-matery-de-shi-yong/"/>
      <url>/2022/03/14/guan-yu-hexo-zhu-ti-matery-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="关于hexo主题matery的使用"><a href="#关于hexo主题matery的使用" class="headerlink" title="关于hexo主题matery的使用"></a>关于hexo主题matery的使用</h1><p><strong>具体操作连接可参考</strong>：<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">hexo主题matery的使用</a></p><p>本文主要是说明还有一些可以改进的点</p><ol><li>关于音乐的插件</li><li>关于视频的插件</li></ol><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/14/hello-world/"/>
      <url>/2022/03/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
