<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tech-Java基础-接口</title>
      <link href="/2022/03/29/tech-java-ji-chu-jie-kou/"/>
      <url>/2022/03/29/tech-java-ji-chu-jie-kou/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="接口的本质"><a href="#接口的本质" class="headerlink" title="接口的本质"></a>接口的本质</h3><p>只是将对象看作属于某种数据类型，并按该类型进行操作，在一些情况下，<strong>并不能反映对象以及对对象操作的本质</strong>。我们实际上关心的，并不是对象的类型，而是<strong>对象的能力</strong>，只要能提供这个能力，类型并不重要。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口与类不同，它的方法<strong>没有实现代码</strong>。定义一个接口本身并没有做什么，也没有太大的用处，它还需要至少两个参与者：一个需要实现接口，另一个使用接口。</p><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><p>使用<code>implements</code>这个关键字表示实现接口</p><h4 id="使用接口"><a href="#使用接口" class="headerlink" title="使用接口"></a>使用接口</h4><p>与类不同，接口不能new，不能直接创建一个接口对象</p><p>对象只能通过类来创建。但可以声明接口类型的变量，引用实现了接口的类对象。</p><h4 id="接口的细节"><a href="#接口的细节" class="headerlink" title="接口的细节"></a>接口的细节</h4><h5 id="接口中的变量。"><a href="#接口中的变量。" class="headerlink" title="接口中的变量。"></a>接口中的变量。</h5><p>语法定义</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认修饰符为public static final</span>    <span class="token comment" spellcheck="true">// 必须初始化</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="接口的继承。"><a href="#接口的继承。" class="headerlink" title="接口的继承。"></a>接口的继承。</h5><p>接口可以多继承</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceExtendsDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBase1</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBase2</span><span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBase3</span> <span class="token keyword">extends</span> <span class="token class-name">IBase1</span><span class="token punctuation">,</span>IBase2<span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="类的继承与接口。"><a href="#类的继承与接口。" class="headerlink" title="类的继承与接口。"></a>类的继承与接口。</h5><p>类的继承与接口可以共存，换句话说，类可以在继承基类的情况下，同时实现一个或多个接口，语法如下所示</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token keyword">implements</span> <span class="token class-name">IChild</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 主体代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>关键字extends要放在implements之前</strong></p><h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h5><p>与类一样,接口可以使用<code>instanceof</code>关键字，用来判断一个对象是否实现了某接口</p><pre class="line-numbers language-java"><code class="language-java">Point p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">MyComparable</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"comparable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用接口替代继承"><a href="#使用接口替代继承" class="headerlink" title="使用接口替代继承"></a>使用接口替代继承</h3><ol><li>继承至少有两个好处：</li></ol><ul><li><ul><li>一个是复用代码；</li><li>另一个是利用多态和动态绑定统一处理多种不同子类的对象。</li></ul></li></ul><ol><li><p>使用组合替代继承，可以复用代码，但不能统一处理。</p></li><li><p>使用接口替代继承，针对接口编程，可以实现统一处理不同类型的对象，但接口没有代码实现，无法复用代码。</p></li></ol><p><strong>将组合和接口结合起来替代继承，就既可以统一处理，又可以复用代码了。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAdd</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">implements</span> <span class="token class-name">IAdd</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_NUM <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>MAX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">&lt;</span>MAX_NUM<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            if (count &lt; MAX_NUM)</span><span class="token comment" spellcheck="true">//            arr[count++]=number;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token keyword">implements</span> <span class="token class-name">IAdd</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用组合,复用base的代码</span>    <span class="token keyword">private</span> Base base<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 复用代码</span>        base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 复用代码</span>        base<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Child c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Java-8和Java-9对接口的增强"><a href="#Java-8和Java-9对接口的增强" class="headerlink" title="Java 8和Java 9对接口的增强"></a>Java 8和Java 9对接口的增强</h3><p>在Java 8之前，接口中的方法都是抽象方法，都没有实现体</p><hr><p>Java 8允许在接口中定义两类新方法：</p><ol><li>静态方法</li></ol><p>test()就是一个静态方法，可以通过IDemo.test()调用。在接口不能定义静态方法之前，相关的静态方法往往定义在单独的类中，比如，Java API中，Collection接口有一个对应的单独的类Collections，在Java 8中，就可以直接写在接口中了，比如Comparator接口就定义了多个静态方法。</p><ol><li>默认方法</li></ol><p>hi()是一个默认方法，用关键字default表示。默认方法与抽象方法都是接口的方法，不同在于，默认方法有默认的实现，实现类可以改变它的实现，也可以不改变。<strong>引入默认方法主要是函数式数据[见函数式编程处理]的需求，是为了便于给接口增加功能。</strong></p><ol><li>它们有实现体</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDemo</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>在Java 8中，静态方法和默认方法都必须是public的</p><p>Java 9去除了这个限制，它们都可以是private的，<strong>引入private方法主要是为了方便多个静态或默认方法复用代码</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDemoPrivate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"common"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">actionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">actionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，actionA和actionB两个默认方法共享了相同的common()方法的代码。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><strong>针对接口编程是一种重要的程序思维方式，这种方式不仅可以复用代码，还可以降低耦合，提高灵活性，是分解复杂问题的一种重要工具。</strong></p><p><strong>参考文献</strong></p><p>[<img src="https://wfqqreader-1252317822.image.myqcloud.com/cover/38/923038/t6_923038.jpg" alt="书籍封面"></p><p><a href="https://weread.qq.com/web/reader/b51320f05e159eb51b29226"><em>Java编程的逻辑</em>马俊昌写一本关于编程的书，是我大概15年前就有的一个想法，当时，我体会到了编程中数据结构的美妙和神奇，有一种收获的喜悦和分享的冲动。这种收获是我反复阅读教程十几遍，花大量时间上机练习调试得到的，这是一个比较痛苦的过程。我想，如果把我学到的知识更为清晰易懂地表达出来，其他人不就可以掌握编程容易一些，并体会到那种喜悦了吗？不过，当时感觉自己学识太浅，要学习的东西太多，想一想也就算了。</a></p>]]></content>
      
      
      <categories>
          
          <category> technique </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tech-Java基础-继承</title>
      <link href="/2022/03/29/tech-java-ji-chu-ji-cheng/"/>
      <url>/2022/03/29/tech-java-ji-chu-ji-cheng/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="关于继承的小结"><a href="#关于继承的小结" class="headerlink" title="关于继承的小结"></a>关于继承的小结</h3><ol><li>每个类<strong>有且只有一个父类</strong>，没有声明父类的，其父类为Object，子类继承了父类非private的属性和方法，可以增加自己的属性和方法，以及重写父类的方法实现。</li><li>new过程中，父类先进行初始化，可通过super调用父类相应的构造方法，没有使用super的情况下，调用父类的默认构造方法。</li><li>子类变量和方法与父类重名的情况下，可通过super强制访问父类的变量和方法。</li><li>子类对象可以赋值给父类引用变量，这叫<strong>多态</strong>；实际执行调用的是子类实现，这叫<strong>动态绑定</strong>。</li></ol><p><strong>多态和动态绑定是计算机程序的一种重要思维方式，使得操作对象的程序不需要关注对象的实际类型，从而可以统一处理不同对象，但又能实现每个对象的特有行为。</strong></p><blockquote><p>动态绑定实现的机制就是根据对象的实际类型查找要执行的方法，子类型中找不到的时候再查找父类。</p></blockquote><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="父类构造方法中调用了可被重写的方法"><a href="#父类构造方法中调用了可被重写的方法" class="headerlink" title="父类构造方法中调用了可被重写的方法"></a>父类构造方法中调用了可被重写的方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1st Static"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> String b <span class="token operator">=</span> <span class="token string">"Base_b的静态变量"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base的静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String a <span class="token operator">=</span> <span class="token string">"Child的成员变量"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String b <span class="token operator">=</span> <span class="token string">"Child_b的静态变量"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Child c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Base b <span class="token operator">=</span> c<span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex"><code class="language-tex">1st StaticBase_b的静态变量Base的静态代码块Child_b的静态变量Child静态代码块父类构造方法nullChild的成员变量构造方法执行Child的成员变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次输出为<code>null</code>，第二次输出为<code>Child的成员变量</code>。</p><p>第一次输出是在new过程中输出的，在new过程中，首先是初始化父类，父类构造方法调用test()方法，test()方法被子类重写了，就会调用子类的test()方法，子类方法访问子类实例变量a，而这个时候子类的实例变量的赋值语句和构造方法还没有执行，所以输出的是其默认值<code>null</code>。</p><blockquote><p><strong>继承执行顺序</strong></p><p>静态先执行，基于类的。根据顺序结构输出</p><p>成员变量、构造方法</p></blockquote><h3 id="重载与重写"><a href="#重载与重写" class="headerlink" title="重载与重写"></a>重载与重写</h3><ul><li>重载是指方法<strong>名称相同</strong>但<strong>参数签名不同</strong>（参数个数、类型或顺序不同)</li><li>重写是指<strong>子类重写与父类</strong> <strong>相同参数签名</strong>的方法。</li></ul><h4 id="可见性修饰符protected"><a href="#可见性修饰符protected" class="headerlink" title="可见性修饰符protected"></a>可见性修饰符protected</h4><blockquote><p><code>protected</code>表示虽然不能被外部任意访问，但可被子类访问。另外，protected还表示可被同一个包中的其他类访问，不管其他类是不是该类的子类。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1648517220336-48094716-7798-4ecb-8df1-7c30fa90ccbb.png" alt="img"></p><h4 id="可见性重写"><a href="#可见性重写" class="headerlink" title="可见性重写"></a>可见性重写</h4><blockquote><p>重写时，子类方法不能降低父类方法的可见性,否则破坏了<code>is a</code>的关系</p></blockquote><h4 id="防止继承final"><a href="#防止继承final" class="headerlink" title="防止继承final"></a>防止继承final</h4><blockquote><p>当我们不希望父类方法被子类重写，甚至不希望类被继承，可以通过<code>final</code>关键字实现。</p><p><code>final</code>关键字也可以修饰变量</p></blockquote><h3 id="继承实现的基本原理"><a href="#继承实现的基本原理" class="headerlink" title="继承实现的基本原理"></a>继承实现的基本原理</h3><h4 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h4><blockquote><ul><li><p>所谓类的加载是指将类的相关信息加载到内存</p></li><li><p>类是动态加载的，当第一次使用这个类的时候才会加载，加载一个类时，会查看其父类是否已加载，如果没有，则会加载其父类。</p></li></ul></blockquote><ol><li><p>类主要包括的部分</p><ul><li><p>❑ 类变量（静态变量）；</p></li><li><p>❑ 类初始化代码；</p><ul><li>❑ 定义实例变量时的赋值语句；</li><li>❑ 实例初始化代码块；</li><li>❑ 构造方法。</li></ul></li><li><p>❑ 类方法（静态方法）；</p></li><li><p>❑ 实例变量；</p></li><li><p>❑ 实例初始化代码；</p></li><li><p>❑ 实例方法；</p></li><li><p>❑ 父类信息引用。</p></li></ul></li><li><p>类加载过程包括</p><ul><li>❑ 分配内存保存类的信息；</li><li>❑ 给类变量赋默认值；</li><li>❑ 加载父类；</li><li>❑ 设置父子关系；</li><li>❑ 执行类初始化代码。</li></ul></li></ol><blockquote><p><strong>注意</strong></p><p>类初始化代码，是先执行父类的，再执行子类的。不过，父类执行时，子类静态变量的值也是有的，是默认值。对于默认值，我们之前说过，数字型变量都是0, boolean是false,char是’\u0000’，引用型变量是null。</p></blockquote><h4 id="对象创建过程"><a href="#对象创建过程" class="headerlink" title="对象创建过程"></a>对象创建过程</h4><ol><li>分配内存；</li><li>对所有实例变量赋默认值；</li><li>执行实例初始化代码。</li></ol><p>分配的内存包括本类和所有父类的实例变量，但不包括任何静态变量。实例初始化代码的执行从父类开始，再执行子类的。但在任何类执行初始化代码之前，所有实例变量都已设置完默认值。每个对象除了保存类的实例变量之外，还保存着实际类信息的引用。</p><h4 id="方法的调用过程"><a href="#方法的调用过程" class="headerlink" title="方法的调用过程"></a>方法的调用过程</h4><blockquote><p>如果继承的层次比较深，要调用的方法位于比较上层的父类，则调用的效率是比较低的，因为每次调用都要进行很多次查找。大多数系统使用一种称为<strong>虚方法表的方法</strong>来优化调用的效率</p><p>所谓<strong>虚方法表</strong>，就是在类加载的时候为每个类创建一个表，记录该类的对象所有动态绑定的方法（包括父类的方法）及其地址，但一个方法只有一条记录，<strong>子类重写了父类方法后只会保留子类的</strong>。</p></blockquote><h4 id="变量访问过程"><a href="#变量访问过程" class="headerlink" title="变量访问过程"></a>变量访问过程</h4><p>对变量的访问是<strong>静态绑定</strong>的，无论是类变量还是实例变量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String a <span class="token operator">=</span> <span class="token string">"父类实例变量"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String a <span class="token operator">=</span> <span class="token string">"子类实例变量"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Zi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ZI.Fu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">        Fu fu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fu<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Zi<span class="token punctuation">)</span>fu<span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-te"><code class="language-te">父类实例变量子类实例变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="继承是把双刃剑"><a href="#继承是把双刃剑" class="headerlink" title="继承是把双刃剑"></a>继承是把双刃剑</h3><p>一方面继承是非常强大的；另一方面继承的破坏力也是很强的</p><blockquote><p><strong>继承为什么会有破坏力呢？</strong></p><p>主要是因为继承可能破坏封装，而封装可以说是程序设计的第一原则；另外，继承可能没有反映出is-a关系。</p></blockquote><h4 id="继承破坏封装"><a href="#继承破坏封装" class="headerlink" title="继承破坏封装"></a>继承破坏封装</h4><blockquote><p><strong>封装就是隐藏实现细节，提供简化接口。</strong></p><p>使用者只需要关注怎么用，而不需要关注内部是怎么实现的。实现细节可以随时修改，而不影响使用者。函数是封装，类也是封装。通过封装，才能在更高的层次上考虑和解决问题。可以说，封装是程序设计的第一原则，没有封装，代码之间会到处存在着实现细节的依赖，则构建和维护复杂的程序是难以想象的。</p></blockquote><blockquote><p><strong>继承可能破坏封装</strong></p><p>是因为子类和父类之间可能存在着实现<strong>细节的依赖</strong>。子类在继承父类的时候，往往不得不关注父类的实现细节，而父类在修改其内部实现的时候，如果不考虑子类，也往往会影响到子类。</p></blockquote><p><strong>总结：</strong>对于子类而言，通过继承实现是没有安全保障的，因为父类修改内部实现细节，它的功能就可能会被破坏；而对于基类而言，让子类继承和重写方法，就可能丧失随意修改内部实现的自由。</p><h4 id="继承没有反映is-a关系"><a href="#继承没有反映is-a关系" class="headerlink" title="继承没有反映is-a关系"></a>继承没有反映is-a关系</h4><p>继承关系是设计用来反映is-a关系的，子类是父类的一种，子类对象也属于父类，父类的属性和行为也适用于子类。就像橙子是水果一样，水果有的属性和行为，橙子也必然都有。</p><p>但是，Java并没有办法约束，父类有的属性和行为，子类并不一定都适用，子类还可以重写方法，实现与父类预期完全不一样的行为。</p><p>以鸟为例，你可能给父类增加了fly()方法，对企鹅，你可能想，企鹅不会飞，但可以走和游泳，就在企鹅的fly()方法中，实现了有关走或游泳的逻辑。但是实际上该方法并不符合fly()方法的本身含义</p><h4 id="如何应对继承的双面性"><a href="#如何应对继承的双面性" class="headerlink" title="如何应对继承的双面性"></a>如何应对继承的双面性</h4><h5 id="避免使用继承；"><a href="#避免使用继承；" class="headerlink" title="避免使用继承；"></a>避免使用继承；</h5><ol><li><p>使用final避免继承</p><ol><li><strong>给方法加final修饰符</strong>，父类就保留了随意修改这个方法内部实现的自由，使用这个方法的程序也可以确保其行为是符合父类声明的。</li><li>给类加final修饰符，父类就保留了随意修改这个类实现的自由，使用者也可以放心地使用它，而不用担心一个父类引用的变量，实际指向的却是一个完全不符合预期行为的子类对象。</li></ol></li><li><p>优先使用组合而非继承</p><ol><li><p>使用组合可以抵挡父类变化对子类的影响，从而保护子类，应该优先使用组合。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_NUM <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>MAX_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">&lt;</span>MAX_NUM<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            add(number);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> MAX_NUM<span class="token punctuation">)</span>            arr<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Base base<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sum<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addA1l</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        base<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>但组合的问题是，子类对象不能当作基类对象来统一处理了。解决方法是使用接口。</p></li></ol></li></ol><h5 id="正确使用继承。"><a href="#正确使用继承。" class="headerlink" title="正确使用继承。"></a>正确使用继承。</h5><p>如果要使用继承，怎么正确使用呢？</p><p>使用继承大概主要有三种场景：</p><p>1）基类是别人写的，我们写子类；</p><p>2）我们写基类，别人可能写子类；</p><p>3）基类、子类都是我们写的。</p><p>第1种场景中，基类主要是Java API、其他框架或类库中的类，在这种情况下，我们主要通过扩展基类，实现自定义行为，这种情况下需要注意的是：</p><p>❑ 重写方法不要改变预期的行为；</p><p>❑ 阅读文档说明，理解可重写方法的实现机制，尤其是方法之间的依赖关系；</p><p>❑ 在基类修改的情况下，阅读其修改说明，相应修改子类。</p><p>第2种场景中，我们写基类给别人用，在这种情况下，需要注意的是：</p><p>❑ 使用继承反映真正的is-a关系，只将真正公共的部分放到基类；</p><p>❑ 对不希望被重写的公开方法添加final修饰符；</p><p>❑ 写文档，说明可重写方法的实现机制，为子类提供指导，告诉子类应该如何重写；</p><p>❑ 在基类修改可能影响子类时，写修改说明。</p><p>第3种场景，我们既写基类也写子类，关于基类，注意事项和第2种场景类似，关于子类，注意事项和第1种场景类似，不过程序都由我们控制，要求可以适当放松一些。</p>]]></content>
      
      
      <categories>
          
          <category> technique </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tech-mysql</title>
      <link href="/2022/03/28/tech-mysql/"/>
      <url>/2022/03/28/tech-mysql/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.yuque.com/attachments/yuque/0/2021/xmind/2040418/1637572388832-c5f0cb79-6606-4d7b-98be-528e37cfbf10.xmind">MySQL复习.xmind</a></p><p>有一个知识脉络</p><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2040418/1637135392517-f59e7783-72c5-465f-a136-1a1ae7bc7040.jpeg" alt="img"></p><p>从一个点出发一直问为什么为什么？</p><hr><h1 id="数据库概述与MySQL安装篇"><a href="#数据库概述与MySQL安装篇" class="headerlink" title="数据库概述与MySQL安装篇"></a>数据库概述与MySQL安装篇</h1><h2 id="第01章：数据库概述"><a href="#第01章：数据库概述" class="headerlink" title="第01章：数据库概述"></a>第01章：数据库概述</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><table><thead><tr><th><strong>DB：数据库（Database）</strong></th></tr></thead><tbody><tr><td>即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</td></tr><tr><td><strong>DBMS：数据库管理系统（Database Management System）</strong></td></tr><tr><td>是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控 制。用户通过数据库管理系统访问数据库中表内的数据。</td></tr><tr><td><strong>SQL：结构化查询语言（Structured Query Language）</strong></td></tr><tr><td>专门用来与数据库通信的语言。</td></tr></tbody></table><h4 id="RDBMS-关系型数据库"><a href="#RDBMS-关系型数据库" class="headerlink" title="RDBMS : 关系型数据库"></a>RDBMS : 关系型数据库</h4><p>关系型数据库模型是把复杂的数据结构归结为简单的<br>二元关系 （即二维表格形式） </p><p>行(row) 和 列(column) 的形式存储数据，以便于用户理解。</p><p><strong>优势</strong></p><ul><li>复杂查询 可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li>事务支持 使得对于安全性能很高的数据访问要求得以实现</li></ul><h4 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h4><p>可看成传统关系型数据库的功能 <strong>阉割版本</strong> ，基于键值对存储数据，不需要经过SQL层的解析， <strong>性能非常高</strong> 。同时，通过减少不常用的功能，进一步提高性能 </p><p><strong>类别</strong></p><ol><li><strong>键值型数据库</strong></li></ol><p>键值型数据库典型的使用场景是作为 内存缓存 。</p><p>Redis 是最流行的键值型数据库 </p><ol><li><strong>文档型数据库</strong></li></ol><p>此类数据库可存放并获取文档，可以是XML、JSON等格式 </p><p>MongoDB是最流行的文档型数据库 </p><ol><li><strong>搜索引擎数据库</strong></li></ol><p>虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。核心原理是“倒排索引”。</p><p>典型产品：Solr、Elasticsearch、Splunk 等  </p><ol><li><strong>列式数据库</strong></li></ol><p>列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的I&#x2F;O，适合于分布式文件系统，不足在于功能相对有限。</p><p>典型产品：HBase等 </p><ol><li><strong>图形数据库</strong></li></ol><p>利用了图这种数据结构存储了实体（对象）之间的关系 </p><p>典型产品：Neo4J、InfoGrid等。 </p><h3 id="2-MySQL"><a href="#2-MySQL" class="headerlink" title="2 MySQL"></a>2 MySQL</h3><ul><li>MySQL是一个 开放源代码的关系型数据库管理系统</li><li>MySQL使用 标准的SQL数据语言 形式</li></ul><p>MySQL 由于其<strong>体积小、速度快、总体拥有成本低，可处理上千万条记录的大型数据库</strong>，尤其是开放源码这一特点，使得很多互联网公司、中小型网站选择了MySQL作为网站数据库（Facebook，Twitter，YouTube，阿里巴巴&#x2F;蚂蚁金服，去哪儿，美团外卖，腾讯）。 </p><h3 id="3-关系型数据库设计规则"><a href="#3-关系型数据库设计规则" class="headerlink" title="3. 关系型数据库设计规则"></a>3. 关系型数据库设计规则</h3><p><strong>ORM</strong>（object Relational Mapping）体现</p><p>数据库中的<strong>表</strong> 对应 Java中的类</p><p>数据库中的对象 对应 Java中类的实体（对象）</p><p>数据库中的一个列 对应 Java中类的一个字段</p><h4 id="3-1-表的关联关系"><a href="#3-1-表的关联关系" class="headerlink" title="3.1 表的关联关系"></a>3.1 表的关联关系</h4><p>四种：一对一关联、一对多关联、多对多关联、自我引用 </p><p><strong>自我引用</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637136448325-a5edcf88-f519-4065-9954-53192fe750e8.png" alt="img"></p><h2 id="第02章：MySQL环境搭建"><a href="#第02章：MySQL环境搭建" class="headerlink" title="第02章：MySQL环境搭建"></a>第02章：MySQL环境搭建</h2><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><h4 id="步骤1：停止MySQL服务"><a href="#步骤1：停止MySQL服务" class="headerlink" title="步骤1：停止MySQL服务"></a>步骤1：停止MySQL服务</h4><p>在卸载之前，先停止MySQL8.0的服务。按键盘上的“Ctrl + Alt + Delete”组合键，打开“任务管理器”对话<br>框，可以在“服务”列表找到“MySQL8.0”的服务，如果现在“正在运行”状态，可以右键单击服务，选择“停<br>止”选项停止MySQL8.0的服务，如图所示。</p><h4 id="步骤2：软件的卸载"><a href="#步骤2：软件的卸载" class="headerlink" title="步骤2：软件的卸载"></a>步骤2：软件的卸载</h4><ul><li><p>方式1：通过控制面板方式<br>卸载MySQL8.0的程序可以和其他桌面应用程序一样直接在“控制面板”选择“卸载程序”，并在程序列表中<br>找到MySQL8.0服务器程序，直接双击卸载即可，如图所示。这种方式删除，数据目录下的数据不会跟着<br>删除。</p></li><li><p>方式2：通过360或电脑管家等软件卸载<br>略</p></li><li><p>方式3：通过安装包提供的卸载功能卸载<br>你也可以通过安装向导程序进行MySQL8.0服务器程序的卸载。<br>① 再次双击下载的mysql-installer-community-8.0.26.0.msi文件，打开安装向导。安装向导会自动检测已<br>安装的MySQL服务器程序。<br>② 选择要卸载的MySQL服务器程序，单击“Remove”（移除），即可进行卸载。</p></li></ul><h4 id="步骤3：残余文件的清理"><a href="#步骤3：残余文件的清理" class="headerlink" title="步骤3：残余文件的清理"></a>步骤3：残余文件的清理</h4><p>如果再次安装不成功，可以卸载后对残余文件进行清理后再安装。<br>（1）服务目录：mysql服务的安装目录<br>（2）数据目录：默认在C:\ProgramData\MySQL<br>如果自己单独指定过数据目录，就找到自己的数据目录进行删除即可 </p><p><strong>注意：请在卸载前做好数据备份</strong></p><p>在操作完以后，需要重启计算机，然后进行安装即可。如果仍然安装失败，需要继续操作如下步骤4。 </p><h4 id="步骤4：清理注册表（选做）5-7版本"><a href="#步骤4：清理注册表（选做）5-7版本" class="headerlink" title="步骤4：清理注册表（选做）5.7版本"></a>步骤4：清理注册表（选做）5.7版本</h4><p>如果前几步做了，再次安装还是失败，那么可以清理注册表。<br>如何打开注册表编辑器：在系统的搜索框中输入 regedit </p><pre class="line-numbers language-java"><code class="language-java">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\MySQL服务 目录删除HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL服务 目录删除HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MySQL服务 目录删除HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL服务目录删除HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL服务删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册表中的ControlSet001,ControlSet002,不一定是001和002,可能是ControlSet005、006之类 </p><h4 id="步骤5：删除环境变量配置"><a href="#步骤5：删除环境变量配置" class="headerlink" title="步骤5：删除环境变量配置"></a>步骤5：删除环境变量配置</h4><p>找到path环境变量，将其中关于mysql的环境变量删除，切记不要全部删除。 </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p><strong>MySQL Community Server 社区版本</strong>，开源免费，自由下载，但不提供官方技术支持，适用于大多数普通用户。</p></li><li><p><strong>MySQL Enterprise Edition 企业版本</strong>，需付费，不能在线下载，可以试用30天。提供了更多的功能和更完备的技术支持，更适合于对数据库的功能和可靠性要求较高的企业客户。</p></li><li><p><strong>MySQL Cluster 集群版</strong>，开源免费。用于架设集群服务器，可将几个MySQL Server封装成一个Server。需要在社区版或企业版的基础上使用。</p></li><li><p><strong>MySQL Cluster CGE 高级集群版</strong>，需付费。</p></li></ul><p>此外，官方还提供了 <strong>MySQL Workbench</strong> （GUITOOL）一款专为MySQL设计的 <strong>图形界面管理</strong>工具 。<br>MySQLWorkbench又分为两个版本，分别是 社区版 （MySQL Workbench OSS）、 商用版 （MySQL WorkbenchSE）。 </p><h4 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1. 下载地址"></a>1. 下载地址</h4><p>官网：<a href="https://www.mysql.com/">https://www.mysql.com</a></p><h4 id="2-打开官网，点击DOWNLOADS"><a href="#2-打开官网，点击DOWNLOADS" class="headerlink" title="2. 打开官网，点击DOWNLOADS"></a>2. 打开官网，点击DOWNLOADS</h4><p>然后，点击 MySQL Community(GPL) Downloads<br> <img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637137506630-94cbba54-74b4-4b7c-9c73-b24f825df745.png" alt="img"></p><h4 id="3-点击-MySQL-Community-Server"><a href="#3-点击-MySQL-Community-Server" class="headerlink" title="3. 点击 MySQL Community Server   "></a>3. 点击 MySQL Community Server   <img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637137534083-3371d647-633f-4f84-bda7-c8ae64592e91.png" alt="img"></h4><h4 id="4-在General-Availability-GA-Releases中选择适合的版本"><a href="#4-在General-Availability-GA-Releases中选择适合的版本" class="headerlink" title="4. 在General Availability(GA) Releases中选择适合的版本"></a>4. 在General Availability(GA) Releases中选择适合的版本</h4><p>Windows平台下提供两种安装文件：MySQL二进制分发版（.msi安装文件）和免安装版（.zip压缩文件）。一般来讲，应当使用二进制分发版，因为该版本提供了图形化的安装向导过程，比其他的分发版使用起来要简单，不再需要其他工具启动就可以运行MySQL。 </p><p>这里在Windows 系统下推荐下载 <strong>MSI</strong>安装程序 ；点击 Go to Download Page 进行下载即可 </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637137586393-0d005581-abb2-4e86-a411-99d941a903ba.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637137636416-3c4f247d-33b7-44fb-872b-c0a39015821f.png" alt="img"></p><ul><li><p>Windows下的MySQL8.0安装有两种安装程序</p></li><li><ul><li>mysql-installer-web-community-8.0.26.0.msi 下载程序大小：2.4M；安装时需要联网安装组件。</li><li>mysql-installer-community-8.0.26.0.msi 下载程序大小：450.7M；安装时离线安装即可。推荐</li></ul></li><li><p>具体细节可查看如下pdf文档</p></li></ul><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637138642358-3b91f633-396d-47dc-801d-9df41f9a5d6b.pdf">第02章_MySQL环境搭建.pdf</a></p><h2 id="mysql-命令行使用"><a href="#mysql-命令行使用" class="headerlink" title="mysql 命令行使用"></a>mysql 命令行使用</h2><h3 id="安装完成后可通过命令访问"><a href="#安装完成后可通过命令访问" class="headerlink" title="安装完成后可通过命令访问"></a>安装完成后可通过命令访问</h3><pre class="line-numbers language-plain"><code class="language-plain">mysql -uroot -p1234 -hlocalhost -P3306mysql -uroot -p1234 -hlocalhost -P13306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="打开关闭服务"><a href="#打开关闭服务" class="headerlink" title="打开关闭服务"></a>打开关闭服务</h3><pre class="line-numbers language-plain"><code class="language-plain">net stop mysql57net start mysql57<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看编码命令"><a href="#查看编码命令" class="headerlink" title="查看编码命令"></a>查看编码命令</h3><pre class="line-numbers language-plain"><code class="language-plain">show variables like 'character_%';show variables like 'collation_%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="SQL之SELECT使用篇"><a href="#SQL之SELECT使用篇" class="headerlink" title="SQL之SELECT使用篇"></a>SQL之SELECT使用篇</h1><h2 id="SQL语句规则和规范"><a href="#SQL语句规则和规范" class="headerlink" title="SQL语句规则和规范"></a>SQL语句规则和规范</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul><li><p>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</p></li><li><p>每条命令以 ; 或 \g 或 \G 结束</p></li><li><p>关键字不能被缩写也不能分行</p></li><li><ul><li>关于标点符号</li><li>必须保证所有的()、单引号、双引号是成对结束的</li></ul></li><li><ul><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li></ul></li><li><ul><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul><h3 id="SQL大小写规范-（建议遵守）"><a href="#SQL大小写规范-（建议遵守）" class="headerlink" title="SQL大小写规范 （建议遵守）"></a>SQL大小写规范 （建议遵守）</h3><ul><li><p>MySQL 在 Windows 环境下是大小写不敏感的</p></li><li><p>MySQL 在 Linux 环境下是大小写敏感的</p></li><li><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><p>推荐采用统一的书写规范：</p></li><li><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class="line-numbers language-sql"><code class="language-sql">行注释：<span class="token comment" spellcheck="true">#注释文字(MySQL特有的方式)</span>单行注释：<span class="token comment" spellcheck="true">-- 注释文字(--后面必须包含一个空格。)</span>多行注释：<span class="token comment" spellcheck="true">/* 注释文字 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数据导入指令"><a href="#数据导入指令" class="headerlink" title="数据导入指令"></a>数据导入指令</h3><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> source <span class="token number">d</span>:\mysqldb<span class="token punctuation">.</span>sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第03章：基本的SELECT语句"><a href="#第03章：基本的SELECT语句" class="headerlink" title="第03章：基本的SELECT语句"></a>第03章：基本的SELECT语句</h3><h4 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h4><p>重命名一个列，便于计算 </p><ul><li>as：全称alias（别名），可省略</li><li>可以用<code>&quot;&quot;</code>引用</li></ul><h4 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h4><p><code>distinct</code>关键字</p><h4 id="空值参与运算"><a href="#空值参与运算" class="headerlink" title="空值参与运算"></a>空值参与运算</h4><p>可以使用 <code>IFNULL</code> 用来替换</p><h4 id="着重号"><a href="#着重号" class="headerlink" title="着重号"></a>着重号</h4><p>`&#96;&#96;&#96;用来区别于关键字</p><h4 id="查询常数"><a href="#查询常数" class="headerlink" title="查询常数"></a>查询常数</h4><p>会将常数在列中都显示</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637153799826-5e60e016-14d5-4ac5-b742-26c7b4fe6f2c.png" alt="img"></p><h4 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h4><pre><code>describe`或者`desc</code></pre><h4 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h4><p><code>where</code> 后接条件判断</p><h2 id="第04章：运算符"><a href="#第04章：运算符" class="headerlink" title="第04章：运算符"></a>第04章：运算符</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h3><p>算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（&#x2F;）和取模（%）运算。 </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637212130325-a222af8c-c67d-4c42-bd04-d7bb9035aaee.png" alt="img"></p><h3 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h3><p>对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL。<br> <img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637212175268-df2895de-e980-4e14-96cc-6c00773089a5.png" alt="img"></p><p><strong>安全等于运算符</strong> </p><p>安全等于运算符（&lt;&#x3D;&gt;）与等于运算符（&#x3D;）的作用是相似的， 唯一的区别 是‘&lt;&#x3D;&gt;’可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为<code>NULL</code>时，其返回值为0，而不为NULL 。</p><hr><h4 id="非符号类型的运算符"><a href="#非符号类型的运算符" class="headerlink" title="非符号类型的运算符"></a>非符号类型的运算符</h4><p>【is null】 【isnull】 【Least】【greatest】【is not null】【in 】【not in】【like】 【regexp】 【rlike】</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637212424074-023e20c5-8167-4ff5-a158-ee3244f28ae9.png" alt="img"></p><h4 id="LIKE运算符"><a href="#LIKE运算符" class="headerlink" title="LIKE运算符"></a>LIKE运算符</h4><p>LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回0。如果给定的值或者匹配条件为NULL，则返回结果为NULL 。</p><p> “%”：匹配0个或多个字符。<br>“_”：只能匹配一个字符。 </p><h4 id="转移字符"><a href="#转移字符" class="headerlink" title="转移字符"></a>转移字符</h4><ul><li>回避特殊符号的：使用转义符<code>\\</code>。例如：将[%]转为[$%]、[]转为[$]，然后再加上[<code>ESCAPE$</code>]即可</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> job_id<span class="token keyword">FROM</span> jobs<span class="token keyword">WHERE</span> job_id <span class="token operator">LIKE</span> <span class="token string">'IT\_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> last_name <span class="token operator">LIKE</span> <span class="token string">'_o%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>REGEXP运算符</strong></p><ul><li><p><code>^</code>匹配以该字符后面的字符开头的字符串。</p></li><li><p><code>$</code>匹配以该字符前面的字符结尾的字符串。</p></li><li><p><code>.</code>匹配任何一个单字符。</p></li><li><p><code>[...]</code>匹配在方括号内的任何字符。</p></li><li><ul><li>在<code>[^...]</code>表示匹配除方块内的全部字符</li><li><code>[a - b]</code>表示匹配a到z的任意字符，数字同理</li></ul></li><li><p><code>*</code>匹配零个或多个在它前面的字符。例如，<code>x*</code>匹配任何数量的<code>x</code>字符，<code>[0-9]*</code>匹配任何数量的数字，而<code>*</code>匹配任何数量的任何字符。</p></li></ul><p><strong>exgexp和like的区别</strong></p><ul><li>like 匹配整个列</li><li>exgexp 匹配列中的某个字段</li></ul><hr><h3 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637216200912-0f7712e5-e408-4973-b3c7-31febcd507dd.png" alt="img"></p><p>只能对是否为0进行判别，而不能对null判别，出现null则为null</p><p>注意：</p><p>OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合 </p><h3 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4. 位运算符"></a>4. 位运算符</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637216401093-3812e97f-a74e-49bf-b972-c400dda4782e.png" alt="img"></p><h3 id="5-运算符的优先级"><a href="#5-运算符的优先级" class="headerlink" title="5. 运算符的优先级"></a>5. 运算符的优先级</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637216483120-f9cc4d0c-25e5-42b5-af83-946446235556.png" alt="img"></p><p>数字编号越大，优先级越高，优先级高的运算符先进行计算。可以看到，赋值运算符的优先级最低，使用“()”括起来的表达式的优先级最高。 </p><h3 id="6-使用正则表达式查询"><a href="#6-使用正则表达式查询" class="headerlink" title="6 使用正则表达式查询   "></a>6 使用正则表达式查询   <img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637216670545-41f96b1f-bd68-4958-a7ef-9790db48fe60.png" alt="img"></h3><h2 id="第05章：排序与分页"><a href="#第05章：排序与分页" class="headerlink" title="第05章：排序与分页"></a>第05章：排序与分页</h2><h3 id="1-排序数据"><a href="#1-排序数据" class="headerlink" title="1. 排序数据"></a>1. 排序数据</h3><p>使用 <code>ORDER BY</code> 子句排序 。</p><ul><li>ASC（ascend）: 升序</li><li>DESC（descend）:降序</li></ul><p>列的别名只能在order by 字句中使用 </p><h4 id="单列排序"><a href="#单列排序" class="headerlink" title="单列排序"></a>单列排序</h4><h4 id="多列排序"><a href="#多列排序" class="headerlink" title="多列排序"></a>多列排序</h4><h3 id="2-分页"><a href="#2-分页" class="headerlink" title="2. 分页"></a>2. 分页</h3><p>使用<code>LIMIT</code>实现分页</p><p>LIMIT [位置偏移量,] 行数 </p><p>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同 </p><p><strong>分页显式公式：</strong>（当前页数-1）*每页条数，每页条数 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token keyword">LIMIT</span><span class="token punctuation">(</span>PageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>PageSize<span class="token punctuation">,</span>PageSize<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：LIMIT 子句必须放在整个SELECT语句的最后 </p><h2 id="第06章：多表查询"><a href="#第06章：多表查询" class="headerlink" title="第06章：多表查询"></a>第06章：多表查询</h2><p>关联查询</p><p>n个表关联，至少需要n-1个连接条件</p><h3 id="1-等值连接VS非等值连接"><a href="#1-等值连接VS非等值连接" class="headerlink" title="1 等值连接VS非等值连接"></a>1 等值连接VS非等值连接</h3><p><strong>非等值连接</strong> </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637222544739-98022a28-da28-4ff9-859c-3100324b5301.png" alt="img"></p><h3 id="2-自连接VS非自连接"><a href="#2-自连接VS非自连接" class="headerlink" title="2 自连接VS非自连接"></a>2 自连接VS非自连接</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637222876409-e7d2ac2e-5077-4b71-b8f1-20bae1c65957.png" alt="img"></p><h3 id="3-内连接VS非自连接"><a href="#3-内连接VS非自连接" class="headerlink" title="3 内连接VS非自连接"></a>3 内连接VS非自连接</h3><p><strong>外连接</strong>: 两个表在连接过程中除了返回满足连接条件的行以外还返回左（或右）表中不满足条件的行 ，这种连接称为左（或右） 外连接。没有匹配的行时, 结果表中相应的列为空(NULL)。 </p><ul><li>如果是左外连接，则连接条件中左边的表也称为 主表 ，右边的表称为 从表 。</li><li>如果是右外连接，则连接条件中右边的表也称为 主表 ，左边的表称为 从表 。</li></ul><p><strong>哪一方不满足连接查询条件的结果被查询出来就称为该方的外连接。</strong> </p><h4 id="SQL-99语法"><a href="#SQL-99语法" class="headerlink" title="SQL 99语法"></a>SQL 99语法</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637223925418-6dc5a4e6-2bd9-4eb0-ac6f-f7fdd48d0ea8.png" alt="img"></p><p>使用JOIN…ON子句创建连接的语法结构 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> table1<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">,</span> table2<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">,</span>table3<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token keyword">FROM</span> table1    <span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> table1 和 table2 的连接条件        <span class="token keyword">JOIN</span> table3 <span class="token keyword">ON</span> table2 和 table3 的连接条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内连接-INNER-JOIN-的实现"><a href="#内连接-INNER-JOIN-的实现" class="headerlink" title="内连接(INNER JOIN)的实现"></a>内连接(INNER JOIN)的实现</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表<span class="token keyword">FROM</span> A表 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> B表<span class="token keyword">ON</span> 关联条件<span class="token keyword">WHERE</span> 等其他子句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ol><li><strong>左外连接</strong></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637224724633-35172d2a-1f90-4013-a144-f1e3951b1131.png" alt="img"></p><ol><li><strong>右外连接</strong></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637224715430-357c4120-8070-4db0-81aa-ce8c5eef2b15.png" alt="img"></p><ol><li><strong>满外连接</strong></li></ol><ul><li><p>满外连接的结果 &#x3D; 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</p></li><li><p>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</p></li><li><p>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN UNION RIGHT join代替</p></li></ul><hr><p><strong>7种SQL JOINS的实现</strong> </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637224885269-a1e4c644-7728-4646-a12b-04274b14662a.png" alt="img"></p><p>需要注意的是，LEFT JOIN 和 RIGHT JOIN 只存在于 SQL99 及以后的标准中，在 SQL92 中不存在，只能用 (+) 表示。  </p><p>使用<code>union all</code>时，若想进行排序，需要对查询的表起别名，以及在外嵌套一个select语句。</p><blockquote><p>需要注意使用<code>union</code>时<code>order by</code>语句只能使用一次，是对整个组合查询的排序</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#6.列出所有人员和机构的对照关系</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">e</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptName <span class="token keyword">FROM</span> t_emp <span class="token number">e</span> <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> t_dept <span class="token number">d</span> <span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>deptId<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token punctuation">)</span> t1<span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">e</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptName <span class="token keyword">FROM</span> t_emp <span class="token number">e</span> <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> t_dept <span class="token number">d</span> <span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>deptId<span class="token punctuation">`</span><span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> t2<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="哪些情况需要用外连接，哪些情况需要使用内连接？"><a href="#哪些情况需要用外连接，哪些情况需要使用内连接？" class="headerlink" title="哪些情况需要用外连接，哪些情况需要使用内连接？"></a>哪些情况需要用外连接，哪些情况需要使用内连接？</h3><p>根据需要查询表的长短确定，是否需要使用外连接，当需要查询的数据长度有长度区分时使用外连接，否则使用内连接</p><h2 id="第07章：子查询"><a href="#第07章：子查询" class="headerlink" title="第07章：子查询"></a>第07章：子查询</h2><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询  </p><p>注意事项</p><ul><li><p>子查询要包含在括号内</p></li><li><p>将子查询放在比较条件的右侧</p></li><li><p>单行操作符对应单行子查询，多行操作符对应多行子查询</p></li></ul><p><strong>子查询的分类</strong></p><ol><li><p>从内查询返回的结果的条目数</p></li><li><ol><li>单行子查询</li><li>多行子查询</li></ol></li><li><p>从内查询是否被执行多次</p></li><li><ol><li>相关子查询</li><li>不相关子查询</li></ol></li></ol><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><h4 id="单行比较操作符"><a href="#单行比较操作符" class="headerlink" title="单行比较操作符"></a>单行比较操作符</h4><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>&#x3D;</td><td>equal to</td></tr><tr><td>&gt;</td><td>greater than</td></tr><tr><td>&gt;&#x3D;</td><td>greater than or equal to</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&lt;&#x3D;</td><td>less than or equal to</td></tr><tr><td>&lt;&gt;</td><td>not equal to</td></tr></tbody></table><h4 id="CASE中的子查询"><a href="#CASE中的子查询" class="headerlink" title="CASE中的子查询"></a>CASE中的子查询</h4><p>在条件中添加子查询</p><h4 id="子查询中的空值问题"><a href="#子查询中的空值问题" class="headerlink" title="子查询中的空值问题"></a>子查询中的空值问题</h4><p>当子查询没有结果时，就会出现空值问题</p><h4 id="非法使用子查询"><a href="#非法使用子查询" class="headerlink" title="非法使用子查询"></a>非法使用子查询</h4><p>当子查询返回的不是一个数据，而是多列数据，单行操作符无法匹配时，会出现非法情况</p><h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><h4 id="多行比较操作符"><a href="#多行比较操作符" class="headerlink" title="多行比较操作符"></a>多行比较操作符</h4><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的任意一个</td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的某一个值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的所有值比较</td></tr><tr><td>SOME</td><td>实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><p>使用到<code>from</code>中使用子查询，将子查询中的列当成一个新表查询</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查询平均工资最低的部门id</span><span class="token keyword">SELECT</span> department_id<span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>avg_sal<span class="token punctuation">)</span>        <span class="token keyword">FROM</span> <span class="token punctuation">(</span>            <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal            <span class="token keyword">FROM</span> employees            <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id            <span class="token punctuation">)</span> t_dept_avg_sal            <span class="token punctuation">)</span><span class="token keyword">SELECT</span> department_id<span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span>            <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal            <span class="token keyword">FROM</span> employees            <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id            <span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用不同策略取得最小值</strong></p><ul><li><p>方式一 从表中取得最小</p></li><li><p>方式二 比任意一个数都小得到最小值</p></li><li><p>方式三：通过分页取得最小</p></li><li><p>方式四：从两张表中拼接</p></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#8.查询平均工资最低的部门信息</span><span class="token comment" spellcheck="true"># 方式一 从表中取得最小</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> departments<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span>     <span class="token punctuation">(</span><span class="token keyword">SELECT</span> department_id <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id    <span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span>         <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>avg_sal<span class="token punctuation">)</span> <span class="token keyword">FROM</span>             <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">)</span> t_dept_avg_sal        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方式二 比任意一个数都小得到最小值</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> departments<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> department_id    <span class="token keyword">FROM</span> employees    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id    <span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal    <span class="token keyword">FROM</span> employees    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id    <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#方式三：</span><span class="token comment" spellcheck="true"># 通过分页取得最小</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> departments<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> department_id        <span class="token keyword">FROM</span> employees        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id        <span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>                    <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal                    <span class="token keyword">FROM</span> employees                    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id                    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avg_sal                    <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>                    <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#方式四：</span><span class="token comment" spellcheck="true"># 从两张表中拼接</span><span class="token keyword">SELECT</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span> departments <span class="token number">d</span><span class="token punctuation">,</span><span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal        <span class="token keyword">FROM</span> employees        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id        <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avg_sal        <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> dept_avg_sal<span class="token keyword">WHERE</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> dept_avg_sal<span class="token punctuation">.</span>department_id<span class="token keyword">SELECT</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> departments <span class="token number">d</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal    <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avg_sal    <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token punctuation">)</span> t_dept_avg_sal<span class="token keyword">WHERE</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> t_dept_avg_sal<span class="token punctuation">.</span>department_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="空值问题"><a href="#空值问题" class="headerlink" title="空值问题"></a>空值问题</h4><p>当使用子查询时没有数据时，需要检查是否是空值问题</p><h3 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h3><p>当子查询查询的条件需要使用外查询的条件时，称为相关子查询</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#查询员工中工资大于 本部门平均工资 的员工的last_name,salary和其department_id</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>department_id<span class="token keyword">FROM</span> employees <span class="token number">e</span><span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>        <span class="token keyword">FROM</span> employees        <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>salary<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>department_id<span class="token punctuation">,</span>avg_sal<span class="token keyword">FROM</span> employees <span class="token number">e</span><span class="token punctuation">,</span><span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal        <span class="token keyword">FROM</span> employees        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id        <span class="token punctuation">)</span> t_dept_avg_sal<span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> t_dept_avg_sal<span class="token punctuation">.</span>department_id<span class="token operator">AND</span> <span class="token number">e</span><span class="token punctuation">.</span>salary <span class="token operator">></span> avg_sal<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token comment" spellcheck="true"># 题目：查询员工的id,salary,按照department_name 排序</span><span class="token keyword">SELECT</span> employee_id <span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees <span class="token number">e</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> department_name    <span class="token keyword">FROM</span> departments <span class="token number">d</span>    <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 题目：若employees表中employee_id与job_history表中employee_id相同的数目不小于2，</span><span class="token comment" spellcheck="true">#输出这些相同id的员工的employee_id,last_name和其job_id</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>job_id<span class="token keyword">FROM</span> employees <span class="token number">e</span> <span class="token keyword">WHERE</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> job_history j    <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>employee_id<span class="token punctuation">`</span><span class="token operator">=</span>j<span class="token punctuation">.</span><span class="token punctuation">`</span>employee_id<span class="token punctuation">`</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EXISTS-与-NOT-EXISTS关键字"><a href="#EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="EXISTS 与 NOT EXISTS关键字"></a>EXISTS 与 NOT EXISTS关键字</h4><p><strong>使用</strong><code>**exists**</code><strong>和</strong><code>**not exists**</code><strong>和外连接查询的区别</strong></p><ul><li>外连接查询是针对两个表中取得结果</li><li>而<code>exists</code>和<code>not exists</code>是根据某表中的结果进行分类。如果<code>exists</code>则归为一类，<code>not exists</code>归为另一类。</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查询公司管理者的employee_id，last_name，job_id，department_id信息</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token number">e</span><span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>last_name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>job_id<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees <span class="token number">e</span> <span class="token keyword">JOIN</span> employees m<span class="token keyword">ON</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>employee_id<span class="token punctuation">`</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>manager_id<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>department_id<span class="token keyword">FROM</span> employees <span class="token number">e</span><span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>employee_id<span class="token punctuation">`</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> manager_id        <span class="token keyword">FROM</span> employees        <span class="token punctuation">)</span>        <span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> department_id<span class="token keyword">FROM</span> employees <span class="token number">e1</span><span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span>        <span class="token keyword">FROM</span> employees <span class="token number">e2</span>        <span class="token keyword">WHERE</span> <span class="token number">e2</span><span class="token punctuation">.</span>manager_id <span class="token operator">=</span>        <span class="token number">e1</span><span class="token punctuation">.</span>employee_id<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">## 题目：查询departments表中，不存在于employees表中的部门的department_id和department_name</span><span class="token keyword">SELECT</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> departments <span class="token number">d</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> employees <span class="token number">e</span><span class="token keyword">ON</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span><span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>employee_id<span class="token punctuation">`</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token keyword">SELECT</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>department_name<span class="token keyword">FROM</span> departments <span class="token number">d</span> <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token number">e</span>        <span class="token keyword">WHERE</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需要注意，相关子查询的连接条件</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#15. 查询部门的部门号，其中不包括job_id是"ST_CLERK"的部门号</span><span class="token comment" spellcheck="true">#方法一：</span><span class="token keyword">SELECT</span> department_id<span class="token keyword">FROM</span> departments <span class="token number">d</span><span class="token keyword">WHERE</span> department_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">'ST_CLERK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> department_id<span class="token keyword">FROM</span> departments <span class="token number">d1</span> <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span>         <span class="token keyword">FROM</span> employees <span class="token number">e2</span>         <span class="token keyword">WHERE</span> <span class="token number">d1</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">e2</span><span class="token punctuation">.</span>department_id        <span class="token operator">AND</span> <span class="token number">e2</span><span class="token punctuation">.</span><span class="token punctuation">`</span>job_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'ST_CLERK'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> department_id <span class="token keyword">FROM</span> departments <span class="token number">d</span><span class="token keyword">WHERE</span> department_id <span class="token operator">NOT</span> <span class="token operator">IN</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id <span class="token keyword">FROM</span> employees <span class="token number">e2</span>    <span class="token keyword">WHERE</span> <span class="token number">e2</span><span class="token punctuation">.</span>job_id <span class="token operator">=</span> <span class="token string">'ST_CLERK'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#16. 选择所有没有管理者的员工的last_name</span><span class="token keyword">SELECT</span> last_name<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> manager_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token keyword">SELECT</span> last_name<span class="token keyword">FROM</span> employees <span class="token number">e1</span><span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> employees <span class="token number">e2</span><span class="token keyword">WHERE</span> <span class="token number">e1</span><span class="token punctuation">.</span>manager_id <span class="token operator">=</span> <span class="token number">e2</span><span class="token punctuation">.</span>employee_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#17．查询员工号、姓名、雇用时间、工资，其中员工的管理者为 'De Haan'</span><span class="token keyword">SELECT</span> <span class="token number">e1</span><span class="token punctuation">.</span>employee_id <span class="token punctuation">,</span> <span class="token number">e1</span><span class="token punctuation">.</span>last_name <span class="token punctuation">,</span> <span class="token number">e1</span><span class="token punctuation">.</span>hire_date <span class="token punctuation">,</span> <span class="token number">e1</span><span class="token punctuation">.</span>salary<span class="token keyword">FROM</span> employees <span class="token number">e1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> employee_id <span class="token keyword">FROM</span> employees <span class="token number">e2</span>        <span class="token keyword">WHERE</span> <span class="token number">e2</span><span class="token punctuation">.</span><span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'De Haan'</span>            <span class="token punctuation">)</span> <span class="token number">ee</span><span class="token keyword">WHERE</span> <span class="token number">e1</span><span class="token punctuation">.</span>manager_id <span class="token operator">=</span> <span class="token number">ee</span><span class="token punctuation">.</span>employee_id<span class="token comment" spellcheck="true">#方式1：</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> hire_date<span class="token punctuation">,</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> manager_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> employee_id<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'De Haan'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token number">e1</span><span class="token punctuation">.</span>employee_id <span class="token punctuation">,</span> <span class="token number">e1</span><span class="token punctuation">.</span>last_name <span class="token punctuation">,</span> <span class="token number">e1</span><span class="token punctuation">.</span>hire_date <span class="token punctuation">,</span> <span class="token number">e1</span><span class="token punctuation">.</span>salary<span class="token keyword">FROM</span> employees <span class="token number">e1</span><span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token number">e2</span>        <span class="token keyword">WHERE</span> <span class="token number">e2</span><span class="token punctuation">.</span><span class="token punctuation">`</span>last_name<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'De Haan'</span>        <span class="token operator">AND</span> <span class="token number">e1</span><span class="token punctuation">.</span>manager_id <span class="token operator">=</span> <span class="token number">e2</span><span class="token punctuation">.</span>employee_id    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相关更新"><a href="#相关更新" class="headerlink" title="相关更新"></a>相关更新</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637333822498-63721f3b-248e-4c41-93b7-11821d189a30.png" alt="img"></p><h4 id="相关删除"><a href="#相关删除" class="headerlink" title="相关删除"></a>相关删除</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637333835545-b9dcecf6-886b-44cb-93be-79d31f7039fc.png" alt="img"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>子查询适用的条件，除了<code>group by</code>和&#96;&#96;&#96;limit&#96;中不可使用子查询。其他情况都能使用子查询</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>存在聚合函数<span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token keyword">LEFT</span> <span class="token operator">/</span> <span class="token keyword">RIGHT</span><span class="token punctuation">)</span><span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ON</span> 多表的连接条件 <span class="token punctuation">(</span><span class="token keyword">LEFT</span> <span class="token operator">/</span> <span class="token keyword">RIGHT</span><span class="token punctuation">)</span><span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> 不包含聚合函数的过滤条件<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">HAVING</span> 包含聚合函数的过滤条件<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">ASC</span> <span class="token operator">/</span> <span class="token keyword">DESC</span> <span class="token punctuation">)</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637333868521-19599f42-2d56-4946-bd6b-3bc4788910a6.pdf">📎第09章_子查询.pdf</a></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="第08章：单行函数"><a href="#第08章：单行函数" class="headerlink" title="第08章：单行函数"></a>第08章：单行函数</h2><ul><li><p>操作数据对象</p></li><li><p>接受参数返回一个结果</p></li><li><p>只对一行进行变换</p></li><li><p>每行返回一个结果</p></li><li><p>可以嵌套</p></li><li><p>参数可以是一列或一个值</p></li></ul><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><h4 id="基本函数【重点】"><a href="#基本函数【重点】" class="headerlink" title="基本函数【重点】"></a>基本函数【重点】</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SIGN(X)</td><td>返回X的符号。正数返回1，负数返回-1，0返回0</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>CEIL(x)，CEILING(x)</td><td>返回大于或等于某个值的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于某个值的最大整数</td></tr><tr><td>LEAST(e1,e2,e3…)</td><td>返回列表中的最小值</td></tr><tr><td>GREATEST(e1,e2,e3…)</td><td>返回列表中的最大值</td></tr><tr><td>MOD(x,y)</td><td>返回X除以Y后的余数</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>RAND(x)</td><td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机 数</td></tr><tr><td>ROUND(x)</td><td>返回一个对x的值进行四舍五入后，最接近于X的整数</td></tr><tr><td>ROUND(x,y)</td><td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根。当X的值为负数时，返回NULL</td></tr></tbody></table><h4 id="角度与弧度互换函数"><a href="#角度与弧度互换函数" class="headerlink" title="角度与弧度互换函数"></a>角度与弧度互换函数</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>RADIANS(x)</td><td>将角度转化为弧度，其中，参数x为角度值</td></tr><tr><td>DEGREES(x)</td><td>将弧度转化为角度，其中，参数x为弧度值</td></tr></tbody></table><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>SIN(x)</td><td>返回x的正弦值，其中，参数x为弧度值</td></tr><tr><td>ASIN(x)</td><td>返回x的反正弦值，即获取正弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>COS(x)</td><td>返回x的余弦值，其中，参数x为弧度值</td></tr><tr><td>ACOS(x)</td><td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>TAN(x)</td><td>返回x的正切值，其中，参数x为弧度值</td></tr><tr><td>ATAN(x)</td><td>返回x的反正切值，即返回正切值为x的值</td></tr><tr><td>ATAN2(m,n)</td><td>返回两个参数的反正切值</td></tr><tr><td>COT(x)</td><td>返回x的余切值，其中，X为弧度值</td></tr></tbody></table><h4 id="指数与对数"><a href="#指数与对数" class="headerlink" title="指数与对数"></a>指数与对数</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>POW(x,y)，POWER(X,Y)</td><td>返回x的y次方</td></tr><tr><td>EXP(X)</td><td>返回e的X次方，其中e是一个常数，2.718281828459045</td></tr><tr><td>LN(X)，LOG(X)</td><td>返回以e为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG10(X)</td><td>返回以10为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG2(X)</td><td>返回以2为底的X的对数，当X &lt;&#x3D; 0 时，返回NULL</td></tr></tbody></table><h4 id="进制间的转换"><a href="#进制间的转换" class="headerlink" title="进制间的转换"></a>进制间的转换</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>BIN(x)</td><td>返回x的二进制编码</td></tr><tr><td>HEX(x)</td><td>返回x的十六进制编码</td></tr><tr><td>OCT(x)</td><td>返回x的八进制编码</td></tr><tr><td>CONV(x,f1,f2)</td><td>返回f1进制数变成f2进制数</td></tr></tbody></table><h3 id="字符串函数【重点】"><a href="#字符串函数【重点】" class="headerlink" title="字符串函数【重点】"></a>字符串函数【重点】</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ASCII(S)</td><td>返回字符串S中的第一个字符的ASCII码值</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td>CONCAT(s1,s2,……,sn)</td><td>连接s1,s2,……,sn为一个字符串</td></tr><tr><td>CONCAT_WS(x, s1,s2,……,sn)</td><td>同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</td></tr><tr><td>INSERT(str, idx, len, replacestr)</td><td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td></tr><tr><td>REPLACE(str, a, b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td>UPPER(s) 或 UCASE(s)</td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td>LOWER(s) 或LCASE(s)</td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td>LEFT(str,n)</td><td>返回字符串str最左边的n个字符</td></tr><tr><td>RIGHT(str,n)</td><td>返回字符串str最右边的n个字符</td></tr><tr><td>LPAD(str, len, pad)</td><td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td></tr><tr><td>RPAD(str ,len, pad)</td><td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串s开始与结尾的s1</td></tr><tr><td>TRIM(LEADING s1 FROM s)</td><td>去掉字符串s开始处的s1</td></tr><tr><td>TRIM(TRAILING s1 FROM s)</td><td>去掉字符串s结尾处的s1</td></tr><tr><td>REPEAT(str, n)</td><td>返回str重复n次的结果</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td>SUBSTR(s,index,len)</td><td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、 MID(s,n,len)相同</td></tr><tr><td>LOCATE(substr,str)</td><td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr IN str)、INSTR(str,substr)相同。未找到，返回0</td></tr><tr><td>ELT(m,s1,s2,…,sn)</td><td>返回指定位置的字符串，如果m&#x3D;1，则返回s1，如果m&#x3D;2，则返回s2，如 果m&#x3D;n，则返回sn</td></tr><tr><td>FIELD(s,s1,s2,…,sn)</td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分 隔的字符串</td></tr><tr><td>REVERSE(s)</td><td>返回s反转后的字符串</td></tr><tr><td>NULLIF(value1,value2)</td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回 value1</td></tr></tbody></table><p>注意：MySQL中，字符串的位置是从1开始的 </p><h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h3><h4 id="获取日期、时间"><a href="#获取日期、时间" class="headerlink" title="获取日期、时间"></a>获取日期、时间</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>CURDATE() ，CURRENT_DATE()</td><td>返回当前日期，只包含年、 月、日</td></tr><tr><td>CURTIME() ， CURRENT_TIME()</td><td>返回当前时间，只包含时、 分、秒</td></tr><tr><td>NOW() &#x2F; SYSDATE() &#x2F; CURRENT_TIMESTAMP() &#x2F; LOCALTIME() &#x2F; LOCALTIMESTAMP()</td><td>返回当前系统日期和时间</td></tr><tr><td>UTC_DATE()</td><td>返回UTC（世界标准时间） 日期</td></tr><tr><td>UTC_TIME()</td><td>返回UTC（世界标准时间） 时间</td></tr></tbody></table><h4 id="日期与时间戳的转换"><a href="#日期与时间戳的转换" class="headerlink" title="日期与时间戳的转换"></a>日期与时间戳的转换</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>UNIX_TIMESTAMP()</td><td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP() - &gt;1634348884</td></tr><tr><td>UNIX_TIMESTAMP(date)</td><td>将时间date以UNIX时间戳的形式返回。</td></tr><tr><td>FROM_UNIXTIME(timestamp)</td><td>将UNIX时间戳的时间转换为普通格式的时间</td></tr></tbody></table><h4 id="计算日期和时间的函数"><a href="#计算日期和时间的函数" class="headerlink" title="计算日期和时间的函数"></a>计算日期和时间的函数</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_ADD(datetime, INTERVAL expr type)， ADDDATE(date,INTERVAL expr type)</td><td>返回与给定日期时间相差INTERVAL时 间段的日期时间</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)， SUBDATE(date,INTERVAL expr type)</td><td>返回与date相差INTERVAL时间间隔的 日期</td></tr></tbody></table><p> <img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637240476304-dad60ae7-671a-4832-bfa1-61d51dd4265e.png" alt="img"></p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ADDTIME(time1,time2)</td><td>返回time1加上time2的时间。当time2为一个数字时，代表的是 秒 ，可以为负数</td></tr><tr><td>SUBTIME(time1,time2)</td><td>返回time1减去time2后的时间。当time2为一个数字时，代表的 是 秒 ，可以为负数</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1 - date2的日期间隔天数</td></tr><tr><td>TIMEDIFF(time1, time2)</td><td>返回time1 - time2的时间间隔</td></tr><tr><td>FROM_DAYS(N)</td><td>返回从0000年1月1日起，N天以后的日期</td></tr><tr><td>TO_DAYS(date)</td><td>返回日期date距离0000年1月1日的天数</td></tr><tr><td>LAST_DAY(date)</td><td>返回date所在月份的最后一天的日期</td></tr><tr><td>MAKEDATE(year,n)</td><td>针对给定年份与所在年份中的天数返回一个日期</td></tr><tr><td>MAKETIME(hour,minute,second)</td><td>将给定的小时、分钟和秒组合成时间并返回</td></tr><tr><td>PERIOD_ADD(time,n)</td><td>返回time加上n后的时间</td></tr></tbody></table><h4 id="日期的格式化与解析"><a href="#日期的格式化与解析" class="headerlink" title="日期的格式化与解析"></a>日期的格式化与解析</h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_FORMAT(date,fmt)</td><td>按照字符串fmt格式化日期date值</td></tr><tr><td>TIME_FORMAT(time,fmt)</td><td>按照字符串fmt格式化时间time值</td></tr><tr><td>GET_FORMAT(date_type,format_type)</td><td>返回日期字符串的显示格式</td></tr><tr><td>STR_TO_DATE(str, fmt)</td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><p> 上述 非<code>GET_FORMAT</code> 函数中fmt参数常用的格式符： </p><table><thead><tr><th>格 式 符</th><th>说明</th><th>格式 符</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4位数字表示年份</td><td>%y</td><td>表示两位数字表示年份</td></tr><tr><td>%M</td><td>月名表示月份（January,….）</td><td>%m</td><td>两位数字表示月份 （01,02,03。。。）</td></tr><tr><td>%b</td><td>缩写的月名（Jan.，Feb.，….）</td><td>%c</td><td>数字表示月份（1,2,3,…）</td></tr><tr><td>%D</td><td>英文后缀表示月中的天数 （1st,2nd,3rd,…）</td><td>%d</td><td>两位数字表示月中的天数(01,02…)</td></tr><tr><td>%e</td><td>数字形式表示月中的天数 （1,2,3,4,5…..）</td><td></td><td></td></tr><tr><td>%H</td><td>两位数字表示小数，24小时制 （01,02..）</td><td>%h 和%I</td><td>两位数字表示小时，12小时制 （01,02..）</td></tr><tr><td>%k</td><td>数字形式的小时，24小时制(1,2,3)</td><td>%l</td><td>数字形式表示小时，12小时制 （1,2,3,4….）</td></tr><tr><td>%i</td><td>两位数字表示分钟（00,01,02）</td><td>%S 和%s</td><td>两位数字表示秒(00,01,02…)</td></tr><tr><td>%W</td><td>一周中的星期名称（Sunday…）</td><td>%a</td><td>一周中的星期缩写（Sun.， Mon.,Tues.，..）</td></tr><tr><td>%w</td><td>以数字表示周中的天数 (0&#x3D;Sunday,1&#x3D;Monday….)</td><td></td><td></td></tr><tr><td>%j</td><td>以3位数字表示年中的天数(001,002…)</td><td>%U</td><td>以数字表示年中的第几周， （1,2,3。。）其中Sunday为周中第一 天</td></tr><tr><td>%u</td><td>以数字表示年中的第几周， （1,2,3。。）其中Monday为周中第一 天</td><td></td><td></td></tr><tr><td>%T</td><td>24小时制</td><td>%r</td><td>12小时制</td></tr><tr><td>%p</td><td>AM或PM</td><td>%%</td><td>表示%</td></tr></tbody></table><p> <code>GET_FORMAT</code>函数中<code>date_type</code>和<code>format_type</code>参数取值如下<br> <img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637240589899-86dd22d8-6326-4738-b3e4-6888df22819e.png" alt="img"></p><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value的值为TRUE，返回value1， 否则返回value2</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为NULL，返回value1，否 则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 …. [ELSE resultn] END</td><td>相当于Java的if…else if…else…</td></tr><tr><td>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><h3 id="加密解密函数"><a href="#加密解密函数" class="headerlink" title="加密解密函数"></a>加密解密函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>PASSWORD(str)</td><td>返回字符串str的加密版本，41位长的字符串。加密结果 不可 逆 ，常用于用户的密码加密</td></tr><tr><td>MD5(str)</td><td>返回字符串str的md5加密后的值，也是一种加密方式。若参数为 NULL，则会返回NULL</td></tr><tr><td>SHA(str)</td><td>从原明文密码str计算并返回加密后的密码字符串，当参数为 NULL时，返回NULL。 SHA加密算法比MD5更加安全 。</td></tr><tr><td>ENCODE(value,password_seed)</td><td>返回使用password_seed作为加密密码加密value</td></tr><tr><td>DECODE(value,password_seed)</td><td>返回使用password_seed作为加密密码解密value</td></tr></tbody></table><p><code>PASSWORD(str)、ENCODE(value,password_seed) 、DECODE(value,password_seed) </code>在MySQL8.0中已弃用</p><h3 id="MySQL信息函数"><a href="#MySQL信息函数" class="headerlink" title="MySQL信息函数"></a>MySQL信息函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>VERSION()</td><td>返回当前MySQL的版本号</td></tr><tr><td>CONNECTION_ID()</td><td>返回当前MySQL服务器的连接数</td></tr><tr><td>DATABASE()，SCHEMA()</td><td>返回MySQL命令行当前所在的数据库</td></tr><tr><td>USER()，CURRENT_USER()、SYSTEM_USER()， SESSION_USER()</td><td>返回当前连接MySQL的用户名，返回结果格式为 “主机名@用户名”</td></tr><tr><td>CHARSET(value)</td><td>返回字符串value自变量的字符集</td></tr><tr><td>COLLATION(value)</td><td>返回字符串value的比较规则</td></tr></tbody></table><h3 id="参考文献-1"><a href="#参考文献-1" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637236469937-3241dea1-a8c6-455b-9cd3-1d61b082ce62.pdf">📎第07章_单行函数.pdf</a></p><h2 id="第09章：聚合函数【多行函数】"><a href="#第09章：聚合函数【多行函数】" class="headerlink" title="第09章：聚合函数【多行函数】"></a>第09章：聚合函数【多行函数】</h2><h3 id="1-聚合函数"><a href="#1-聚合函数" class="headerlink" title="1 聚合函数"></a>1 聚合函数</h3><p>聚合函数作用于一组数据，并对一组数据返回一个值 </p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637289312967-b2d640a1-c673-46d0-8047-1ce1f3f2081a.png" alt="img"></p><h4 id="1-1-AVG和SUM函数"><a href="#1-1-AVG和SUM函数" class="headerlink" title="1.1 AVG和SUM函数"></a>1.1 AVG和SUM函数</h4><p>可以对数值型数据使用AVG 和 SUM 函数<br> <code>null</code>值不会计算在内</p><h4 id="1-2-MIN和MAX函数"><a href="#1-2-MIN和MAX函数" class="headerlink" title="1.2 MIN和MAX函数"></a>1.2 MIN和MAX函数</h4><p>可以对任意数据类型的数据使用 MIN 和 MAX 函数 </p><h4 id="1-3-COUNT函数"><a href="#1-3-COUNT函数" class="headerlink" title="1.3 COUNT函数"></a>1.3 COUNT函数</h4><ul><li>COUNT(*)返回表中记录总数，适用于任意数据类型 </li><li>COUNT(expr) 返回expr不为空的记录总数</li></ul><p>不能计算<code>null</code>值</p><p>如果需要统计表中的记录数，使用COUNT(* )、COUNT (1)、COUNT (具体字段)哪个效率更高呢?</p><ul><li>如果使用的是MyISAM存储引擎，则三者效率相同，都是O(1)</li><li>如果使用的是InnoDB存储引擎，则三者效率:COUNT(*) &#x3D; COUNT(1)&gt; COUNT(字段)</li></ul><h3 id="2-group-by"><a href="#2-group-by" class="headerlink" title="2 group by"></a>2 group by</h3><p>顺序问题：</p><pre><code>select` &gt; `where`&gt; `group by`&gt;`order by` &gt;`limitSELECT column, group_function(column)FROM table[WHERE condition][GROUP BY group_by_expression][ORDER BY column];</code></pre><ul><li><p>单列分组</p></li><li><p>多列分组 </p></li><li><p>WITH ROLLUP</p></li></ul><p>使用 WITH ROLLUP 关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量<br>注意：<br>当使用<code>ROLLUP</code>时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥的。 </p><h3 id="3-having"><a href="#3-having" class="headerlink" title="3 having"></a>3 having</h3><ul><li><p>当出现组合函数<code>group by</code>或者聚合函数，则必须使用<code>having</code>来替换<code>where</code>，并且<code>having</code>需要声明在<code>group by</code>的后面。否则会报错。</p></li><li><p>当过滤条件没有聚合函数，则此过滤条件可以声明在<code>having</code>来替换<code>where</code>中，建议声明在&#96;&#96;&#96;where&#96;中。</p></li><li><p>非法使用聚合函数 ： 不能在 WHERE 子句中使用聚合函数</p></li></ul><h3 id="4-SQL底层执行原理"><a href="#4-SQL底层执行原理" class="headerlink" title="4 SQL底层执行原理"></a>4 SQL底层执行原理</h3><h4 id="4-1-SELECT语句的完整结构"><a href="#4-1-SELECT语句的完整结构" class="headerlink" title="4.1 SELECT语句的完整结构"></a>4.1 SELECT语句的完整结构</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#sql92语法：</span><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>存在聚合函数<span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> 多表的连接条件 <span class="token operator">AND</span> 不包含聚合函数的过滤条件<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">HAVING</span> 包含聚合函数的过滤条件<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">ASC</span> <span class="token operator">/</span> <span class="token keyword">DESC</span> <span class="token punctuation">)</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#sql99语法：</span><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>存在聚合函数<span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token keyword">LEFT</span> <span class="token operator">/</span> <span class="token keyword">RIGHT</span><span class="token punctuation">)</span><span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ON</span> 多表的连接条件 <span class="token punctuation">(</span><span class="token keyword">LEFT</span> <span class="token operator">/</span> <span class="token keyword">RIGHT</span><span class="token punctuation">)</span><span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> 不包含聚合函数的过滤条件<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">HAVING</span> 包含聚合函数的过滤条件<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">ASC</span> <span class="token operator">/</span> <span class="token keyword">DESC</span> <span class="token punctuation">)</span><span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-SQL语句的执行顺序"><a href="#4-2-SQL语句的执行顺序" class="headerlink" title="4.2 SQL语句的执行顺序"></a>4.2 SQL语句的执行顺序</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#FROM ...,...-> ON -> (LEFT/RIGNT  JOIN) -> WHERE -> GROUP BY -> HAVING -> SELECT -> DISTINCT -> </span><span class="token comment" spellcheck="true"># ORDER BY -> LIMIT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="参考文献-2"><a href="#参考文献-2" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637236674897-ad3e6bf2-cc37-4ca3-bf3b-e2f17f12357f.pdf">📎第08章_聚合函数.pdf</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="SQL之DDL、DML、DCL使用篇"><a href="#SQL之DDL、DML、DCL使用篇" class="headerlink" title="SQL之DDL、DML、DCL使用篇"></a>SQL之DDL、DML、DCL使用篇</h1><ul><li><p><strong>DDL</strong>（Data Definition Languages、数据定义语言）</p></li><li><ul><li>这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。</li><li>主要的语句<strong>关键字</strong>包括 CREATE 、RENAME、TRUNCATE、 DROP 、 ALTER 等。</li></ul></li><li><p><strong>DML</strong>（Data Manipulation Language、数据操作语言）</p></li><li><ul><li>用于添加、删除、更新和查询数据库记录，并检查数据完整性。</li><li>主要的语句<strong>关键字</strong>包括 INSERT 、 DELETE 、 UPDATE 、 SELECT 等。</li></ul></li><li><p><strong>DCL</strong>（Data Control Language、数据控制语言）</p></li><li><ul><li>用于定义数据库、表、字段、用户的访问权限和安全级别。</li><li>主要的语句<strong>关键字</strong>包括 GRANT 、 REVOKE 、 COMMIT 、 ROLLBACK 、 SAVEPOINT 等。</li></ul></li></ul><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。<br>还有单独将 COMMIT 、 ROLLBACK 取出来称为TCL （Transaction Control Language，事务控制语言）。 </p><h2 id="第10章：创建和管理表【DDL】"><a href="#第10章：创建和管理表【DDL】" class="headerlink" title="第10章：创建和管理表【DDL】"></a>第10章：创建和管理表【DDL】</h2><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul><li><p>数据库名、表名不得超过30个字符，变量名限制为29个</p></li><li><p>必须只能包含 A–Z, a–z, 0–9, _共63个字符</p></li><li><p>数据库名、表名、字段名等对象名中间不要包含空格</p></li><li><p>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</p></li><li><p>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;（着重号）引起来</p></li><li><p>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据</p></li><li><p>类型在一个表里是整数，那在另一个表里可就别变成字符型了</p></li></ul><h3 id="创建和管理数据库"><a href="#创建和管理数据库" class="headerlink" title="创建和管理数据库"></a>创建和管理数据库</h3><p><strong>创建</strong></p><ul><li>创建数据库</li></ul><pre><code>CREATE DATABASE IF NOT EXISTS 数据库名 CHARACTER SET 字符集;</code></pre><p><strong>查看</strong></p><ul><li>查看当前所有的数据库</li></ul><pre><code>SHOW DATABASES;</code></pre><ul><li>查看数据库的创建信息<br><code> SHOW CREATE DATABASE 数据库名;或者SHOW CREATE DATABASE 数据库名\G</code> </li><li>查看指定库下所有的表</li></ul><pre><code>SHOW TABLES FROM 数据库名; </code></pre><ul><li>查看当前正在使用的数据库<br><code>SELECT DATABASE();</code></li></ul><p><strong>修改</strong></p><pre><code>ALTER DATABASE 数据库名 CHARACTER SET 字符集; #比如：gbk、utf8等</code></pre><p><strong>删除</strong> </p><pre><code>DROP DATABASE IF EXISTS 数据库名; </code></pre><h3 id="创建和管理表"><a href="#创建和管理表" class="headerlink" title="创建和管理表"></a>创建和管理表</h3><p><strong>常用类型</strong></p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>INT</td><td>从-2^31到2^31-1的整型数据。存储大小为 4个字节</td></tr><tr><td>CHAR(size)</td><td>定长字符数据。若未指定，默认为1个字符，最大长度255</td></tr><tr><td>VARCHAR(size)</td><td>可变长字符数据，根据字符串实际长度保存，必须指定长度</td></tr><tr><td>FLOAT(M,D)</td><td>单精度，占用4个字节，M&#x3D;整数位+小数位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30， 默认M+D&lt;&#x3D;6</td></tr><tr><td>DOUBLE(M,D)</td><td>双精度，占用8个字节，D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30，默认M+D&lt;&#x3D;15</td></tr><tr><td>DECIMAL(M,D)</td><td>高精度小数，占用M+2个字节，D&lt;&#x3D;M&lt;&#x3D;65，0&lt;&#x3D;D&lt;&#x3D;30，最大取值范围与DOUBLE 相同。</td></tr><tr><td>DATE</td><td>日期型数据，格式’YYYY-MM-DD’</td></tr><tr><td>BLOB</td><td>二进制形式的长文本数据，最大可达4G</td></tr><tr><td>TEXT</td><td>长文本数据，最大可达4G</td></tr></tbody></table><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><pre><code>create table 表名</code></pre><ol><li>初始创建</li><li>通过已有表创建，会包含已有表的数据  使用<code>AS</code>+ 查询语句</li></ol><p><code>SHOW CREATE TABLE 表名\G </code> 查看表的结构</p><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><pre><code>alter tabel 表名</code></pre><p><strong>添加一个字段</strong></p><pre><code>ADDALTER TABLE 表名 ADD 【COLUMN】 字段名 字段类型 【FIRST|AFTER 字段名】;ALTER TABLE dept80ADD job_id varchar(15);</code></pre><p><strong>修改一个字段</strong></p><pre><code>MODIFYALTER TABLE 表名 MODIFY 【COLUMN】 字段名1 字段类型 【DEFAULT 默认值】【FIRST|AFTER 字段名2】;ALTER TABLE dept80MODIFY last_name VARCHAR(30);</code></pre><p><strong>重命名一个字段</strong></p><pre><code>changeALTER TABLE 表名 CHANGE 【column】 列名 新列名 新数据类型;ALTER TABLE dept80CHANGE department_name dept_name varchar(15);</code></pre><p><strong>删除一个字段</strong></p><pre><code>dropALTER TABLE 表名 DROP 【COLUMN】字段名ALTER TABLE dept80DROP COLUMN job_id;</code></pre><p><strong>重命名表</strong></p><pre><code>rename# 方式一ALTER table deptRENAME [TO] detail_dept; -- [TO]可以省略# 方式二RENAME TABLE empTO myemp;</code></pre><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><pre><code>drop tabelDROP TABLE [IF EXISTS] 数据表1 [, 数据表2, …, 数据表n];DROP TABLE dept80;</code></pre><p>表结构和表数据删除</p><h4 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h4><pre><code>truncate tabelTRUNCATE TABLE detail_dept;</code></pre><p>只删除表数据。</p><p>TRUNCATE语句不能回滚，而使用 DELETE 语句删除数据，可以回滚 </p><p><strong>DDL 和 DML 的说明</strong></p><p>① DDL的操作一旦执行，就不可回滚。指令SET autocommit &#x3D; FALSE对DDL操作失效。(因为在执行完DDL操作之后，一定<strong>会执行一次COMMIT</strong>。而此COMMIT操作不受SET autocommit &#x3D; FALSE影响的。)</p><p>② DML的操作默认情况，一旦执行，也是不可回滚的。但是，如果在执行DML之前，执行了SET autocommit &#x3D; FALSE，则执行的DML操作就可以实现回滚。</p><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637398612195-784774df-a8e2-4496-97ce-c437dec5e565.pdf">📎第10章_创建和管理表.pdf</a></p><h2 id="第11章：数据处理之增删改【DML】"><a href="#第11章：数据处理之增删改【DML】" class="headerlink" title="第11章：数据处理之增删改【DML】"></a>第11章：数据处理之增删改【DML】</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><pre><code>inset into</code></pre><h4 id="values添加"><a href="#values添加" class="headerlink" title="values添加"></a>values添加</h4><p>字符和日期型数据应包含在单引号中 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 方式一 需要知道各个字段的位置</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> departments<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token string">'Pub'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1700</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 方式二 指定字段插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> column2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> columnn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1 <span class="token punctuation">[</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> valuen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> departments<span class="token punctuation">(</span>department_id<span class="token punctuation">,</span> department_name<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">'IT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 方式三 同时插入多条记录</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token keyword">VALUES</span><span class="token punctuation">(</span>value1 <span class="token punctuation">[</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> valuen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>value1 <span class="token punctuation">[</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> valuen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>……<span class="token punctuation">(</span>value1 <span class="token punctuation">[</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> valuen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 或者</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span>column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> column2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> columnn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span>value1 <span class="token punctuation">[</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> valuen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>value1 <span class="token punctuation">[</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> valuen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>……<span class="token punctuation">(</span>value1 <span class="token punctuation">[</span><span class="token punctuation">,</span>value2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> valuen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp<span class="token punctuation">(</span>emp_id<span class="token punctuation">,</span>emp_name<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">'shkstart'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句，但是多行的INSERT语句在处理过程中 效率更高 。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句快，所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。 </p><h4 id="查询结果插入到新表"><a href="#查询结果插入到新表" class="headerlink" title="查询结果插入到新表"></a>查询结果插入到新表</h4><ul><li><p>在 INSERT 语句中加入子查询 </p></li><li><p>不必书写 VALUES 子句 </p></li><li><p>子查询中的值列表应与 INSERT 子句中的列名对应</p></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 目标表名<span class="token punctuation">(</span>tar_column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> tar_column2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> tar_columnn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span><span class="token punctuation">(</span>src_column1 <span class="token punctuation">[</span><span class="token punctuation">,</span> src_column2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> src_columnn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> 源表名<span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp2<span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sales_reps<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> commission_pct<span class="token punctuation">)</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> commission_pct<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> job_id <span class="token operator">LIKE</span> <span class="token string">'%REP%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><pre><code>update ... set ... where</code></pre><ul><li><p>可以一次更新多条数据 </p></li><li><p>如果需要回滚数据，需要保证在DML前，进行设置：<code>SET AUTOCOMMIT = FALSE </code></p></li><li><p>使用 <code>WHERE</code>子句指定需要更新的数据</p></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name<span class="token keyword">SET</span> column1<span class="token operator">=</span>value1<span class="token punctuation">,</span> column2<span class="token operator">=</span>value2<span class="token punctuation">,</span> … <span class="token punctuation">,</span> <span class="token keyword">column</span><span class="token operator">=</span>valuen<span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span><span class="token keyword">UPDATE</span> employees<span class="token keyword">SET</span> department_id <span class="token operator">=</span> <span class="token number">70</span><span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">113</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre><code>delete from DELETE FROM table_name [WHERE &lt;condition&gt;];DELETE FROM departmentsWHERE department_name = &#39;Finance&#39;;# 如果省略 WHERE 子句，则表中的全部数据将被删除DELETE FROM copy_emp;</code></pre><h3 id="参考文献-3"><a href="#参考文献-3" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637408500502-722c08f2-a18c-429e-89cb-66acb2720e41.pdf">📎第11章_数据处理之增删改.pdf</a></p><h2 id="第12章：MySQL数据类型精讲"><a href="#第12章：MySQL数据类型精讲" class="headerlink" title="第12章：MySQL数据类型精讲"></a>第12章：MySQL数据类型精讲</h2><ul><li><p>在定义数据类型时，如果确定是 整数 ，就用 <code>INT</code> ； </p></li><li><p>如果是 小数 ，一定用定点数类型<code>DECIMAL(M,D)</code> ； </p></li><li><p>如果是日期与时间，就用 <code>DATETIME</code> 。</p></li></ul><p>这样做的好处是，首先确保你的系统不会因为数据类型定义出错。不过，凡事都是有两面的，可靠性好，并不意味着高效。比如，<code>TEXT</code> 虽然使用方便，但是效率不如<code> CHAR(M)</code> 和 <code>VARCHAR(M)</code>。 </p><p><strong>阿里巴巴《Java开发手册》之MySQL数据库：</strong></p><ul><li><p>任何字段如果为非负数，必须是 UNSIGNED</p></li><li><p>【 强制 】小数类型为 DECIMAL，禁止使用 FLOAT 和 DOUBLE。</p></li><li><ul><li>说明：在存储的时候，FLOAT 和 DOUBLE 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 DECIMAL 的范围，建议将数据拆成整数和小数并分开存储。</li></ul></li><li><p>【 强制 】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。</p></li><li><p>【 强制 】VARCHAR 是可变长字符串，不预先分配存储空间，长度不要超过 5000。如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率</p></li></ul><h3 id="MySQL中的数据类型"><a href="#MySQL中的数据类型" class="headerlink" title="MySQL中的数据类型"></a>MySQL中的数据类型</h3><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类 型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值类型：GEOMETRY、POINT、LINESTRING、POLYGON； 集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、 GEOMETRYCOLLECTION</td></tr></tbody></table><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p><code>TINYINT </code>：一般用于<strong>枚举数据</strong>，比如系统设定取值范围很小且固定的场景。<br><code>SMALLINT</code> ：可以用于<strong>较小范围的统计数据</strong>，比如统计工厂的固定资产库存数量等。<br><code>MEDIUMINT</code> ：用于<strong>较大整数</strong>的计算，比如车站每日的客流量等。<br><code>INT、INTEGER</code> ：取值范围足够大，一般情况下不用考虑超限问题，<strong>用得最多</strong>。比如商品编号。<br><code>BIGINT</code> ：只有当你处理<strong>特别巨大的整数</strong>时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</p><p>系统故障产生的成本远远超过增加几个字段存储空间所产生的成本 </p><p>首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间 </p><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128~127</td><td>0~255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768~32767</td><td>0~65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608~8388607</td><td>0~16777215</td></tr><tr><td>INT、INTEGER</td><td>4</td><td>-2147483648~2147483647</td><td>0~4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808~9223372036854775807</td><td>0~18446744073709551615</td></tr></tbody></table><ul><li>指定<strong>宽度</strong> <code>M</code></li></ul><p>可以指定数字的宽度用<code>M</code>表示，需要配合<code>zerofill</code> 使用。不足位用0填充。并且当数字宽度超过<code>M</code>时，默认按照数值原有宽度显示。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_int1 <span class="token punctuation">(</span> x <span class="token keyword">TINYINT</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token keyword">SMALLINT</span><span class="token punctuation">,</span> z <span class="token keyword">MEDIUMINT</span><span class="token punctuation">,</span> m <span class="token keyword">INT</span><span class="token punctuation">,</span> n <span class="token keyword">BIGINT</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># mysql5 中表结构会显示宽度</span><span class="token comment" spellcheck="true"># mysql8 中不会显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>无符号</strong><code>unsigned</code> 。无符号最大宽度会少一位，原最高表示符号。</li><li><strong>零填充</strong><code>zerofull</code>: 某列是<code>ZEROFILL</code>，那么MySQL会自动为当前列添加<code>UNSIGNED</code>属性</li></ul><p><code>int(M)</code><strong>，必须和</strong><code>UNSIGNED</code> <code>ZEROFILL</code><strong>一起使用才有意义</strong> <strong>,否则当超过m时，按实际位数存储，并不再补零。</strong></p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637465490676-d0c397d2-831a-4fef-bcb4-73b903b6c05c.png" alt="img"></p><p>浮点数是不准确的，所以我们要避免使用“&#x3D;”来判断两个数是否相等 </p><p>小数超了就四舍五入，整数超了就会报错</p><h3 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h3><table><thead><tr><th>数据类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td>DECIMAL(M,D),DEC,NUMERIC</td><td>M+2字节</td><td>有效范围由M和D决定</td></tr></tbody></table><p>以<code>字符串</code>的形式进行存储,结果是精确的。<br> 有效的数据范围由M和D决定。</p><p><strong>浮点数 vs 定点数</strong> </p><ul><li><p>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）</p></li><li><p>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉及金额计算的场景）</p></li></ul><h3 id="位类型"><a href="#位类型" class="headerlink" title="位类型"></a>位类型</h3><table><thead><tr><th>二进制字符串类型</th><th>长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>BIT(M)</td><td>M</td><td>1 &lt;&#x3D; M &lt;&#x3D; 64</td><td>约为(M + 7)&#x2F;8个字节</td></tr></tbody></table><ul><li>使用<code>b+0</code>查询数据时，可以直接查询出存储的<strong>十进制数据</strong>的值 </li><li>默认是<strong>1位</strong>。当超过指定位数会出现错误</li></ul><h3 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h3><ul><li><p>用得最多的日期时间类型，就是 <code>DATETIME</code>  </p></li><li><p>一般存注册时间、商品发布时间等，不建议使用DATETIME存储，而是使用<code>时间戳</code> ，因为DATETIME虽然直观，但不便于计算。 </p></li><li><ul><li><code>时间戳</code>的使用 可以用<code>bigint </code>中 使用<code> select unix_timestamp()</code>添加</li></ul></li><li><p><code>YEAR</code> 类型通常用来表示<strong>年</strong></p></li><li><p><code>DATE </code>类型通常用来表示<strong>年、月、日</strong></p></li><li><p><code>TIME </code>类型通常用来表示<strong>时、分、秒</strong></p></li><li><p><code>DATETIME </code>类型通常用来表示<strong>年、月、日、时、分、秒</strong></p></li><li><p><code>TIMESTAMP </code>类型通常用来表示<strong>带时区的年、月、日、时、分、秒</strong></p></li></ul><p><strong>Date格式</strong>为 <code>YYYY-MM-DD </code></p><p>以 <code>YYYY-MM-DD </code>或 <code>YYYYMMDD</code> 格式表示的字符串日期，最小取值为1000-01-01，最大取值为9999-12-03。<code>YYYYMMDD</code>格式会被转化为YYYY-MM-DD格式。</p><p>以 YY-MM-DD 格式或者 YYMMDD 格式表示的字符串日期，此格式中，年份为两位数值或字符串满足YEAR类型的格式条件为：当年份取值为00到69时，会被转化为2000到2069；当年份取值为70到99时，会被转化为1970到1999。</p><p>使用 CURRENT_DATE() 或者 NOW() 函数，会插入当前系统的日期 </p><table><thead><tr><th>类型</th><th>名称</th><th>字 节</th><th>日期格式</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>1</td><td>YYYY或YY</td><td>1901</td><td>2155</td></tr><tr><td>TIME</td><td>时间</td><td>3</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>DATE</td><td>日期</td><td>3</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-03</td></tr><tr><td>DATETIME</td><td>日期 时间</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>日期 时间</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:00 UTC</td><td>2038-01-19 03:14:07UTC</td></tr></tbody></table><h3 id="文本字符串类型"><a href="#文本字符串类型" class="headerlink" title="文本字符串类型"></a>文本字符串类型</h3><h4 id="char和varchar类型"><a href="#char和varchar类型" class="headerlink" title="char和varchar类型"></a>char和varchar类型</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637468228155-fb8dd343-765b-4e66-b70f-f000e979d7f4.png" alt="img"></p><p>char 默认长度为1</p><p>varchar 必须指定长度</p><table><thead><tr><th>类型</th><th>特点</th><th>空间上</th><th>时间上</th><th>适用场景</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>浪费存储空间</td><td>效率高</td><td>存储不大，速度要求高</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>节省存储空间</td><td>效率低</td><td>非CHAR的情况</td></tr></tbody></table><p> <strong>哪些情况使用</strong> <code>**CHAR**</code> <strong>或</strong> <code>**VARCHAR**</code> <strong>更好</strong> </p><ul><li><p>存储很短的信息</p></li><li><p>固定长度</p></li><li><p>十分频繁改变的column</p></li><li><p>根据存储引擎</p></li><li><ul><li><code>MyISAM</code>，使用固定长度(<code>CHAR</code>) </li><li><code>MEMORY</code>, 使用固定长度的数据行存储。都处理为<code>char</code>类型</li></ul></li><li><ul><li><code>InnoDB</code>，建议使用<code>VARCHAR</code>类型</li></ul></li></ul><h4 id="text类型"><a href="#text类型" class="headerlink" title="text类型"></a>text类型</h4><p>由于实际存储的长度不确定，MySQL 不允许 TEXT 类型的字段做主键。遇到这种情况，你只能采用<code>CHAR(M)</code>，或者 <code>VARCHAR(M)</code>。 </p><p>不是特别大的内容，建议使用CHAR，VARCHAR来代替 </p><p>频繁使用的表不建议包含<strong>TEXT</strong>类型字段 </p><table><thead><tr><th>文本字符串类 型</th><th>特点</th><th>长 度</th><th>长度范围</th><th>占用的存储空 间</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>小文本、可变长 度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 255</td><td>L + 2 个字节</td></tr><tr><td>TEXT</td><td>文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMTEXT</td><td>中等文本、可变 长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 16777215</td><td>L + 3 个字节</td></tr><tr><td>LONGTEXT</td><td>大文本、可变长 度</td><td>L</td><td>0 &lt;&#x3D; L&lt;&#x3D; 4294967295（相当于 4GB）</td><td>L + 4 个字节</td></tr></tbody></table><h3 id="ENUM类型"><a href="#ENUM类型" class="headerlink" title="ENUM类型"></a>ENUM类型</h3><table><thead><tr><th>文本字符串类型</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>ENUM</td><td>L</td><td>1 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>1或2个字节</td></tr></tbody></table><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_enum<span class="token punctuation">(</span>season <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">,</span><span class="token string">'夏'</span><span class="token punctuation">,</span><span class="token string">'秋'</span><span class="token punctuation">,</span><span class="token string">'冬'</span><span class="token punctuation">,</span><span class="token string">'unknow'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'春'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'秋'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 忽略大小写</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'UNKNOW'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 允许按照角标的方式获取指定索引位置的枚举值</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Data truncated for column 'season' at row 1</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'ab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 当ENUM类型的字段没有声明为NOT NULL时，插入NULL也是有效的</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SET类型"><a href="#SET类型" class="headerlink" title="SET类型"></a>SET类型</h3><p>可以包含0个或多个成员，但成员个数的上限为 64  </p><table><thead><tr><th><strong>成员个数范围（<strong><strong>L</strong></strong>表示实际成员个数）</strong></th><th><strong>占用的存储空间</strong></th></tr></thead><tbody><tr><td>1 &lt;&#x3D; L &lt;&#x3D; 8</td><td>1个字节</td></tr><tr><td>9 &lt;&#x3D; L &lt;&#x3D; 16</td><td>2个字节</td></tr><tr><td>17 &lt;&#x3D; L &lt;&#x3D; 24</td><td>3个字节</td></tr><tr><td>25 &lt;&#x3D; L &lt;&#x3D; 32</td><td>4个字节</td></tr><tr><td>33 &lt;&#x3D; L &lt;&#x3D; 64</td><td>8个字节</td></tr></tbody></table><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 创建表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_set<span class="token punctuation">(</span>s <span class="token keyword">SET</span> <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'A,B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#插入重复的SET类型成员时，MySQL会自动删除重复的成员</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'A,B,C,A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#向SET类型的字段插入SET成员中不存在的值时，MySQL会抛出错误。</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'A,B,C,D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> test_set<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二进制字符串类型"><a href="#二进制字符串类型" class="headerlink" title="二进制字符串类型"></a>二进制字符串类型</h3><h4 id="BINARY与VARBINARY类型"><a href="#BINARY与VARBINARY类型" class="headerlink" title="BINARY与VARBINARY类型"></a>BINARY与VARBINARY类型</h4><p><code>BINARY</code>和<code>VARBINARY</code>类似于<code>CHAR</code>和<code>VARCHAR</code>，只是它们<strong>存储的是二进制字符串。</strong> </p><ul><li><code>BINARY (M)</code>为固定长度的二进制字符串。<code>M</code>为最大存储字节数，未指明则存储1个字节。</li><li><code>VARBINARY</code>必须指明<code>M</code>，除了存储数据本身外，还需要1或2个字节来存储数据的字节数</li></ul><table><thead><tr><th><strong>二进制字符串类型</strong></th><th><strong>特点</strong></th><th><strong>值的长度</strong></th><th><strong>占用空间</strong></th></tr></thead><tbody><tr><td>BINARY(M)</td><td>固定长度</td><td>M （0 &lt;&#x3D; M &lt;&#x3D; 255）</td><td>M个字节</td></tr><tr><td>VARBINARY(M)</td><td>可变长度</td><td>M（0 &lt;&#x3D; M &lt;&#x3D; 65535）</td><td>M+1个字节</td></tr></tbody></table><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_binary1<span class="token punctuation">(</span><span class="token number">f1</span> <span class="token keyword">BINARY</span><span class="token punctuation">,</span><span class="token number">f2</span> <span class="token keyword">BINARY</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># f3 VARBINARY,</span><span class="token number">f4</span> <span class="token keyword">VARBINARY</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_binary1<span class="token punctuation">(</span><span class="token number">f1</span><span class="token punctuation">,</span><span class="token number">f2</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_binary1<span class="token punctuation">(</span><span class="token number">f1</span><span class="token punctuation">,</span><span class="token number">f2</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'尚'</span><span class="token punctuation">,</span><span class="token string">'尚'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#失败</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_binary1<span class="token punctuation">(</span><span class="token number">f2</span><span class="token punctuation">,</span><span class="token number">f4</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'ab'</span><span class="token punctuation">,</span><span class="token string">'ab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> LENGTH<span class="token punctuation">(</span><span class="token number">f2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>LENGTH<span class="token punctuation">(</span><span class="token number">f4</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">FROM</span> test_binary1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------------+</span><span class="token operator">|</span> LENGTH<span class="token punctuation">(</span><span class="token number">f2</span><span class="token punctuation">)</span> <span class="token operator">|</span> LENGTH<span class="token punctuation">(</span><span class="token number">f4</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------------+</span><span class="token operator">|</span> <span class="token number">3</span>                  <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span>                  <span class="token operator">|</span> <span class="token number">2</span>          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 23行的 3【f2 BINARY(3)】 和 2【f4 VARBINARY(10)】 是根据定义的长度指定的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BLOB类型"><a href="#BLOB类型" class="headerlink" title="BLOB类型"></a>BLOB类型</h4><p>是二进制大对象 ，容纳可变数量的数据。可以存储一个二进制的大对象，比如 <code>图片、音频和视频</code> 等 </p><p>实际工作中，往往不会在MySQL数据库中使用BLOB类型存储大对象数据，通常会将<code>图片、音频和视频文件</code>存储到 <code>服务器的磁盘上</code> ，并将图片、音频和视频的<strong>访问路径存储到MySQL中</strong> </p><table><thead><tr><th>二进制字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 255</td><td>L + 1 个字节</td></tr><tr><td>BLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 65535（相当于64KB）</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 16777215 （相当于16MB）</td><td>L + 3 个字节</td></tr><tr><td>LONGBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 4294967295（相当于4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p> <strong>TEXT和BLOB的使用注意事项</strong><br> 在使用text和blob字段类型时要注意以下几点，以便更好的发挥数据库的性能。</p><p>① BLOB和TEXT值也会引起自己的一些问题，特别是执行了大量的删除或更新操作的时候。**删除这种值会在数据表中留下很大的” 空洞 “**，以后填入这些”空洞”的记录可能长度不同。为了提高性能，建议定期使用<code> OPTIMIZE TABLE</code> 功能对这类表进行 <code>碎片整理</code> 。</p><p>② 如果需要对大文本字段进行模糊查询，MySQL 提供了 <code>前缀索引</code> 。但是仍然要在不必要的时候<code>避免检索大型的BLOB或TEXT值</code>。例如，SELECT * 查询就不是很好的想法，除非你能够确定作为约束条件的WHERE子句只会找到所需要的数据行。否则，你可能毫无目的地在网络上传输大量的值。</p><p>③ 把BLOB或TEXT列 <code>分离到单独的表</code> 中。在某些环境中，如果把这些数据列移动到第二张数据表中，可以让你把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会 <code>减少主表中的碎片</code> ，使你得到固定长度数据行的性能优势。它还使你在主数据表上运行 SELECT * 查询的时候不会通过网络传输大量的BLOB或TEXT值。 </p><h3 id="JSON类型"><a href="#JSON类型" class="headerlink" title="JSON类型"></a>JSON类型</h3><p>JSON（JavaScript Object Notation）是一种轻量级的 <code>数据交换格式</code> 。JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式 </p><p>通过“-&gt;”和“-&gt;&gt;”符号，从JSON字段中正确查询出了指定的JSON数据的值 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_json <span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'{"name":"songhk", "age":18, "address":{"province":"beijing","city":"beijing"}}'</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> test_json<span class="token keyword">SELECT</span> js <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'$.name'</span> <span class="token keyword">AS</span> NAME<span class="token punctuation">,</span>js <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'$.age'</span> <span class="token keyword">AS</span> age <span class="token punctuation">,</span>js <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'$.address.province'</span><span class="token keyword">AS</span> province<span class="token punctuation">,</span> js <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'$.address.city'</span> <span class="token keyword">AS</span> city<span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空间类型"><a href="#空间类型" class="headerlink" title="空间类型"></a>空间类型</h3><!--待补--><h2 id="参考文献-4"><a href="#参考文献-4" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637417355435-67ddc879-30fd-45e7-93de-3b7084f55b5a.pdf">📎第12章_MySQL数据类型精讲.pdf</a></p><h2 id="第13章：约束"><a href="#第13章：约束" class="headerlink" title="第13章：约束"></a>第13章：约束</h2><pre><code>constraint</code></pre><p><strong>修改约束</strong></p><p>基本是 <code>alter table 表名称 modify 字段名 数据类型 约束类型</code></p><p>除了主键约束和外键约束是</p><p> <code>ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表);</code></p><pre><code>ALTER TABLE 表名称 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名</code></pre><p><strong>删除约束</strong></p><p>基本是<code>alter table 表名称 modify 字段名 数据类型</code></p><p>主键、外键和唯一约束和其他有所区别</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 唯一约束需要找到相应索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名称 <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 索引名<span class="token comment" spellcheck="true">-- 删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 删除外键 */</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>第一步先查看约束名和删除外键约束<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>table_constraints <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">'表名称'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查看某个</span>表的约束名<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 从表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键约束名<span class="token punctuation">;</span>（<span class="token number">2</span>）第二步查看索引名和删除索引。（注意，只能手动删除）<span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> 表名称<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#查看某个表的索引名</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 从表名 <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 索引名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p><code>not null</code> 列不为空</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*  创建非空约束 */</span><span class="token comment" spellcheck="true"># 创建表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名称<span class="token punctuation">(</span>字段名 数据类型<span class="token punctuation">,</span>字段名 数据类型 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 建表后</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token comment" spellcheck="true">/*  删除非空约束 */</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 数据类型 <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#去掉not null，相当于修改某个非注解字段该字段允许为空</span>或 <span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 数据类型<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#去掉not null，相当于修改某个非注解字段，该字段允许为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p><code>unique</code> 列的值唯一</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 创建唯一约束 */</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>字段名 数据类型<span class="token punctuation">,</span>字段名 数据类型 <span class="token keyword">unique</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token keyword">unique</span> <span class="token keyword">key</span><span class="token punctuation">,</span>字段名 数据类型<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>字段名 数据类型<span class="token punctuation">,</span>字段名 数据类型<span class="token punctuation">,</span>字段名 数据类型<span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的</span><span class="token punctuation">[</span><span class="token keyword">constraint</span> 约束名<span class="token punctuation">]</span> <span class="token keyword">unique</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">## 组合约束</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>PASSWORD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 使用表级约束语法</span><span class="token keyword">CONSTRAINT</span> uk_name_pwd <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 修改约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">add</span> <span class="token keyword">unique</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 字段类型 <span class="token keyword">unique</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 删除约束  需要删除唯一索引*/</span><span class="token comment" spellcheck="true"># 1. 获取索引</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>table_constraints <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token string">'表名'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#查看都有哪</span>些约束<span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> 表名称<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查看表的索引</span><span class="token comment" spellcheck="true"># 2. 删除索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名称 <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 索引名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p><code>primary key</code> 相当于唯一约束+非空约束的组合。 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*  创建主键约束 */</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>字段名 数据类型 <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#列级模式</span>字段名 数据类型<span class="token punctuation">,</span>字段名 数据类型<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>字段名 数据类型<span class="token punctuation">,</span>字段名 数据类型<span class="token punctuation">,</span>字段名 数据类型<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token keyword">constraint</span> 约束名<span class="token punctuation">]</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#表级模式</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 修改主键约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名称 <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#字段列表可以是一个字段，也可以是多个字段，如果是多</span>个字段的话，是复合主键<span class="token comment" spellcheck="true">/* 删除主键约束 */</span><span class="token comment" spellcheck="true">-- 删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p><strong>阿里开发规范</strong> </p><p>【 强制 】不得使用外键与级联，一切外键概念必须在应用层解决。<br>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学<br>生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于 单<br>机低并发 ，不适合 分布式 、 高并发集群 ；级联更新是强阻塞，存在数据库 更新风暴 的风险；外键影响<br>数据库的 插入速度 。 </p><pre><code>foreign keycreate table 主表名称(字段1 数据类型 primary key,字段2 数据类型);create table 从表名称(字段1 数据类型 primary key,字段2 数据类型,[CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY（从表的某个字段) references 主表名(被参考字段));#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样-- FOREIGN KEY: 在表级指定子表中的列-- REFERENCES: 标示在父表中的列ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用字段) [on update xx][on delete xx];/* 删除外键 */(1)第一步先查看约束名和删除外键约束SELECT * FROM information_schema.table_constraints WHERE table_name = &#39;表名称&#39;;#查看某个表的约束名ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;（2）第二步查看索引名和删除索引。（注意，只能手动删除）SHOW INDEX FROM 表名称; #查看某个表的索引名ALTER TABLE 从表名 DROP INDEX 索引名;</code></pre><ul><li><p>添加了外键约束后，主表的修改和删除数据受约束</p></li><li><p>添加了外键约束后，从表的添加和修改数据受约束</p></li><li><p>在从表上建立外键，要求主表必须存在</p></li><li><p>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</p></li></ul><h3 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h3><p><code>check</code> MySQL 8.0 有效</p><h3 id="默认值约束"><a href="#默认值约束" class="headerlink" title="默认值约束"></a>默认值约束</h3><pre><code>default</code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 创建默认约束 */</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>字段名 数据类型 <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token keyword">unique</span> <span class="token keyword">key</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>再举例：字段名 数据类型 <span class="token keyword">default</span> 默认值 <span class="token punctuation">,</span>字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">,</span>字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">unique</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>说明：默认值约束一般不在唯一键和主键列上加<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 数据类型 <span class="token keyword">default</span> 默认值<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 删除默认约束 */</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 数据类型 <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#删除默认值约束，也不保留非空约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#删除默认值约束，保留非空约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自增列"><a href="#自增列" class="headerlink" title="自增列"></a>自增列</h3><pre><code>auto_increment</code></pre><p>只能在主键列和 唯一键列使用</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 创建自增约束 */</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>字段名 数据类型 <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token keyword">unique</span> <span class="token keyword">key</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名称<span class="token punctuation">(</span>字段名 数据类型 <span class="token keyword">default</span> 默认值 <span class="token punctuation">,</span>字段名 数据类型 <span class="token keyword">unique</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 数据类型 <span class="token keyword">auto_increment</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 删除自增约束 */</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名称 <span class="token keyword">modify</span> 字段名 数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-plain"><code class="language-plain">面试1、为什么建表时，加 not null default '' 或 default 0答：不想让表中出现null值。面试2、为什么不想要 null 的值答:（1）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通常返回null。（2）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default '' 或 default 0面试3、带AUTO_INCREMENT约束的字段值是从1开始的吗？ 在MySQL中，默认AUTO_INCREMENT的初始值是1，每新增一条记录，字段值自动加1。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一条记录，同时指定id值为5，则以后插入的记录的id值就会从6开始往上增加。添加主键约束时，往往需要设置字段自动增加属性。面试4、并不是每个表都可以任意选择存储引擎？ 外键约束（FOREIGN KEY）不能跨引擎使用。MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="其它数据库对象篇"><a href="#其它数据库对象篇" class="headerlink" title="其它数据库对象篇"></a>其它数据库对象篇</h1><h2 id="第14章：视图"><a href="#第14章：视图" class="headerlink" title="第14章：视图"></a>第14章：视图</h2><h3 id="视图的理解"><a href="#视图的理解" class="headerlink" title="视图的理解"></a>视图的理解</h3><ul><li><p>虚拟表，不存储数据。<code>本质是：存储的select语句</code></p></li><li><p>DML操作，会影响基表的数据。</p></li><li><p>视图的删除，不会导致基表数据删除</p></li><li><p>应用场景：针对大型项目</p></li><li><p>优点：简化查询；控制数据访问。</p></li></ul><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名称<span class="token keyword">AS</span> 查询语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="单表视图"><a href="#单表视图" class="headerlink" title="单表视图"></a>单表视图</h4><h4 id="多表视图"><a href="#多表视图" class="headerlink" title="多表视图"></a>多表视图</h4><h4 id="基于视图创建视图"><a href="#基于视图创建视图" class="headerlink" title="基于视图创建视图"></a>基于视图创建视图</h4><h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 语法1：查看数据库的表对象、视图对象</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#语法2：查看视图的结构</span><span class="token keyword">DESC</span> <span class="token operator">/</span> <span class="token keyword">DESCRIBE</span> 视图名称<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#语法3：查看视图的属性信息</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'视图名称'</span>\G<span class="token comment" spellcheck="true">#语法4：查看视图的详细定义信息</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新视图数据"><a href="#更新视图数据" class="headerlink" title="更新视图数据"></a>更新视图数据</h3><p>当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然 </p><h4 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h4><p>字段一致时可以修改</p><h4 id="不可更新的视图"><a href="#不可更新的视图" class="headerlink" title="不可更新的视图"></a>不可更新的视图</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637478805430-45ca3a9f-6341-4a03-b984-09bfa3802a09.png" alt="img"></p><h3 id="修改、删除视图"><a href="#修改、删除视图" class="headerlink" title="修改、删除视图"></a>修改、删除视图</h3><h4 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 方式1：使用CREATE OR REPLACE VIEW 子句修改视图</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACE <span class="token keyword">VIEW</span> empvu80<span class="token punctuation">(</span>id_number<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sal<span class="token punctuation">,</span> department_id<span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> first_name <span class="token operator">||</span> <span class="token string">' '</span> <span class="token operator">||</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> department_id<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 方式二</span><span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> 视图名称<span class="token keyword">AS</span>查询语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p>与删除表类似</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 视图名称<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 视图名称<span class="token number">1</span><span class="token punctuation">,</span>视图名称<span class="token number">2</span><span class="token punctuation">,</span>视图名称<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第15章：存储过程与函数"><a href="#第15章：存储过程与函数" class="headerlink" title="第15章：存储过程与函数"></a>第15章：存储过程与函数</h2><p><code>Stored Procedure</code> 一组经过 预先编译 的 SQL 语句的封装。 </p><p>存储函数可以放在查询语句中使用，存储过程不行。</p><p>存储过程的功能更加强大，包括能够执行对表的操作（比如创建表 ，删除表等）和事务操作，这些功能是存储函数不具备的 .</p><table><thead><tr><th></th><th><strong>关键字</strong></th><th><strong>调用语法</strong></th><th><strong>返回值</strong></th><th><strong>应用场景</strong></th></tr></thead><tbody><tr><td>存储过 程</td><td>PROCEDURE</td><td>CALL 存储过 程()</td><td>理解为有0个或 多个</td><td>一般用于更新</td></tr><tr><td>存储函 数</td><td>FUNCTION</td><td>SELECT 函数 ()</td><td>只能是一个</td><td>一般用于查询结果为一个值并 返回时</td></tr></tbody></table><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名<span class="token punctuation">(</span><span class="token operator">IN</span><span class="token operator">|</span><span class="token keyword">OUT</span><span class="token operator">|</span><span class="token keyword">INOUT</span> 参数名 参数类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">[</span>characteristics <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">BEGIN</span>存储过程体<span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无参无返回值"><a href="#无参无返回值" class="headerlink" title="无参无返回值"></a>无参无返回值</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#举例1：创建存储过程select_all_data()，查看 employees 表的所有数据</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> select_all_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">END</span> $<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#2. 存储过程的调用</span><span class="token keyword">CALL</span> select_all_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资</span><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> avg_employee_salary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>     <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用</span><span class="token keyword">CALL</span> avg_employee_salary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="带out"><a href="#带out" class="headerlink" title="带out"></a>带out</h4><p>查询结果字段需要<code>into``OUT</code>的字段</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#类型2：带 OUT</span><span class="token comment" spellcheck="true">#举例4：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资</span><span class="token comment" spellcheck="true">#通过OUT参数“ms”输出</span><span class="token keyword">DESC</span> employees<span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> show_min_salary<span class="token punctuation">(</span><span class="token keyword">OUT</span> ms <span class="token keyword">DOUBLE</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">INTO</span> ms    <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用</span><span class="token keyword">CALL</span> show_min_salary<span class="token punctuation">(</span><span class="token variable">@ms</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查看变量值</span><span class="token keyword">SELECT</span> <span class="token variable">@ms</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="带in"><a href="#带in" class="headerlink" title="带in"></a>带in</h4><p>给参数直接给参数。或者声明变量给参数</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#类型3：带 IN</span><span class="token comment" spellcheck="true">#举例5：创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，</span><span class="token comment" spellcheck="true">#并用IN参数empname输入员工姓名。</span><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> show_someone_salary<span class="token punctuation">(</span><span class="token operator">IN</span> empname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> empname<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用方式1</span><span class="token keyword">CALL</span> show_someone_salary<span class="token punctuation">(</span><span class="token string">'Abel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用方式2</span><span class="token keyword">SET</span> <span class="token variable">@empname</span> :<span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> show_someone_salary<span class="token punctuation">(</span><span class="token variable">@empname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="带in、out"><a href="#带in、out" class="headerlink" title="带in、out"></a>带in、out</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#类型4：带 IN 和 OUT</span><span class="token comment" spellcheck="true">#举例6：创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪资，</span><span class="token comment" spellcheck="true">#并用IN参数empname输入员工姓名，用OUT参数empsalary输出员工薪资。</span><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> show_someone_salary2<span class="token punctuation">(</span><span class="token operator">IN</span> empname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> empsalary <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> salary <span class="token keyword">INTO</span> empsalary    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> empname<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用</span><span class="token keyword">SET</span> <span class="token variable">@empname</span> <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> show_someone_salary2<span class="token punctuation">(</span><span class="token variable">@empname</span><span class="token punctuation">,</span><span class="token variable">@empsalary</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@empsalary</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="带inout"><a href="#带inout" class="headerlink" title="带inout"></a>带inout</h4><p>既当输入值又当输出值。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#类型5：带 INOUT</span><span class="token comment" spellcheck="true">#举例7：创建存储过程show_mgr_name()，查询某个员工领导的姓名，并用INOUT参数“empname”输入员工姓名，</span><span class="token comment" spellcheck="true">#输出领导的姓名。</span><span class="token keyword">DESC</span> employees<span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> show_mgr_name<span class="token punctuation">(</span><span class="token keyword">INOUT</span> empname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">SELECT</span> last_name <span class="token keyword">INTO</span> empname    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token punctuation">(</span>                <span class="token keyword">SELECT</span> manager_id                <span class="token keyword">FROM</span> employees                <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> empname                <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> $<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用</span><span class="token keyword">SET</span> <span class="token variable">@empname</span> :<span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> show_mgr_name<span class="token punctuation">(</span><span class="token variable">@empname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@empname</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 声明存储函数</span><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> 函数名<span class="token punctuation">(</span>参数名 参数类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> 返回值类型<span class="token punctuation">[</span>characteristics <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">BEGIN</span>函数体 <span class="token comment" spellcheck="true">#函数体中肯定有 RETURN 语句</span><span class="token keyword">END</span><span class="token comment" spellcheck="true"># 调用</span><span class="token keyword">SELECT</span> 函数名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="空参"><a href="#空参" class="headerlink" title="空参"></a>空参</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 举例1：创建存储函数，名称为email_by_name()，参数定义为空，</span><span class="token comment" spellcheck="true">#该函数查询Abel的email，并返回，数据类型为字符串型。</span><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> email_by_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>    <span class="token keyword">DETERMINISTIC</span>    <span class="token keyword">CONTAINS</span> SQL    <span class="token keyword">READS SQL DATA</span><span class="token keyword">BEGIN</span>    <span class="token keyword">RETURN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> email <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用</span><span class="token keyword">SELECT</span> email_by_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> email<span class="token punctuation">,</span>last_name <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有参"><a href="#有参" class="headerlink" title="有参"></a>有参</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#举例2：创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，</span><span class="token comment" spellcheck="true">#并返回，数据类型为字符串型。</span><span class="token comment" spellcheck="true">#创建函数前执行此语句，保证函数的创建会成功</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> log_bin_trust_function_creators <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#声明函数</span><span class="token keyword">DELIMITER</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> email_by_id<span class="token punctuation">(</span>emp_id <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">RETURN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> email <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> emp_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#调用</span><span class="token keyword">SELECT</span> email_by_id<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token variable">@emp_id</span> :<span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> email_by_id<span class="token punctuation">(</span><span class="token variable">@emp_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存储过程和存储函数的查询、修改删除"><a href="#存储过程和存储函数的查询、修改删除" class="headerlink" title="存储过程和存储函数的查询、修改删除"></a>存储过程和存储函数的查询、修改删除</h3><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><ul><li><strong>方式1. 使用SHOW CREATE语句查看存储过程和函数的创建信息</strong></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#方式1. 使用SHOW CREATE语句查看存储过程和函数的创建信息</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> {<span class="token keyword">PROCEDURE</span> <span class="token operator">|</span> <span class="token keyword">FUNCTION</span>} 存储过程名或函数名<span class="token comment" spellcheck="true">#eg：</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> show_mgr_name<span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> count_by_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>方式2. 使用SHOW STATUS语句查看存储过程和函数的状态信息</strong></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#方式2. 使用SHOW STATUS语句查看存储过程和函数的状态信息</span><span class="token keyword">SHOW</span> {<span class="token keyword">PROCEDURE</span> <span class="token operator">|</span> <span class="token keyword">FUNCTION</span>} <span class="token keyword">STATUS</span> <span class="token punctuation">[</span><span class="token operator">LIKE</span> <span class="token string">'pattern'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#eg:</span><span class="token keyword">SHOW</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'show_max_salary'</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">FUNCTION</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'email_by_id'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>方式3 从information_schema.Routines表中查看存储过程和函数的信息</strong></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#方式3.从information_schema.Routines表中查看存储过程和函数的信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>Routines<span class="token keyword">WHERE</span> ROUTINE_NAME<span class="token operator">=</span><span class="token string">'存储过程或函数的名'</span> <span class="token punctuation">[</span><span class="token operator">AND</span> ROUTINE_TYPE <span class="token operator">=</span> {<span class="token string">'PROCEDURE|FUNCTION'</span>}<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#eg:</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>Routines<span class="token keyword">WHERE</span> ROUTINE_NAME<span class="token operator">=</span><span class="token string">'email_by_id'</span> <span class="token operator">AND</span> ROUTINE_TYPE <span class="token operator">=</span> <span class="token string">'FUNCTION'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>Routines<span class="token keyword">WHERE</span> ROUTINE_NAME<span class="token operator">=</span><span class="token string">'show_min_salary'</span> <span class="token operator">AND</span> ROUTINE_TYPE <span class="token operator">=</span> <span class="token string">'PROCEDURE'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> {<span class="token keyword">PROCEDURE</span> <span class="token operator">|</span> <span class="token keyword">FUNCTION</span>} 存储过程或函数的名 <span class="token punctuation">[</span>characteristic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2040418/1637483232297-bdd17f49-8a26-4b30-b3f7-2c4ecef73fce.png" alt="img"></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> {<span class="token keyword">PROCEDURE</span> <span class="token operator">|</span> <span class="token keyword">FUNCTION</span>} <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 存储过程或函数的名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考文献-5"><a href="#参考文献-5" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637483537904-c1cf3361-7dac-4d39-9f76-ad4f6b472180.pdf">📎第15章_存储过程与函数.pdf</a></p><h2 id="第16章：变量、流程控制与游标【待完善】"><a href="#第16章：变量、流程控制与游标【待完善】" class="headerlink" title="第16章：变量、流程控制与游标【待完善】"></a>第16章：变量、流程控制与游标【待完善】</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637484004800-f7e3c2ef-e968-41c0-b094-2925e3ab4d8c.pdf">📎第16章_变量、流程控制与游标.pdf</a></p><h2 id="第17章：触发器【待完善】"><a href="#第17章：触发器【待完善】" class="headerlink" title="第17章：触发器【待完善】"></a>第17章：触发器【待完善】</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637484021933-9291ba6d-2ae8-44c5-ae67-2d047de8cefd.pdf">📎第17章_触发器.pdf</a></p><h1 id="事务【待完善】"><a href="#事务【待完善】" class="headerlink" title="事务【待完善】"></a>事务【待完善】</h1><h1 id="权限【待完善】"><a href="#权限【待完善】" class="headerlink" title="权限【待完善】"></a>权限【待完善】</h1><h1 id="维护【待完善】"><a href="#维护【待完善】" class="headerlink" title="维护【待完善】"></a>维护【待完善】</h1><h1 id="MySQL8-新特性篇【待完善】"><a href="#MySQL8-新特性篇【待完善】" class="headerlink" title="MySQL8 新特性篇【待完善】"></a>MySQL8 新特性篇【待完善】</h1><h2 id="第18章：MySQL8其它新特性【待完善】"><a href="#第18章：MySQL8其它新特性【待完善】" class="headerlink" title="第18章：MySQL8其它新特性【待完善】"></a>第18章：MySQL8其它新特性【待完善】</h2><p><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2040418/1637478174567-41489bbb-67f5-413c-ade8-0a74b3db8d47.pdf">📎第18章_MySQL8其它新特性.pdf</a></p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="MySQL进阶【2022-1】"><a href="#MySQL进阶【2022-1】" class="headerlink" title="MySQL进阶【2022-1】"></a>MySQL进阶【2022-1】</h1>]]></content>
      
      
      <categories>
          
          <category> technique </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-字符串017-含有所有字符的最短字符串</title>
      <link href="/2022/03/23/ds-zi-fu-chuan-017-han-you-suo-you-zi-fu-de-zui-duan-zi-fu-chuan/"/>
      <url>/2022/03/23/ds-zi-fu-chuan-017-han-you-suo-you-zi-fu-de-zui-duan-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个字符串 s 和 t 。返回 s 中包含 t 的所有字符的最短子字符串。如果 s 中不存在符合条件的子字符串，则返回空字符串 “” 。</p><p>如果 s 中存在多个符合条件的子字符串，返回任意一个。</p><p>注意： 对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。</p><p>示例 1：</p><p>输入：s &#x3D; “ADOBECODEBANC”, t &#x3D; “ABC”<br>输出：”BANC”<br>解释：最短子字符串 “BANC” 包含了字符串 t 的所有字符 ‘A’、’B’、’C’<br>示例 2：</p><p>输入：s &#x3D; “a”, t &#x3D; “a”<br>输出：”a”<br>示例 3：</p><p>输入：s &#x3D; “a”, t &#x3D; “aa”<br>输出：””<br>解释：t 中两个字符 ‘a’ 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这是关于统计 子字符串中出现的字符以及每个字符出现的次数的面试题。如果需要满足条件，则t中出现的字符在s中都会出现。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h4><ol><li>通过建立哈希表，来存放字符串<code>t</code>中出现的字符，并将出现次数记录</li><li>通过双指针，将字符串<code>s</code>进行判别。右指针用于查找字符，左指针用于判断长度<ol><li>如果存在<code>s</code>中有元素能够匹配哈希表中的元素，那么就进行<code>-1</code>操作，同时还需要将该指针右移直到<code>s</code>中包括<code>t</code>中的字符</li><li>如果没有出现则说明不存在这种子字符串。</li></ol></li><li>当找到这种子字符串，然后判断最小长度。根据移除左指针所在的元素之后，是否该子字符串中还是包含<code>t</code>的所有字符来判别是否为最小长度<ol><li>根据左指针所在字符判断哈希表中是否出现，如果出现则进行<code>+1</code>操作移出</li></ol></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>关于 String.substring(int start,int end);</p><ul><li><strong>该函数是不多见的小写情况，不符合驼峰命名法</strong></li><li>参数的理解，从下标start开始，往后数end个元素。也就是<code>[start,end)</code></li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">minWindow</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// getOrDefault表示 找到key所在的value就返回该值,否则就返回默认值</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> hashMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 出现在t中但未出现在s字符的个数</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// start与end是找到符合条件的 minStart与minEnd表示匹配符合结果的</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minLength <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二个判别条件是，当这个子字符串是末尾才匹配成功</span>    <span class="token comment" spellcheck="true">// ADOEODEDDDNBC", "ABC" 到结尾才能匹配</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// count > 0 表示s中还没有找到匹配的子字符串</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> endCh <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 没有该值就直接跳过</span>            <span class="token comment" spellcheck="true">// 有则将哈希表有的结果减一</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>endCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>endCh<span class="token punctuation">,</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>endCh<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断如果count的值为0，表示在s中找到符合t的字符</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>endCh<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            end<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// count &lt;= 0 表示都找到了,现在只需要找到符合条件的子字符串的最小长度</span>            <span class="token comment" spellcheck="true">// 这句话如果count &lt;= 0时,第一次肯定会执行啊</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">&lt;</span> minLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minLength <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可能疑问点在于 为什么不进行+1的操作,原因在于 if(count > 0)已经给end进行了+1操作</span>                minStart <span class="token operator">=</span> start<span class="token punctuation">;</span>                minEnd <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">char</span> startCh <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>startCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>startCh<span class="token punctuation">,</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>startCh<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>startCh<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> minLength <span class="token operator">&lt;</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>minStart<span class="token punctuation">,</span> minEnd<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-字符串016-不含重复字符的最长子字符串</title>
      <link href="/2022/03/23/ds-zi-fu-chuan-016-bu-han-chong-fu-zi-fu-de-zui-chang-zi-zi-fu-chuan/"/>
      <url>/2022/03/23/ds-zi-fu-chuan-016-bu-han-chong-fu-zi-fu-de-zui-chang-zi-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长连续子字符串 的长度。</p><p>示例 1:</p><p>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子字符串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子字符串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。<br>示例 4:</p><p>输入: s &#x3D; “”<br>输出: 0</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>题目要求：</strong></p><p>是一个字符，并不是字母，<strong>char类型的字符能够表示2个字节，故有256个字符</strong>。</p><p>因此标记数组的大小为256。</p><p><strong>过程分析：</strong></p><p>使用两个指针，指针之间的子字符串就是满足条件的字符串，他们的长度可以通过他们指针下标的差值运算得出。</p><ol><li><p>判断是否重复</p><ul><li><p>如果该字符没有出现，则对该标记数组+1</p></li><li><p>如果重复出现则该标记数组的值肯定大于1</p></li></ul></li><li><p>执行操作</p><ul><li>如果第一次出现，将右指针向右移动一位，继续判断</li><li>如果重复出现，则将左指针向右移动一位，同时将该元素所在的标记数组的值减1</li></ul></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>使用方法判定是否为重复的元素</li></ol><blockquote><p>因为如果重复 该标记数组的值肯定比1大。</p><p>另外</p><pre class="line-numbers language-java"><code class="language-java">counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hasGreaterThan1</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">++</span>j<span class="token punctuation">;</span>    counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span>longest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>longest<span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么需要加了之后判断是否超出呢？原因在于因为可能添加之后的元素之前的标记数组中有了，所以需要判别，例如当出现<code>aa</code>时，该标记数组的值就为2了，说明出现重复，直到他不重复时，就可以进行比较最大值。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i 右指针</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// j 左指针 但是为什么是负一？其实为0也是可以 只不过在判断最大值时需要加1操作</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> longest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hasGreaterThan1</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        longest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>longest<span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> longest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasGreaterThan1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">:</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 只要有一个大于1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>根据一个标记数来记录是否重复</li></ol><blockquote><p>对上一个方法进行改进，不需要对counts标记数组进行遍历</p><p>只是用一个标记数表示。</p><p>思路是当该值为1则表示重复，需要进行左指针移位操作直到该标记数的值为0，则进行最大值比较</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> longest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个标记的数只按一位一位的运算</span>    <span class="token keyword">int</span> countDup <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            countDup<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 为0 才表示不重复</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>countDup <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将j所在的字符移除</span>            counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果把重复的元素移除去了 等于1 表示没有重复</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>counts<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                countDup<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        longest <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token punctuation">,</span> longest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> longest<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-字符串015-字符串中所有变位词</title>
      <link href="/2022/03/22/ds-zi-fu-chuan-015-zi-fu-chuan-zhong-suo-you-bian-wei-ci/"/>
      <url>/2022/03/22/ds-zi-fu-chuan-015-zi-fu-chuan-zhong-suo-you-bian-wei-ci/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个字符串 s 和 p，找到 s 中所有 p 的 变位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p><p>变位词 指字母相同，但排列不同的字符串。</p><p>示例 1:</p><p>输入: s &#x3D; “cbaebabacd”, p &#x3D; “abc”<br>输出: [0,6]<br>解释:<br>起始索引等于 0 的子串是 “cba”, 它是 “abc” 的变位词。<br>起始索引等于 6 的子串是 “bac”, 它是 “abc” 的变位词。<br> 示例 2:</p><p>输入: s &#x3D; “abab”, p &#x3D; “ab”<br>输出: [0,1,2]<br>解释:<br>起始索引等于 0 的子串是 “ab”, 它是 “ab” 的变位词。<br>起始索引等于 1 的子串是 “ba”, 它是 “ab” 的变位词。<br>起始索引等于 2 的子串是 “ab”, 它是 “ab” 的变位词。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>思路<code>与DS-字符串014-字符串中的变位词</code>思路差不多，主要是一个求是否是变位词，一个求的是次数的下标。</p><p>主要还是借用标记数组，用来标识p出现的次数，然后在s中寻找。</p><p><strong>该标记数组中，-1表示多出来的字符，0表示匹配成功，1表示还没有被匹配的字符</strong></p><blockquote><p> 其中这个寻找的过程使用到了一些知识，开始看我并没有看懂，后来通过自己演绎得出的结果。</p></blockquote><blockquote><p><strong>演绎过程</strong></p><p>假设s为<code>cbaebabacd</code>，p为<code>abc</code></p><p>下面为演示结果，**-1表示多出来的字符，0表示匹配成功，1表示还没有被匹配的字符**</p><table><thead><tr><th align="center">i的取值</th><th align="center">a，b，c，d，e</th><th align="center">s中的字符</th></tr></thead><tbody><tr><td align="center">i&#x3D;0</td><td align="center">1，0，-1，0，0</td><td align="center">c</td></tr><tr><td align="center">i&#x3D;1</td><td align="center">1，0，-1，0，0</td><td align="center">c，b</td></tr><tr><td align="center">i&#x3D;2</td><td align="center">0，0，0，0，0</td><td align="center">c，b，a</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">b，a，e</td></tr><tr><td align="center">i&#x3D;3</td><td align="center">0，0，1，-1，0</td><td align="center">b，a，e</td></tr><tr><td align="center">i&#x3D;4</td><td align="center">0，0，1，0，-1</td><td align="center">a，e，b</td></tr><tr><td align="center">i&#x3D;5</td><td align="center">0，0，1，0，-1</td><td align="center">e，b，a</td></tr><tr><td align="center">i&#x3D;6</td><td align="center">0，-1，1，0，0</td><td align="center">b，a，b</td></tr><tr><td align="center">i&#x3D;7</td><td align="center">-1，0，1，0，0</td><td align="center">a，b，a</td></tr><tr><td align="center">i&#x3D;8</td><td align="center">0，0，0，0，0</td><td align="center">b，a，c</td></tr><tr><td align="center">i&#x3D;9</td><td align="center">0，1，0，-10</td><td align="center">a，c，d</td></tr></tbody></table></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下面两种代码看起来不同实则一样</p><p><strong>在for循环中只是用一个指针</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 为什么i放在外面</span>        <span class="token comment" spellcheck="true">// 首次匹配的情况需要考虑</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                counts<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                counts<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areAllZero</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 为什么添加0？</span>                <span class="token comment" spellcheck="true">// 表示如果一开始就有匹配的，说明s1前几个是变位词，所以需要添加下标0</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 从s2.length()的长度给值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                counts<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这一步 为什么要减去s2.length 是除去？</span>                <span class="token comment" spellcheck="true">// 用于将s1中的首头元素放回到标记数组中</span>                counts<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areAllZero</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">areAllZero</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">:</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在for循环中使用两个指针</strong></p><p><code>int i=0;</code></p><p><code>int i = p.length()</code></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flags<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            flags<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAllZero</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flags<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            flags<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isAllZero</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">-</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isAllZero</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> flag <span class="token operator">:</span> flags<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-字符串014-字符串中的变位词</title>
      <link href="/2022/03/22/ds-zi-fu-chuan-014-zi-fu-chuan-zhong-de-bian-wei-ci/"/>
      <url>/2022/03/22/ds-zi-fu-chuan-014-zi-fu-chuan-zhong-de-bian-wei-ci/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-II-014-字符串中的变位词"><a href="#剑指-Offer-II-014-字符串中的变位词" class="headerlink" title="[剑指 Offer II 014]字符串中的变位词"></a>[剑指 Offer II 014]字符串中的变位词</h2><blockquote><p>变位词：指组成各个单词的字母以及每个字母出现的次数完全相同，只是字母的排列顺序不同。例如<code>pots,stop,tops</code>就是一组变位词。</p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的某个变位词。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的 子串 。</p><p>示例 1：</p><p>输入: s1 &#x3D; “ab” s2 &#x3D; “eidbaooo”<br>输出: True<br>解释: s2 包含 s1 的排列之一 (“ba”).<br>示例 2：</p><p>输入: s1&#x3D; “ab” s2 &#x3D; “eidboaoo”<br>输出: False</p></blockquote><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p><code>基于双指针和哈希表</code><br>主要根据s1中出现的字符的次数与s2中子字符出现的次数相等则表示是变位词。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>首先给出s1字符串出现的次数<ol><li>将s1的字符串在哈希表中表示出现的次数。<code>int[] counts = new int[26];</code>，</li><li>如果s1中有则<code>counts[s1.charAt(i) - &#39;a&#39;]++;</code></li><li>并将<code>counts[s2.charAt(i) - &#39;a&#39;]--;</code>表示当成子数列</li></ol></li><li>然后找s2中与s1匹配的子字符串<ol><li><code>counts[s2.charAt(i) - &#39;a&#39;]--; </code>向后移动一位，当成子字符串</li><li><code>counts[s2.charAt(i - s1.length()) - &#39;a&#39;]++;</code>将子字符串最左边的字符删掉</li></ol></li><li>最后比较该哈希表中是否都为0则表示查询到了</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过<code>+1</code>的操作表示标记的字符，通过<code>-1</code>表示找到的字符。如果两者相等即结果为0则表示找到该变位词。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>当字符串使用<code>toCharArray()</code>方法时，执行效率会变低，因为先将String对象转换为字符数组，然后遍历</p><p>而直接用<code>str.length()</code>则会快很多，不需要经过字符串转换为字符数组</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counts<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            counts<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areAllZero</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            counts<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            counts<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">areAllZero</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">areAllZero</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">:</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面使用<code>toCharArray()</code>方式的执行效率慢</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 标记数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            flags[s1.charAt(i) - 'a'] += 1;</span><span class="token comment" spellcheck="true">//            flags[s2.charAt(i) - 'a'] -= 1;</span>            flags<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>            flags<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmptyOfFlags</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            flags[s2.charAt(i) - 'a'] -= 1;</span><span class="token comment" spellcheck="true">//            flags[s2.charAt(i - length) - 'a'] += 1;</span>            flags<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token punctuation">;</span>            flags<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> length<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmptyOfFlags</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isEmptyOfFlags</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> flag <span class="token operator">:</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组013-二维子矩阵的和</title>
      <link href="/2022/03/22/ds-shu-zu-013-er-wei-zi-ju-zhen-de-he/"/>
      <url>/2022/03/22/ds-shu-zu-013-er-wei-zi-ju-zhen-de-he/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二维矩阵 matrix，以下类型的多个请求：</p><p>计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2) 。<br>实现 NumMatrix 类：</p><p>NumMatrix(int[][] matrix) 给定整数矩阵 matrix 进行初始化<br>int sumRegion(int row1, int col1, int row2, int col2) 返回左上角 (row1, col1) 、右下角 (row2, col2) 的子矩阵的元素总和。</p><p>示例 1：</p><p><img src="https://pic.leetcode-cn.com/1626332422-wUpUHT-image.png" alt="img"></p><p>输入:<br>[“NumMatrix”,”sumRegion”,”sumRegion”,”sumRegion”]<br>[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]<br>输出:<br>[null, 8, 11, 12]</p><p>解释:<br>NumMatrix numMatrix &#x3D; new NumMatrix([[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]]);<br>numMatrix.sumRegion(2, 1, 4, 3); &#x2F;&#x2F; return 8 (红色矩形框的元素总和)<br>numMatrix.sumRegion(1, 1, 2, 2); &#x2F;&#x2F; return 11 (绿色矩形框的元素总和)<br>numMatrix.sumRegion(1, 2, 2, 4); &#x2F;&#x2F; return 12 (蓝色矩形框的元素总和)</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目要求：求子矩阵的和</p><p><strong>思路：</strong></p><ol><li>根据一个辅助求和矩阵，该矩阵表示从最左边的顶点到目标最右下的顶点的元素和</li><li>根据下面例子的公式，目标矩阵是在该大矩阵的范围内，只需要对其进行分解运算即可。</li><li>为了方便理解，可看下面的实例说明。</li></ol><blockquote><p><strong>注意点:</strong></p><p><strong>1. 根据格子来算下标位置，如果根据线则不好判别</strong></p><p><strong>2. 关于辅助求和矩阵：</strong>因为涉及到多个列值，那么则可以通过对上一列的所在行的和得到下一列的和。什么意思呢？例如一个矩阵为</p><p>3，0，1，4，2</p><p>5，6，3，2，1</p><p>1，2，0，1，5</p><p>那么第一行中的列数和，直接可以对该列累加求和运算得出<code>colSum += matrix[row][col];</code></p><p>第二行中的列数和，则需要通过第一行的列数和进行相加运算。比如如果要求第二行元素6的和，那么则是第一行中0的元素和+第二行5和6的元素和。抽象为数据公式则是<code>colSum【0~col】+sum【row，col】</code></p></blockquote><p>图中，红色代表目标矩阵，该矩阵的和<code>sum[(4-7),(3-5)] = sum[(0-7),(0-5)] - sum[(0-7),(0-2)] - sum[(0-3),(0-5)] + sum[(0-3),(0-2)]</code> </p><p>其中<code>sum[(0-7),(0-5)]</code>为大蓝色的方框</p><p>其中<code>sum[(0-7),(0-2)]</code>为黄色色的方框</p><p>其中<code>sum[(0-3),(0-5)]</code>为绿色的方框</p><p>其中<code>sum[(0-3),(0-2)]</code>为黄色和绿色相交的方框</p><p>这种方法通过将对角线的和先算出来，到时候计算时候只需要<code>O(1)</code></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1647061683877-30123342-4b13-4b59-a099-f54a4b66a0c4.png" alt="无标题.png"></p><hr><p><strong><code>错误思路</code></strong></p><p>有一个最简单的思路，我直接将需要查询的行列直接求和计算就可以。但是可能会出现的问题，时间复杂度太高，会导致超时</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> row1 <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>row2 <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> col1 <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> col2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用n个时，该方法的执行效率很低，不可取</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 标记数组初始化,用于记录到下标的和</span>        flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//                int colSum = 0;</span>            <span class="token keyword">int</span> rowSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 应该是前一个的和减去下一个的和</span>                <span class="token comment" spellcheck="true">//                    rowSum = flags[row][col + 1];</span>                <span class="token comment" spellcheck="true">//                    colSum += matrix[row][col];</span>                <span class="token comment" spellcheck="true">//                    flags[row + 1][col + 1] = colSum + rowSum;</span>                rowSum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>                flags<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rowSum <span class="token operator">+</span> flags<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h4><p>注意判断条件<code>matrix.length == 0 || matrix[0].length == 0</code>matrix必须有意义才行</p><ol><li>关于这个代码，就是刚刚上面关于<code>关于辅助求和矩阵</code>的思想</li></ol><pre class="line-numbers language-java"><code class="language-java">                <span class="token keyword">int</span> colSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> rowSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 应该是前一个的和减去下一个的和</span>                   rowSum <span class="token operator">=</span> flags<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   colSum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>                   flags<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> colSum <span class="token operator">+</span> rowSum<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>而这个则是上面代码的简化版本</li></ol><pre class="line-numbers language-java"><code class="language-java"> rowSum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>flags<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rowSum <span class="token operator">+</span> flags<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>关于返回子矩阵的和</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">return</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可查看上面的图例进行理解</p><p><strong>有一点注意是初始的flags数组是比他的长度加1，原因防止越界异常。</strong></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 二维子矩阵的和 <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NumMatrix</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 标记数组初始化,用于记录到下标的和</span>            flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                int colSum = 0;</span>                <span class="token keyword">int</span> rowSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 应该是前一个的和减去下一个的和</span><span class="token comment" spellcheck="true">//                    rowSum = flags[row][col + 1];</span><span class="token comment" spellcheck="true">//                    colSum += matrix[row][col];</span><span class="token comment" spellcheck="true">//                    flags[row + 1][col + 1] = colSum + rowSum;</span>                    rowSum <span class="token operator">+=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>                    flags<span class="token punctuation">[</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rowSum <span class="token operator">+</span> flags<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token keyword">int</span> row1<span class="token punctuation">,</span> <span class="token keyword">int</span> col1<span class="token punctuation">,</span> <span class="token keyword">int</span> row2<span class="token punctuation">,</span> <span class="token keyword">int</span> col2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row1<span class="token punctuation">]</span><span class="token punctuation">[</span>col2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> flags<span class="token punctuation">[</span>row2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NumMatrix matrix <span class="token operator">=</span> <span class="token keyword">new</span> 二维子矩阵的和<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">NumMatrix</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> matrix<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag <span class="token operator">:</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">sumRegion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组012-左右两边子数组的和相等</title>
      <link href="/2022/03/22/ds-shu-zu-012-zuo-you-liang-bian-zi-shu-zu-de-he-xiang-deng/"/>
      <url>/2022/03/22/ds-shu-zu-012-zuo-you-liang-bian-zi-shu-zu-de-he-xiang-deng/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给你一个整数数组 nums ，请计算数组的 中心下标 。</p><p>数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p><p>如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。</p><p>示例 1：</p><p>输入：nums &#x3D; [1,7,3,6,5,6]<br>输出：3<br>解释：<br>中心下标是 3 。<br>左侧数之和 sum &#x3D; nums[0] + nums[1] + nums[2] &#x3D; 1 + 7 + 3 &#x3D; 11 ，<br>右侧数之和 sum &#x3D; nums[4] + nums[5] &#x3D; 5 + 6 &#x3D; 11 ，二者相等。<br>示例 2：</p><p>输入：nums &#x3D; [1, 2, 3]<br>输出：-1<br>解释：<br>数组中不存在满足此条件的中心下标。<br>示例 3：</p><p>输入：nums &#x3D; [2, 1, -1]<br>输出：0<br>解释：<br>中心下标是 0 。<br>左侧数之和 sum &#x3D; 0 ，（下标 0 左侧不存在元素），<br>右侧数之和 sum &#x3D; nums[1] + nums[2] &#x3D; 1 + -1 &#x3D; 0 。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目要求是求出满足左右相等的中心下标</p><p><strong>思路：</strong></p><p><strong>思路一：</strong>使用可以通过遍历两个循环，一个循环从前往后找，一个循环从后往前找，每次累计记录当前 前i项和的下标，使用哈希表记录，最后匹配哈希表中的下标位置，如果找到就返回该位置，否则就返回-1表示没有找到。</p><p><strong>思路二</strong>： 可以先求整个数组的和，然后可以根据公式**sum<del>n</del> - sum<del>i</del>&#x3D;sum<del>i</del>-nums<del>i</del>**得到，不需要通过标记数组</p><p>下面给出思路一与思路二的代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>思路一</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map_i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map_j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum_j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum_i <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum_i<span class="token punctuation">;</span>        map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum_j <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        map_j<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum_j<span class="token punctuation">;</span>        map_j<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map_i<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map_j<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> map_j<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> map_j<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> map_i<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路二：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        total <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">-</span> sum <span class="token operator">==</span> sum <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组011-0和1个数相同的子数组</title>
      <link href="/2022/03/22/ds-shu-zu-011-0-he-1-ge-shu-xiang-tong-de-zi-shu-zu/"/>
      <url>/2022/03/22/ds-shu-zu-011-0-he-1-ge-shu-xiang-tong-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。</p><p>示例 1:</p><p>输入: nums &#x3D; [0,1]<br>输出: 2<br>说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。<br>示例 2:</p><p>输入: nums &#x3D; [0,1,0]<br>输出: 2<br>说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>该题目可以运用010的解题思路，首先回顾DS-数组010-和为k的子数组</p><blockquote><p><strong>题目要求</strong>是求出子数列的和等于k的个数</p><p><strong>解题思路：</strong>知道前i项和sum<del>i</del>和前j项和sum<del>j</del>（j&lt;i）,那么就有，如果有 sum<del>j</del> &#x3D; sum<del>i</del>-k，只需要判断sum<del>j</del>的个数就知道满足和为k的子数列的个数</p></blockquote><p>同理：该题求含有相同数量的 0 和 1 的最长连续子数组只需要将上述的k值变换成sum<del>i</del>的值，那么就有可以得到和为0的子数列，问题关键需要<strong>将0转换为-1</strong>，这样做的<strong>目的</strong>是保证是相同的，因为如果是相同的话，他们的和是0。如果不转换的话不好直接求解。</p><p><strong>思路</strong>：首先使用哈希表存放sum和数组下表，就能知道该子数组满足和为0的长度有多长。通过和为i的和与和为j的和找到 i-j+1,而和为j可以通过哈希表查询，和为i可以通过到该数组长度的累加</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>可能疑问点：<code>sumToIndex.put(0, -1);</code></p><p>目的是方便计算。</p><p>而<strong>DS-数组010-和为k的子数组</strong>中的则是sumToIndex.put(0, 1);表示的是当前sum<del>i</del>项和为k时，那么他们相减的结果为0，但是这种情况他们出现了一次。，所以需要哈希表中key&#x3D;0的值设置value为1</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> sumToIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sumToIndex<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sumToIndex<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// i - sumToIndex.get(sum) 表示需要找到sum 对应的j的值，这样才能找到 j+1~i之间子数组的长度</span>            maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> i <span class="token operator">-</span> sumToIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sumToIndex<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组009-乘积小于K的子数组</title>
      <link href="/2022/03/20/ds-shu-zu-009-cheng-ji-xiao-yu-k-de-zi-shu-zu/"/>
      <url>/2022/03/20/ds-shu-zu-009-cheng-ji-xiao-yu-k-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个正整数数组 nums和整数 k ，请找出该数组内乘积小于 k 的连续的子数组的个数。</p><p> 示例 1:</p><p>输入: nums &#x3D; [10,5,2,6], k &#x3D; 100<br>输出: 8<br>解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。<br>需要注意的是 [10,5,2] 并不是乘积小于100的子数组。<br>示例 2:</p><p>输入: nums &#x3D; [1,2,3], k &#x3D; 0<br>输出: 0</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>这个和找出求和大于等于targe类似，都是根据运算得出是否比目标值大（或者小），但是区别在于一个是求长度，一个是求数量</li><li>关于数量如何求解数量需要使用到<code>count +=j - i + 1;</code>，这个的意思是<code>(i,j] + 1</code></li></ol><blockquote><p>例如该数组为【10，5，2，6】</p><p>则 </p><p>【10】 (0,0】+ 1 &#x3D; ∅ + 1 &#x3D; 1；</p><p>【10，5】 (0,1】 + 1 &#x3D; 1 + 1 &#x3D; 2; 表示【5】，【10，5】</p><p>【10，5，2】 不满足100 故而是【5，2】 （1，2】+1 &#x3D; 2； 表示【2】，【5，2】</p><p>【5，2，6】 （1，3】 + 1 &#x3D; 2 + 1 &#x3D; 3；表示【6】，【2，6】，【5，2，6】</p><p><strong>因此结果为 1+2+2+3 &#x3D;8</strong></p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>count +=j - i + 1;</code>与<code>count += right &gt;= left ? right - left + 1 : 0;</code>是一样的，原因在于当该<code>while (i &lt;= j &amp;&amp; sum &gt;= k) &#123;</code>中限制了<code>i</code>只能比<code>j</code>大<code>1</code></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSubarrayProductLessThanK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">*=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> sum <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">/=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            count <span class="token operator">+=</span>j <span class="token operator">>=</span> i <span class="token operator">?</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组008-和大于等于target的最短子数组</title>
      <link href="/2022/03/20/ds-shu-zu-008-he-da-yu-deng-yu-target-de-zui-duan-zi-shu-zu/"/>
      <url>/2022/03/20/ds-shu-zu-008-he-da-yu-deng-yu-target-de-zui-duan-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个含有 n 个<strong>正整数</strong>的数组和一个<strong>正整数</strong> target 。</p><p>找出该数组中<strong>满足其和 ≥ target</strong> 的<strong>长度最小</strong>的 <strong>连续子数组</strong> [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><p>示例 1：</p><p>输入：target &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]<br>输出：2<br>解释：子数组 [4,3] 是该条件下的长度最小的子数组。<br>示例 2：</p><p>输入：target &#x3D; 4, nums &#x3D; [1,4,4]<br>输出：1<br>示例 3：</p><p>输入：target &#x3D; 11, nums &#x3D; [1,1,1,1,1,1,1,1]<br>输出：0</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>题目要求是 正整数，并且数组也为正整数，可以知道求和结果肯定比之前求和的结果大，所以可以使用双指针，从头开始，求和如果比这个target大则进行减法，否则则进行加法</li><li>使用2个指针指向首元素</li><li>依次包裹这个数组，相当于他的子数列。例如<code>数组为【1，2，3，4】 target=2，i=0,j=1</code>则<code>[1,2]</code>为他的子数列，但是不满足该条件比target大，所以需要将<code>1</code>剔除，然后<code>[2]</code>就是满足条件</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用双指针</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> sum <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组010-和为k的子数组</title>
      <link href="/2022/03/20/ds-shu-zu-010-he-wei-k-de-zi-shu-zu/"/>
      <url>/2022/03/20/ds-shu-zu-010-he-wei-k-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个整数数组和一个整数 <code>k</code> <strong>，</strong>请找到该数组中和为 <code>k</code> 的连续子数组的个数。</p><p>示例 1 :</p><p>输入:nums &#x3D; [1,1,1], k &#x3D; 2<br>输出: 2<br>解释: 此题 [1,1] 与 [1,1] 为两种不同的情况<br>示例 2 :</p><p>输入:nums &#x3D; [1,2,3], k &#x3D; 3<br>输出: 2</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>思路，双指针在该问题中无法求解，原因有两点</p><ol><li>该求的数组是子数组</li><li>该数组不是正数</li><li>为什么？原因在于子数组求和中如果出现负数的情况下，不能够判断增加一个数是比之前大还是比之前小，对目标值会造成影响</li></ol></li><li><p>该方法<strong>使用累加数组求子数组的和</strong></p><ol><li>通过知道前n项和sum<del>0-n</del>，如果需要找出目标值为k的数，则只需要找到前sum<del>0-j</del>的和，那么有<strong>sum<del>0-n</del>&#x3D;k + sum<del>0-j</del> &#x3D; sum<del>j+1-n</del> + sum<del>0-j</del></strong></li><li>所以也就是求**sum<del>0-j</del>**的个数问题</li><li>故可以使用哈希表，存放sum以及出现的次数可以方便得出结果</li></ol></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>可能对于<code>map.put(0,1);</code>这个语句有两个作用</p><ol><li><p>初始化map集合，不然他的结果为null值</p></li><li><p>因为可能会出现求和数列<code>sum=k</code>，这时候需要有一个默认值。</p></li></ol><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> k <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组007-数组中和为0的三个数</title>
      <link href="/2022/03/20/ds-shu-zu-007-shu-zu-zhong-he-wei-0-de-san-ge-shu/"/>
      <url>/2022/03/20/ds-shu-zu-007-shu-zu-zhong-he-wei-0-de-san-ge-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a ，b ，c ，使得 a + b + c &#x3D; 0 ？请找出所有和为 0 且 不重复 的三元组。</p><p>示例 1：</p><p>输入：nums &#x3D; [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br>示例 2：</p><p>输入：nums &#x3D; []<br>输出：[]<br>示例 3：</p><p>输入：nums &#x3D; [0]<br>输出：[]</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li><p>可以根据 <a href="">DS-数组006-排序数组中两个数字之和</a>求解，问题关键是<code>a+b+c=0</code>转换为<code>a+b=-c</code></p></li><li><p>但是这个前提条件是有序</p></li><li><p>不重复的判定可以根据下面代码判定</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><blockquote><p>疑问点</p><ol><li><p>为什么这个会进行，是否会出现死循环的情况</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原因在于上面的赋值语句中赋值了一次，该循环在满足<code>i &lt; nums.length - 2</code>条件下会执行一次</li></ul></li><li><p>为什么不用判断k的数组是否重复？</p><ul><li><p>因为k下表所在的数组元素<code>nums[k]</code>是最后一个满足条件的，而k之前的数组元素只能小于等于该值<code>nums[k]</code>，因而如果出现<code>num[k]</code>重复，则只需要判断<code>nums[j]</code>是否和<code>num[k]</code>相等，即不用判断<code>nums[k]</code>。</p></li><li><p>也就是<code>nums[j]</code>最终会找到<code>nums[k]</code>，也就找到了重复的<code>nums[k]</code></p></li></ul></li></ol></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> lists<span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">twoSums</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为什么这个会进行，是否会出现死循环的情况？ 由于temp == nums[i] 所以至少会执行一次</span>        <span class="token comment" spellcheck="true">// 并且这个是找到相同中的最后一个元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lists<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">twoSums</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 为什么不用判断k的数组是否重复？</span>            <span class="token comment" spellcheck="true">// 因为到最后如果有相同的,则会退出该数列的和比如有 -4，2，2中2有多个则会通过前一个j判断是否与后一面k相同，相同则返回到末尾即跳出循环</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> temp <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-掌握不熟练的题型</title>
      <link href="/2022/03/19/ds-zhang-wo-bu-shou-lian-de-ti-xing/"/>
      <url>/2022/03/19/ds-zhang-wo-bu-shou-lian-de-ti-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="掌握不熟练的题型"><a href="#掌握不熟练的题型" class="headerlink" title="掌握不熟练的题型"></a>掌握不熟练的题型</h4><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><ol><li>001-整数除法</li><li>004-只出现一次的数字</li><li>005-单词的最大乘积</li></ol><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li><a href="https://leetcode-cn.com/problems/1fGaJU/">007-数组中和为 0 的三个数</a></li><li>[<a href="https://leetcode-cn.com/problems/QTMn0o/submissions/">剑指 Offer II 010. 和为 k 的子数组</a></li><li><a href="https://leetcode-cn.com/problems/A1NYOS/">剑指 Offer II 011. 0 和 1 个数相同的子数组</a> </li><li><a href="https://leetcode-cn.com/problems/O4NDxx/">剑指 Offer II 013. 二维子矩阵的和</a> 【关于二维矩阵的和，以及如何计算】</li></ol><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ol><li><a href="https://leetcode-cn.com/problems/VabMRr/">剑指 Offer II 015. 字符串中的所有变位词</a></li><li><a href="https://leetcode-cn.com/problems/wtcaE1/">剑指 Offer II 016. 不含重复字符的最长子字符串</a></li><li><a href="https://leetcode-cn.com/problems/M1oyTv/">剑指 Offer II 017. 含有所有字符的最短字符串</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-数组006-排序数组中两个数字之和</title>
      <link href="/2022/03/19/ds-shu-zu-006-pai-xu-shu-zu-zhong-liang-ge-shu-zi-zhi-he/"/>
      <url>/2022/03/19/ds-shu-zu-006-pai-xu-shu-zu-zhong-liang-ge-shu-zi-zhi-he/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个已按照 升序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p><p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 0 开始计数 ，所以答案数组应当满足 0 &lt;&#x3D; answer[0] &lt; answer[1] &lt; numbers.length 。</p><p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p><p><strong>示例 1：</strong></p><p>输入：numbers &#x3D; [1,2,4,6,10], target &#x3D; 8<br>输出：[1,3]<br>解释：2 与 6 之和等于目标数 8 。因此 index1 &#x3D; 1, index2 &#x3D; 3 。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>因为该数组是一个升序排序的数组，故可以使用双指针，从第一个和最后一个比较，类似于二分查找，</p><ul><li>当比目标值大则，则对最后一个移位，否则对前一个移位</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数005-单词长度的最大乘积</title>
      <link href="/2022/03/18/ds-zheng-shu-005-dan-ci-chang-du-de-zui-da-cheng-ji/"/>
      <url>/2022/03/18/ds-zheng-shu-005-dan-ci-chang-du-de-zui-da-cheng-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个字符串数组 words，请计算当两个字符串 words[i] 和 words[j] 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。</p><p>示例 1:</p><p>输入: words &#x3D; [“abcw”,”baz”,”foo”,”bar”,”fxyz”,”abcdef”]<br>输出: 16<br>解释: 这两个单词为 “abcw”, “fxyz”。它们不包含相同字符，且长度的乘积最大。<br>示例 2:</p><p>输入: words &#x3D; [“a”,”ab”,”abc”,”d”,”cd”,”bcd”,”abcd”]<br>输出: 4<br>解释: 这两个单词为 “ab”, “cd”。<br>示例 3:</p><p>输入: words &#x3D; [“a”,”aa”,”aaa”,”aaaa”]<br>输出: 0<br>解释: 不存在这样的两个单词。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可通过建立标记数组完成，通过查询该标记数组可以将快速得出是否匹配</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="用哈希表记录字符串出现的次数"><a href="#用哈希表记录字符串出现的次数" class="headerlink" title="用哈希表记录字符串出现的次数"></a>用哈希表记录字符串出现的次数</h4><p>该标记数组充当哈希表，用于快速查询各个字符串的字符是否相等，通过<code>if (flags[i][k] &amp;&amp; flags[j][k])</code>判别</p><ol><li><p>创建一个标记数组，用来记录数组中每个单词的每个字母是否出现</p></li><li><p>字符比较：通过<code>flags[i][k] &amp;&amp; flags[j][k]</code>判断，因为flags数组是布尔类型的，只需要判断每个位【单词表上abcd… xyz】上是否有值即可</p></li><li><p>最后通过结束条件<code>k==26</code>计算乘积的结果，通过<code>Math.max(int a,int b)</code>比较即可</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> aChar <span class="token operator">:</span> chars<span class="token punctuation">)</span><span class="token punctuation">{</span>                flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>aChar <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span>words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> flags<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用整数二进制数位记录字符串出现的次数"><a href="#用整数二进制数位记录字符串出现的次数" class="headerlink" title="用整数二进制数位记录字符串出现的次数"></a>用整数二进制数位记录字符串出现的次数</h4><p>思路</p><ol><li>标记数组：通过二进制的方式表示字母(abcd…)，<code>int</code>类型有32位，而字母表一共才26个所以能够放下，不会出现溢出的问题。通过<code>1或者0</code>充当布尔类型  <code>1 &lt;&lt; (ch - &#39;a&#39;)</code></li><li>判断：通过各个位数的<code>&amp;</code>与运算即可求得是否相等。<code>(flags[i] &amp; flags[j])==0</code></li></ol><blockquote><p><strong>1. 可能疑问点在于：</strong>这个是int类型有值的地方都是1，可以直接位运算吗？</p><p>可以，因为<code>1 &lt;&lt; (ch - &#39;a&#39;)</code>本来就是位运算，左移位运算。只是判断的位数</p><p><strong>2.疑问点二：</strong><code>flags[i] |= 1 &lt;&lt; (ch - &#39;a&#39;);</code>，为什么不能用<code>flags[i] += 1 &lt;&lt; (ch - &#39;a&#39;);</code></p><p>这个用<code>|=</code>表示该位不管有几个相同的字符都看做只有一个，例如如果出现<code>aaaa</code>时，则该位数只会为1，而不是为4。为什么不能为四呢，因为该数组需要变成二进制的表示形式，而如果为3则会将<code>a</code>与<code>aaaa</code>看成<code>1与4的与运算</code>那么结果为0，表示每个位数都不相同，而实际情况是相同的。</p></blockquote><p>与解法1的不同在于</p><ol><li>flags数组只用到了一维</li><li>判断方面只需要一次循环，时间复杂度看起来一样，但实际还是比较快</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个数组，用来以二进制的方式存放单词的字母</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给flags数组存放二进制值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 比较各个单词的字符匹配</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 表示每个数位都不相同</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flags<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> flags<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> prod <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>prod<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数004-只出现一次的数字</title>
      <link href="/2022/03/18/ds-zheng-shu-004-zhi-chu-xian-yi-ci-de-shu-zi/"/>
      <url>/2022/03/18/ds-zheng-shu-004-zhi-chu-xian-yi-ci-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。</p><p> 示例 1：</p><p>输入：nums &#x3D; [2,2,3,2]<br>输出：3<br>示例 2：</p><p>输入：nums &#x3D; [0,1,0,1,0,1,100]<br>输出：100</p></blockquote><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>思路：</p><ol><li>整数用二进制表示是32位的0或1组成，如果有3个一样的数，那么他的任意位数<code>i,i∈[0,31]</code>的累计和都能被3整除，除去这个被3整除的。如果还有余数，则那个余数表示那个只出现1次的数字的位数上是否有1；</li><li>通过被3除的位数，我们可以知道这个二进制所代表的值是什么</li></ol><blockquote><p>举例：</p><p>nums &#x3D; [2,2,3,2]</p><p>3：11</p><p>2：10</p><p>3个2： bitSums &#x3D; [0……. 3,0] <strong>能够被3除</strong></p><p>3个2和1个3  bitSums &#x3D; [0……. 4,1] <strong>被3除有余数表示的是3的二进制表示</strong></p></blockquote><p><code>bitSums[i] += (num &gt;&gt; (31 - i)) &amp; 1;</code>表示从最高位开始取，如果<code>&amp; 1</code>有值，则为<code>1</code>，否则为<code>0</code>，将<code>nums</code>数组中的每个数字都计算。</p><p><code>**result = (result &lt;&lt; 1) + bitSums[i] % 3;**</code><strong>表示根据数组表示的二进制数。只能从最最左边往右边取，如果从右往左边取会把地位覆盖为0</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bitSums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bitSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> bitSums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>题目：输入一个整数数组，数组中只有一个数字出现m次，其他数字都出现n次。请找出那个唯一出现m次的数字。假设m不能被n整除</p><pre><code>result = (result &lt;&lt; 1) + bitSums[i] % n  % m;</code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数003-前n个数字二进制中1的个数</title>
      <link href="/2022/03/18/ds-zheng-shu-003-qian-n-ge-shu-zi-er-jin-zhi-zhong-1-de-ge-shu/"/>
      <url>/2022/03/18/ds-zheng-shu-003-qian-n-ge-shu-zi-er-jin-zhi-zhong-1-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。</p><pre class="line-numbers language-java"><code class="language-java">示例 <span class="token number">1</span><span class="token operator">:</span>输入<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">2</span>输出<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>解释<span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token number">1</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">1</span><span class="token number">2</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA"><code class="language-JAVA">示例 2:输入: n = 5输出: [0,1,1,2,1,2]解释:0 --> 01 --> 12 --> 103 --> 114 --> 1005 --> 101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><code>n</code>与<code>n-1</code>之间差一个1，在位运算中就是<code>n</code>与<code>n-1</code>的位相差最后一位1</p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><h4 id="通过-n-amp-n-1-的位运算求解"><a href="#通过-n-amp-n-1-的位运算求解" class="headerlink" title="通过 n&amp;(n-1)的位运算求解"></a>通过 <code>n&amp;(n-1)</code>的位运算求解</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arrResult<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    j <span class="token operator">=</span> j <span class="token operator">&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> arrResult<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过Integer类中的bitCount-方法直接求解"><a href="#通过Integer类中的bitCount-方法直接求解" class="headerlink" title="通过Integer类中的bitCount()方法直接求解"></a>通过<code>Integer</code>类中的<code>bitCount()</code>方法直接求解</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="n-amp-n-1-的位运算求解的改进版本"><a href="#n-amp-n-1-的位运算求解的改进版本" class="headerlink" title="n&amp;(n-1)的位运算求解的改进版本"></a><code>n&amp;(n-1)</code>的位运算求解的改进版本</h4><p>原因在于数字<code>0</code>本来就没有位<code>1</code>。</p><p>这个才是重点：<code>res[i] = res[i &amp; (i - 1)] + 1;</code></p><p>整数<code>i</code>的二进制形式比<code>i &amp; (i - 1)</code>的二进制形式多一个<code>1</code>。可以举例说明</p><table><thead><tr><th>十进制数</th><th>二进制数</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td></tr><tr><td>3</td><td>11</td></tr><tr><td>4</td><td>100</td></tr></tbody></table><p>假如<code>i=4</code>，则<code>i-1=3</code>，可有<code>i &amp; (i - 1)=100 &amp; 011=0</code>。这个规律成立，并且为什么对应数组元素下表的数呢？原因也是上面所说<strong>整数</strong><code>**i**</code><strong>的二进制形式比</strong><code>**i &amp; (i - 1)**</code><strong>的二进制形式多一个</strong><code>**1**</code>。<code>**i &amp; (i - 1)**</code>肯定会对应该一个二进制数，而这个二进制数在数组中肯定有值，也就是相当于对应数组中的数<code>res[i &amp; (i - 1)]</code>与这个<code>res[i]</code>的差值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二个方法countBits-则是通过位运算进行的改进。"><a href="#第二个方法countBits-则是通过位运算进行的改进。" class="headerlink" title="第二个方法countBits_则是通过位运算进行的改进。"></a>第二个方法<code>countBits_</code>则是通过位运算进行的改进。</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits_</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为位运算的执行效率比数值运算效率高，直接是底层操作，而数值计算需要进行转换成二进制，故而效率比较低</p><p>重点是<code>res[i] = res[i &gt;&gt; 1] + (i &amp; 1);</code></p><p>为什么需要左移运算呢？</p><p>因为<code>i</code>的取值只有奇数或者偶数</p><ul><li>如果<code>i</code>是偶数的话，那么最低位就不可能为<code>1</code>，只能为0；另外<code>i</code>左移一位的二进制的<code>1</code>的值还是会没有变化，因为左移一位，相当于把最低位的<code>0</code>给抹去了。也就是计算<code>i/2</code>的结果的二进制<code>1</code>的个数。</li><li>如果<code>i</code>是奇数，则是相当于十进制中<code>i/2 + 1</code>，其他同上</li></ul><p>最后根据<code>(i &amp; 1)</code>判断最低位是奇数还是偶数，则进行<code>+1</code>的操作</p><p><strong>上面几种方法 我个人觉得最后一种方法比较容易理解。</strong></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数002-二进制加法</title>
      <link href="/2022/03/18/ds-zheng-shu-002-er-jin-zhi-jia-fa/"/>
      <url>/2022/03/18/ds-zheng-shu-002-er-jin-zhi-jia-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个 01 字符串 a 和 b ，请计算它们的和，并以二进制字符串的形式输出。</p><p>输入为 非空 字符串且只包含数字 1 和 0。</p><p><strong>示例 1:</strong></p><p>输入: a &#x3D; “11”, b &#x3D; “10”<br>输出: “101”</p><p><strong>示例 2:</strong></p><p>输入: a &#x3D; “1010”, b &#x3D; “1011”<br>输出: “10101”</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>处理这种问题关键在于</p><ol><li>如何取得进位</li><li>如何转换</li></ol><p>因为存在字符串的长度不固定，故不可用<code>int</code>类型，可能会导致溢出</p><p><strong>解决关键有两点</strong></p><ol><li>获取字符串的最后一位，进行加法运算。使用<code>String</code>类中的<code>charAt(int index)</code>方法</li><li>加法运算可能发生进位，需要有一个标志位<code>flag</code>,并依次位数加法，如果进位就进位。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">addBinary</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len_a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len_b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>len_a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> len_b <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> digitA <span class="token operator">=</span> len_a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>len_a<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> digitB <span class="token operator">=</span> len_b <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>len_b<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                        sum <span class="token operator">=</span> digitA <span class="token operator">+</span> digitB <span class="token operator">+</span> flag<span class="token punctuation">;</span>            flag <span class="token operator">=</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> sum <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">:</span> sum<span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DS-整数001-整数除法</title>
      <link href="/2022/03/18/ds-zheng-shu-001-zheng-shu-chu-fa/"/>
      <url>/2022/03/18/ds-zheng-shu-001-zheng-shu-chu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给定两个整数 <code>a</code> 和 <code>b</code> ，求它们的除法的商 <code>a/b</code> ，要求不得使用乘号 <code>&#39;*&#39;</code>、除号 <code>&#39;/&#39;</code> 以及求余符号 <code>&#39;%&#39;</code> 。</p><p><strong>注意：</strong></p><p>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) &#x3D; 8 以及 truncate(-2.7335) &#x3D; -2<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231−1]。本题中，如果除法结果溢出，则返回 231 − 1</p><p><strong>实例</strong></p><p>输入：a &#x3D; 15, b &#x3D; 2<br>输出：7<br>解释：15&#x2F;2 &#x3D; truncate(7.5) &#x3D; 7</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>判断溢出情况 <code>if (a == 0x80000000 &amp;&amp; b == -1) return 0x7fffffff;</code></li><li>判断结果的正负情况  <code>return divide==1?-result:result;</code></li><li>计算商，该问题中计算商采用累加的形式，类似于<code>✖2</code>。<code>value &gt; 0xc0000000 &amp;&amp; a &lt;= (value + value)</code>，其中<code>value &gt; 0xc0000000</code>是说明不能负数溢出。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0x80000000</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> divide <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            a <span class="token operator">=</span> <span class="token operator">-</span>a <span class="token punctuation">;</span>            divide<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>            divide<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> <span class="token function">divideCore</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> divide<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token operator">-</span>result<span class="token operator">:</span>result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divideCore</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">0xc0000000</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>value <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count <span class="token operator">+=</span> count<span class="token punctuation">;</span>                value <span class="token operator">+=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">+=</span> count<span class="token punctuation">;</span>            a <span class="token operator">-=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题matery中代码大括号显示不正确</title>
      <link href="/2022/03/17/hexo-zhu-ti-matery-zhong-dai-ma-da-gua-hao-xian-shi-bu-zheng-que/"/>
      <url>/2022/03/17/hexo-zhu-ti-matery-zhong-dai-ma-da-gua-hao-xian-shi-bu-zheng-que/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo主题matery中代码大括号显示不正确"><a href="#hexo主题matery中代码大括号显示不正确" class="headerlink" title="hexo主题matery中代码大括号显示不正确"></a>hexo主题matery中代码大括号显示不正确</h3><p><code>node_modules/hexo-prism-plugin/src/index.js</code>文件中map里未支持大括号，补上以下内容后发现有效，即在map中加上对应字符即可:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//添加的代码</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span>        <span class="token comment" spellcheck="true">//添加的代码</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>版权声明：本文为CSDN博主「Rewind-922」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_49230318/article/details/111619538">https://blog.csdn.net/weixin_49230318/article/details/111619538</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windos端口被占用解决方法</title>
      <link href="/2022/03/17/windos-duan-kou-bei-zhan-yong-jie-jue-fang-fa/"/>
      <url>/2022/03/17/windos-duan-kou-bei-zhan-yong-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>当启动idea中 运行<code>SpringBoot</code>项目出现</p><p><code>Identify and stop the process that&#39;s listening on port 8888 or configure this application to listen on another port.</code>错误</p><p>发现是端口被占用</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方式一-修改默认端口号"><a href="#方式一-修改默认端口号" class="headerlink" title="方式一-修改默认端口号"></a>方式一-修改默认端口号</h3><p><strong>在application.properties文件中添加server.port&#x3D;8081</strong></p><p><code>server.port=8081</code></p><h3 id="方式二-CMD查杀端口"><a href="#方式二-CMD查杀端口" class="headerlink" title="方式二-CMD查杀端口"></a>方式二-CMD查杀端口</h3><h4 id="1-netstat-ano"><a href="#1-netstat-ano" class="headerlink" title="1. netstat -ano"></a>1. netstat -ano</h4><ol><li>按win键，输入cmd，用管理员身份运行</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1647519134092-da513043-627c-4251-8324-1ee076931afa.png" alt="img"></p><ol start="2"><li>找到占用的端口8888 ，PID为3632</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1647519059519-ede4585c-8888-4e6a-9e8a-d00b421bbd4e.png" alt="img"></p><ol start="3"><li>输入<code>taskkill /pid 3632 -f</code> 杀掉端口</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2040418/1647519266735-8773d4b8-1f21-424e-8774-d291273b80b8.png" alt="img"></p><h2 id="第二种：netstat-aon-findstr-8888"><a href="#第二种：netstat-aon-findstr-8888" class="headerlink" title="第二种：netstat -aon|findstr 8888"></a>第二种：netstat -aon|findstr 8888</h2><ol><li>还是先打开cmd窗口，用管理员运行</li><li>输入<code>netstat -aon|findstr 8888</code>并回车</li></ol><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a><strong>参考文献：</strong></h2><p><a href="https://blog.csdn.net/weixin_44519467/article/details/104072131">https://blog.csdn.net/weixin_44519467/article/details/104072131</a></p><p><a href="https://blog.csdn.net/weixin_44519467/article/details/104072103">https://blog.csdn.net/weixin_44519467/article/details/104072103</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo报ErrorSpanwnFailed</title>
      <link href="/2022/03/16/hexo-bao-errorspanwnfailed/"/>
      <url>/2022/03/16/hexo-bao-errorspanwnfailed/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo部署出现错误-Error-Spawn-failed-解决方式"><a href="#Hexo部署出现错误-Error-Spawn-failed-解决方式" class="headerlink" title="Hexo部署出现错误 Error: Spawn failed 解决方式"></a>Hexo部署出现错误 Error: Spawn failed 解决方式</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##进入站点根目录</span><span class="token comment" spellcheck="true">##删除git提交内容文件夹</span><span class="token function">rm</span> -rf .deploy_git/<span class="token comment" spellcheck="true">##执行</span><span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span><span class="token comment" spellcheck="true">##最后</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>修改 _config.yml 文件，将配置地址http方式切换成ssh方式</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##进入站点根目录</span><span class="token comment" spellcheck="true">##删除git提交内容文件夹</span>vim _config.yml<span class="token comment" spellcheck="true">##修改</span>deploy:type: <span class="token function">git</span>repository: https://github.com/Uninfo/blog.github.io.git -<span class="token operator">></span> git@github.com:Uninfo/blog.github.io.gitbranch: master<span class="token comment" spellcheck="true">##最后</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><blockquote><p>强制上传，不建议</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##进入站点根目录</span><span class="token comment" spellcheck="true">##进入depoly文件夹</span><span class="token function">cd</span> .deploy_git/<span class="token comment" spellcheck="true">##强制推送</span><span class="token function">git</span> push -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>本文作者：</strong>毋忘草</li><li><strong>本文链接：</strong><a href="https://blog.myosotis.xin/2021/08/25/hexo-8/">https://blog.myosotis.xin/2021/08/25/hexo-8/</a></li><li><strong>版权声明：</strong>本博客所有文章除特别声明外，均默认采用 许可协议。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java书籍阅读顺序</title>
      <link href="/2022/03/16/java-shu-ji-yue-du-shun-xu/"/>
      <url>/2022/03/16/java-shu-ji-yue-du-shun-xu/</url>
      
        <content type="html"><![CDATA[<p>今天和大家说说学 Java 的读书路线。路线中的书籍我自己都看过，希望整理的这份读书路线，能帮大家少走弯路，对大家学 Java 有个参考。</p><h2 id="初学乍练"><a href="#初学乍练" class="headerlink" title="初学乍练"></a>初学乍练</h2><p>入门 Java，推荐《Java核心技术》第 11 版，这其实是一套书，分为两本:</p><ul><li>卷1 基础知识（豆瓣 9.2 分）</li><li>卷2 高级特性（豆瓣 8.4 分）</li></ul><p><img src="https://pic2.zhimg.com/80/v2-1147acb50369aeb851b740501c8bf46d_720w.jpg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-4e6d44fb13a8840c4d0ffc64c4c58c8c_720w.jpg" alt="img"></p><p>我估计 70% 的 Java 程序员入门看的是这本书，写的经典、全面，对 Java 各种特性，都会有对应的代码示例。</p><p>不过，这里的内容，有不少是没必要学的。我在以前的文章提起过，大家可以参考。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&mid=2247485760&idx=3&sn=1cb21c2b568ba2812d5ae5cfb5a58af8&chksm=fcd8c501cbaf4c17ac5978b0e3dadaa8b9a240a0f3c759380f1bfe1de2b478dff1add4dde9c8&token=909381664&lang=zh_CN#rd">Java学习之路上的“路障”太坑了</a></p><p>同时，光看这本书作为入门有个问题，就是只能知其然，却不知所以然。而不知所以然，必然会导致咱们的基础会不够牢靠。</p><p>所以再推荐一本书配合《Java核心技术》一起看，书的名字叫《Java编程的逻辑》（豆瓣 9.1 分），作者马俊昌。</p><p><img src="https://pic1.zhimg.com/80/v2-0cb5e05b4705ad6229a7abdc5c293188_720w.jpg" alt="img"></p><p>这本书讲解 Java 基础知识的基础上还会告诉你底层的原理，比如，Java 的枚举本质是什么，还会告诉你 Java 为什么这样设计 API。</p><p>总之，《Java核心技术》和《Java编程的逻辑》联合学习，算是珠联璧合，对入门 Java 是再合适不过的了。</p><p>这里多说几句，入门打基础十分重要，对于编程这种实践类的学习，想打好基础，光靠读书，是远远不够的。一定要经过大量的代码练习。所以，在这个时期一定要多作代码练习。这里，我给出一些可以自己尝试的练习：排序算法的小练习</p><ul><li>字符串查找的小练习</li><li>对系统文件做下增删查改</li><li>递归的小练习</li><li>使用 Java 集合的小练习</li><li>写个小游戏、小东西能综合训练下学到的所有技能</li></ul><h2 id="得窥门径"><a href="#得窥门径" class="headerlink" title="得窥门径"></a>得窥门径</h2><p>做程序员，大部分的时候，咱们都需要通过写各种各样的 SQL 操作数据库。咱们是 CRUD Boy 嘛。</p><p>所以，SQL 咱们要学，学 SQL 我推荐《SQL必知必会（第5版）》（豆瓣 9.5 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-c134651e4e29c1a32a45d65a22c49afc_720w.jpg" alt="img"></p><p>这本书的组织结构非常好，哪怕是你对 SQL 一窍不通，也能通过这本书的引导，由浅入深的把 SQL 语言学个七七八八。</p><p>更重要的是，这本书叫必知必会，也就是说，它的内容都是精挑细选，必须学的内容。里面半分冗余的知识点都没有，内容全是干货。一定要好好读这本书。</p><h2 id="略有所成"><a href="#略有所成" class="headerlink" title="略有所成"></a>略有所成</h2><p>学会了 Java 基础，知道了怎么用 SQL 之后，如果往下走，想继续提升自己该学什么？</p><p>我的答案是去深入掌握多线程编程。因为只有懂了多线程编程，咱们才能处理各种稍微困难的需求。比如，快速处理大量用户对系统的访问；又比如，想同时访问多个第三方接口。</p><p>多线程编程又叫并发编程，其实是很复杂的事情，看一本书就想掌握它是不太现实的。我这里会推荐三本书，配合起来，一步步从多线程的原理到多线程的实战全部贯穿起来。</p><p>对于多线程的理解，我推荐的第一本书是《Java并发编程实战》（豆瓣 9.0 分）。</p><p><img src="https://pic3.zhimg.com/80/v2-1b7e9d8d69b71c85e5f0536ff2b6bfe6_720w.jpg" alt="img"></p><p>这本书是一本非常经典的关于多线程编程的书。里面对Java的多线程方方面面的细节都讲的非常到位。只是由于多线程确实太复杂，涉及到的知识也太广了，导致这本书出现了两个问题：</p><ol><li>理论过多：《Java并发编程实战 》里会花费很大篇幅，去阐述一些多线程涉及到的理念和思想，但是代码例子却给的极少，这就导致咱们看的很吃力、很累。</li><li>某些点讲的不够透：多线程涉及到的知识非常广，《Java并发编程实战 》是尽量全涉及了。这就造成很多知识点讲的很浅，没有讲透。这就会让人很困惑，导致有些知识点连不起来，影响对整本书的理解。</li></ol><p>所以，我这里推荐第二本书《Java多线程编程实战指南（核心篇）》（豆瓣 9.0 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-b4b8e70f51e63a70a7daade95ecad770_720w.jpg" alt="img"></p><p>这本书代码例子多，《Java并发编程实战 》有些讲不透的知识点，这本书会有所弥补。所以，当看《Java并发编程实战 》的时候，不管是需要练习代码，还是想去搞清楚知识点，《Java多线程编程实战指南 》这本书都极为合适。</p><p>多线程我再强调一下，这是 Java 很高级的特性，也是很难的部分，很多哪怕是工作了 3、4 年的程序员，对此也掌握的不到位。</p><p>上面说的两本书，有原理，有代码示例，如果是换成别的知识，那可能足够了。可是对于多线程这么复杂的东西，我们还需要把学过的所有零碎知识点去综合贯穿起来，形成关于多线程的知识体系才算是真正掌握到位。</p><p>所以，这就得推荐第三本书《图解Java多线程设计模式》（豆瓣 8.6 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-01228a52a6a23d2b1f831046a17e8a68_720w.jpg" alt="img"></p><p>跟着这本书的讲解，把咱们所有的知识点通过练习书中介绍的所有模式，去串起来，才最终算是多线程的学习告了一个段落。</p><h2 id="登堂入室"><a href="#登堂入室" class="headerlink" title="登堂入室"></a>登堂入室</h2><p>学会了多线程编程，咱们此时要知道一件事，大部分时候，多线程编程，其实就是网络编程的最重要的一种手段。而网络编程，虽然有了 Netty 框架等很优质的网络框架了，但是理解背后的原理，对咱们定位项目的 bug，优化代码的性能，帮助非常大。</p><p>《Java TCP&#x2F;IP Socket编程》（豆瓣 8.0 分）</p><p><img src="https://pic1.zhimg.com/80/v2-1b9f0706b9dd1aa8f76d346e0bb7fcbc_720w.jpg" alt="img"></p><p>这本书，我们既可以去学到必要的网络基础，也能学会怎么用 Java 去网络编程，非常推荐。</p><p>对于网络编程，大家都知道，这是易学难精的技能。学懂原理，了解网络编程，看看我上面推荐的书就够了。但是，要精通网络编程，写好网络相关的程序，那是相当不容易的。</p><p>所以，在 Java 圈，一旦遇到网络编程相关的事情，大家都会采用 Netty 框架去做。Netty 框架让我们能不需要成为网络编程大师，就能写出非常优秀的网络应用。</p><p>了解 Netty 框架对咱们也是非常重要的一件事，学习 Netty 框架，推荐《Netty实战》（豆瓣 7.5 分）。</p><p><img src="https://pic3.zhimg.com/80/v2-bf3b15ea95976f9729e1eaf650dd4886_720w.jpg" alt="img"></p><p>这本书，把 Netty 的方方面面讲的很全，Netty 的设计思想也覆盖了大部分，对于熟练使用 Netty 完全够用了。</p><h2 id="融汇贯通"><a href="#融汇贯通" class="headerlink" title="融汇贯通"></a>融汇贯通</h2><p>作为 Java 后端工程师，几乎都要用到 Spring 框架的。哦不对，Spring 已经不能叫框架了，得叫体系、生态了。学好 Spring，对咱们找工作，做项目，甚至设计架构，都是极其重要的。</p><p>但是，学好 Spring 也没那么容易。Spring 发展到现在，它已经成为了一套完整的体系了，而且 Spring 迭代非常快，几乎每年都会出现大的变化。所以，市面上的书籍，单独靠那么一两本书，是不太可能学好的，建议把一些经典的 Spring 的书联合起来读，才有希望深入掌握Spring。</p><p>对于 Spring 这套体系，它现在是又多又繁杂，就算要入门，都不知道从何处下手。这里，我想谈谈我的经验。</p><p>虽然 Spring 变化确实很快，但是，它有几个地方，是这么多年几乎没发生过什么变化的。</p><p>没有什么变化的第一部分，就是 Spring 的设计思路。Spring 的设计思路，<strong>永远都是作为 Bean 的容器，去管理好 Bean</strong> ，这是它永恒不变的地方。</p><p>没有什么变化的第二部分，就是 Spring 的内核。Spring 的 ApplicationContext 等核心 API 是没有什么大的变化的。</p><p>所以，咱们就应该先从 Spring 这些不变的核心先入手。<strong>掌握住 Spring 的思想，Spring 的内核，哪怕 Spring 本身再变化，对咱们来说，也只是一种外在的 API 变化而已。</strong></p><p>要达到这个目的，我会推荐大家看一本很老的书《Spring揭秘》（豆瓣 9.1分）。</p><p><img src="https://pic3.zhimg.com/80/v2-5786bd97feb05dc0a41c67920de0713e_720w.jpg" alt="img"></p><p>虽然这本书主要是以 Spring3 的讲解为基础，但是，这本书对于 Spring 的编程思想讲的极为透彻，是有关 Spring 的书中，难得一见的好书。入门 Spring，这是我推荐的第一本书。</p><p>理解了 Spring 的编程思想不够，我们需要利用这些思想，去实践演练，加强我们对 Spring 的理解。</p><p>这时候，就得有本书，能真正的带我们实战下Spring的各个组件——《精通Spring 4.x》（豆瓣 8.5 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-b6cd4c0e9d190e8f484e6dcad4a054c4_720w.jpg" alt="img"></p><p>我知道现在 Spring 5 在逐渐进入主流，但是，Spring 5 也只是在 Spring 4 的基础上增加了一些新特性。而 Spring 5 的书，我至今没看到有《精通Spring 4.x》这本讲的这么全的，所以，写代码做练习，还是推荐用《精通Spring 4.x》。</p><p>理解了 Spring 的理念，用很多代码练习练习实践之后，我们就只需要知道 Spring 5 的一些特性就能跟上 Spring 发展的步伐了。</p><p>可以看下《Spring 5 开发大全》（豆瓣 8.3 分），这本书对 Spring 5 的新特性介绍很全。我们只需要翻翻，熟悉新特性、新 API 即可。</p><p>另外，Spring 5 有个变化最大的地方：它用了很多响应式编程的东西。这方面，大家相对比较陌生，有闲有钱的话，可以看看《Spring响应式编程》。</p><p>关于 SpringBoot，由于它的易用性，它已经迈入主流。不过 SpringBoot 也只是以 Spring 为内核的一套应用框架而已。找本书，学习它是如何通过添加一些模块和功能，去降低大家使用 Spring 的门槛的，也就够了。</p><p>同样，有闲有钱的话，可以读下《Spring Boot 2实战之旅》。</p><h2 id="返璞归真"><a href="#返璞归真" class="headerlink" title="返璞归真"></a>返璞归真</h2><p>前面大家跟着我推荐的书学习完了，基本就可以是一位非常合格的程序员了。但是，注意，你只是合格，但是还不算优秀。</p><p>如果我们想更加优秀，让自己职业道路能走的更远，还需要一些非开发的知识学习。只有通过叠加这些 Buff，我们才能在众多的技术同事中，脱颖而出，锥出于囊。</p><p>在实际开发里，代码可读是我们评价同事好不好合作的一个重要标准。一位同事，写的代码乱七八糟，你不管是接手维护还是想只是用一些对方的代码，都非常别扭难受。</p><p>所以，咱们的代码一定要写的干净整洁可读，给别人非常好的印象。这样，对咱们的团队合作和职场发展，才会有更大的帮助。</p><p>把代码写的干净可读，我推荐看《代码整洁之道》（豆瓣 8.7 分）。</p><p><img src="https://pic4.zhimg.com/80/v2-9237fa21cab46faea0f799d1586cc74b_720w.jpg" alt="img"></p><p>这本书，讲解了什么才是好的代码，跟着这本书学，你写的代码会更让人赞赏，也更让人愿意和你合作。</p><p>除了代码可读，咱们还得让咱们写的代码好维护，易扩展。因为需求是千变万化的，如果你写的代码可维护性，可扩展性不够，那后续你会陷入无休止的改代码海洋里，你所有的精力都会被这些不停变换的需求吃干抹净，直接让你寸步难行。</p><p>而写易扩展，易维护的代码，就必须知道设计模式。有了设计模式，你闭眼都能写出不错的代码来。学习设计模式，推荐《Java设计模式》（豆瓣 9.1 分）。</p><p><img src="https://pic1.zhimg.com/80/v2-5e13947d57e1eebec69ec2bad3686918_720w.jpg" alt="img"></p><p>这本书，对设计模式的来历发展，概念思想，讲解的淋漓尽致，推荐阅读。</p><p>Java 这套读书的学习路线，是我一本一本全部读过，才推荐给大家的，希望大家最终能坚持读完，学透。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后再总结一下这个书单：《Java核心技术》卷1、2</p><ul><li>《Java编程的逻辑》</li><li>《SQL必知必会》</li><li>《Java并发编程实战》</li><li>《Java多线程编程实战指南（核心篇）》</li><li>《图解Java多线程设计模式》</li><li>《Java TCP&#x2F;IP Socket编程》</li><li>《Netty实战》</li><li>《Spring揭秘》</li><li>《精通Spring 4.x》</li><li>《Spring 5 开发大全》</li><li>《Spring响应式编程》</li><li>《Spring Boot 2实战之旅》</li><li>《代码整洁之道》</li><li>《Java设计模式》</li></ul><p>以上书单都是我推荐的，其他没列的书籍，比如《Java编程思想》、《重构》等等，也都是好书，大家自己酌情补充。</p><blockquote><p>转载于<a href="https://zhuanlan.zhihu.com/p/444636383">https://zhuanlan.zhihu.com/p/444636383</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习视频资料</title>
      <link href="/2022/03/16/java-xue-xi-shi-pin-zi-liao/"/>
      <url>/2022/03/16/java-xue-xi-shi-pin-zi-liao/</url>
      
        <content type="html"><![CDATA[<p>工作十几年的Java程序员来回答一下。</p><p>有一说一，培训机构的视频有利有弊：</p><ul><li>利：适合零基础小白入门。</li><li>利：质量肯定是错不了的，相当于买东西之前先让你试吃、试用，肯定要用最好的对吧，否则会砸了自己的招牌。</li><li>弊：培训机构最终还是为了赚钱，所以视频会有所保留，同时会有套路。</li></ul><p><strong>所以，看视频的话，我更建议你按照推荐的视频来学习</strong>（包括了部分尚硅谷、狂神说的视频，也有大学老师的视频）<strong>。</strong></p><p>以下视频是我花了很长时间从b站整理出来的，都是播放量和点赞多的，评价好的视频。</p><p>而且，<strong>我写的这个顺序，就是一份学习路线</strong>，直接照着学就行了。有的一个内容里有多个视频课程，选择适合你的一个就行了。</p><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><p><strong>1、动力节点Java零基础教程视频</strong></p><p>1168万播放，16万赞。千万播放量！</p><p>适合零基础，Java视频中讲解了Java开发环境搭建、基础语法、面向对象。</p><ul><li>P1—P159：JDK8版零基础</li><li>P160—P476：JDK13版零基础【2020版】</li><li>P477—P844：JDK13版进阶【2020版】</li></ul><p><a href="https//https://www.bilibili.com/video/av11361088"><strong>动力节点Java零基础教程视频</strong></a></p><p><strong>2、宋红康的Java零基础入门教程</strong></p><p>784万播放，6.6万赞</p><p>从0基础讲起，循序渐进。涉及JavaSE方方面面，融入数据结构、设计模式、JVM等。2万多行代码+3套课堂实战项目+2套课后实战项目+近百道企业面试真题。</p><p><a href="https://www.bilibili.com/video/av48144058">全网最全Java零基础入门教程（含百道Java真题，2万多行Java代码实战</a></p><p><strong>3、高淇老师的Java300集零基础适合初学者视频教程</strong></p><p>37万播放，1.7万赞</p><p>基于JDK13、IDEA平台讲解的，视频中穿插多个实战项目。高淇老师讲解的非常细致，每一个知识点都讲解的通俗易懂，由浅入深。</p><p>[【尚学堂】Java300集零基础适合初学者视频教程_Java300集零基础教程_Java初学入门视频基础巩固教程_Java语言入门到精通]](<a href="https://www.bilibili.com/video/BV1oy4y1H7R6">https://www.bilibili.com/video/BV1oy4y1H7R6</a>)</p><p><strong>4、求知讲堂Java视频 128天完整版</strong></p><p>115万播放，2.2万赞</p><p>讲解同样的内容只需别套课程一半时间，而且老师讲的清晰，比较有条理，而且没啥废话。</p><p><a href="https://www.bilibili.com/video/av76235341">求知讲堂Java视频 128天完整版 学完可就业_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av76235341https://www.bilibili.com/video/av76235341https://www.bilibili.com/video/av76235341<img src="https://pic3.zhimg.com/v2-e38836b6f76661a06875c379c58ffea6_180x120.jpg" alt="img"></a></p><p><strong>5、刘意(风清扬)Java入门视频</strong></p><p>40万播放，2.6k赞</p><p>写的是2019版，但是感觉像之前看的2015版。</p><p><a href="https://www.bilibili.com/video/av33742840">Java_黑马刘意(风清扬)2019最新版_Java入门视频_Java入门_Java编程_Java入门教程_黑马教程_黑马程序员_idea版_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av33742840https://www.bilibili.com/video/av33742840https://www.bilibili.com/video/av33742840<img src="https://pic4.zhimg.com/v2-97c1d173167d3b8551e34e8881cb642f_180x120.jpg" alt="img"></a></p><p><strong>6、韩顺平的零基础30天学会Java</strong></p><p>98.8万播放,1.8万赞</p><p>韩老师毕业于清华大学，录制的视频课程质量都还可以。</p><p><a href="https://www.bilibili.com/video/BV1fh411y7R8">【零基础 快速学Java】韩顺平 零基础30天学会Java_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1fh411y7R8https://www.bilibili.com/video/BV1fh411y7R8https://www.bilibili.com/video/BV1fh411y7R8<img src="https://pic3.zhimg.com/v2-1b6ddcb1e457f46187e5e1e5fbf07222_180x120.jpg" alt="img"></a></p><h3 id="Java设计模式"><a href="#Java设计模式" class="headerlink" title="Java设计模式"></a>Java设计模式</h3><p>韩顺平的Java设计模式（图解+框架源码剖析）</p><p>92万播放，1万赞</p><p><a href="https://www.bilibili.com/video/av57936239">尚硅谷Java设计模式（图解+框架源码剖析）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av57936239https://www.bilibili.com/video/av57936239https://www.bilibili.com/video/av57936239<img src="https://pic3.zhimg.com/v2-01daa8fae91683634c1125a2df44b2fe_180x120.jpg" alt="img"></a></p><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><p><strong>1、2020最新Spring框架教程IDEA版</strong></p><p>57万播放，1.1万赞</p><p><a href="https://www.bilibili.com/video/BV1nz4y1d7uy">2020最新Spring框架教程【IDEA版】-Spring框架从入门到精通_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1nz4y1d7uyhttps://www.bilibili.com/video/BV1nz4y1d7uyhttps://www.bilibili.com/video/BV1nz4y1d7uy<img src="https://pic4.zhimg.com/v2-1babdad52915db3a083e8cab8149ed3f_180x120.jpg" alt="img"></a></p><p><strong>2、狂神说Spring5最新完整教程IDEA版</strong></p><p>129万播放，1.5万赞</p><p><a href="https://www.bilibili.com/video/BV1WE411d7Dv">【狂神说Java】Spring5最新完整教程IDEA版通俗易懂_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1WE411d7Dvhttps://www.bilibili.com/video/BV1WE411d7Dvhttps://www.bilibili.com/video/BV1WE411d7Dv<img src="https://pic1.zhimg.com/v2-0e9c15a2d14b9f73959881efea2da2a4_180x120.jpg" alt="img"></a></p><p><strong>3、尚硅谷Spring5框架最新版教程（idea版）</strong></p><p>90万播放，近万赞</p><p><a href="https://www.bilibili.com/video/BV1Vf4y127N5">尚硅谷-Spring5框架最新版教程（idea版）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Vf4y127N5https://www.bilibili.com/video/BV1Vf4y127N5https://www.bilibili.com/video/BV1Vf4y127N5<img src="https://pic2.zhimg.com/v2-ed214e38c38938087a65ca004903f421_180x120.jpg" alt="img"></a></p><p><strong>4、spring源码全集</strong></p><p>13万播放，1.2k赞</p><p><a href="https://www.bilibili.com/video/av71093907">【spring源码全集】B站唯一阿里P8级别的架构师教程_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av71093907https://www.bilibili.com/video/av71093907https://www.bilibili.com/video/av71093907<img src="https://pic3.zhimg.com/v2-82c0ef000fa82c38a935222df299326e_180x120.jpg" alt="img"></a></p><p><strong>5、spring注解驱动开发-源码版-雷丰阳</strong></p><p>23万播放，2.5k赞</p><p><a href="https://www.bilibili.com/video/BV1gW411W7wy">尚硅谷Spring注解驱动教程(雷丰阳源码级讲解)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1gW411W7wyhttps://www.bilibili.com/video/BV1gW411W7wyhttps://www.bilibili.com/video/BV1gW411W7wy<img src="https://pic1.zhimg.com/v2-6d1e4cf03a8e2a486104db5d42d220e0_180x120.jpg" alt="img"></a></p><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p><strong>1、SpringMVC最新教程IDEA版</strong></p><p>89万播放，一万赞</p><p><a href="https://www.bilibili.com/video/BV1aE41167Tu">【狂神说Java】SpringMVC最新教程IDEA版通俗易懂_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1aE41167Tuhttps://www.bilibili.com/video/BV1aE41167Tuhttps://www.bilibili.com/video/BV1aE41167Tu<img src="https://pic4.zhimg.com/v2-a94b0d3b904cca178aa5b7efb2be27fb_180x120.jpg" alt="img"></a></p><p><strong>2、SpringMVC 2021最新教程</strong></p><p>18万播放，3千赞</p><p><a href="https://www.bilibili.com/video/BV1Ry4y1574R">【尚硅谷】SpringMVC 2021最新教程丨一套快速上手spring mvc_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Ry4y1574Rhttps://www.bilibili.com/video/BV1Ry4y1574Rhttps://www.bilibili.com/video/BV1Ry4y1574R<img src="https://pic1.zhimg.com/v2-d693fbb29f16757c1aeed1bb57b44bd0_180x120.jpg" alt="img"></a></p><h3 id="MySQL、Redis"><a href="#MySQL、Redis" class="headerlink" title="MySQL、Redis"></a>MySQL、Redis</h3><p><strong>1、MySQL_基础+高级篇</strong></p><p>446万播放，4.4万赞</p><p><a href="https://www.bilibili.com/video/BV12b411K7Zu">MySQL_基础+高级篇- 数据库 -sql -mysql教程_mysql视频_mysql入门_尚硅谷_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV12b411K7Zuhttps://www.bilibili.com/video/BV12b411K7Zuhttps://www.bilibili.com/video/BV12b411K7Zu<img src="https://pic2.zhimg.com/v2-bb9aba60fc4e4aae76508e578116c2e5_180x120.jpg" alt="img"></a></p><p><strong>2、老杜带你学_mysql入门基础</strong></p><p>363万播放，2.5万赞</p><p><a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">老杜带你学_mysql入门基础（mysql基础视频+数据库实战)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Vy4y1z7EXhttps://www.bilibili.com/video/BV1Vy4y1z7EXhttps://www.bilibili.com/video/BV1Vy4y1z7EX<img src="https://pic3.zhimg.com/v2-54dac3c35ba2117e9254f0a9c50ad6a2_180x120.jpg" alt="img"></a></p><p><strong>3、2021最新Redis6入门到精通</strong></p><p><a href="https://www.bilibili.com/video/BV1Rv41177Af">【尚硅谷】2021 最新 Redis 6 入门到精通 超详细 教程_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Rv41177Afhttps://www.bilibili.com/video/BV1Rv41177Afhttps://www.bilibili.com/video/BV1Rv41177Af<img src="https://pic3.zhimg.com/v2-41bf26ff57e8d46c55bb49524f4431f2_180x120.jpg" alt="img"></a></p><h3 id="Mybatis、MyBatisPlus"><a href="#Mybatis、MyBatisPlus" class="headerlink" title="Mybatis、MyBatisPlus"></a>Mybatis、MyBatisPlus</h3><p><strong>1、狂神说Mybatis最新完整教程IDEA版</strong></p><p>115万播放，1.4万赞</p><p><a href="https://www.bilibili.com/video/BV1NE411Q7Nx">【狂神说Java】Mybatis最新完整教程IDEA版通俗易懂_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1NE411Q7Nxhttps://www.bilibili.com/video/BV1NE411Q7Nxhttps://www.bilibili.com/video/BV1NE411Q7Nx<img src="https://pic2.zhimg.com/v2-07cb8f3dc15821410a959bb22fca85dd_180x120.jpg" alt="img"></a></p><p><strong>2、尚硅谷MyBatis实战教程全套完整版</strong></p><p>26万播放，2千赞</p><p><a href="https://www.bilibili.com/video/BV1mW411M737">尚硅谷MyBatis实战教程全套完整版(初学者零基础从入门到精通,好评如潮,资料齐全)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1mW411M737https://www.bilibili.com/video/BV1mW411M737https://www.bilibili.com/video/BV1mW411M737<img src="https://pic2.zhimg.com/v2-1c59c31d65f9803516ec487e2b05d4cd_180x120.jpg" alt="img"></a></p><p><strong>3、MyBatis-Plus入门-慕课网</strong></p><p><a href="https://www.imooc.com/learn/1130">MyBatis-Plus入门教程-慕课网https://www.imooc.com/learn/1130https://www.imooc.com/learn/1130https://www.imooc.com/learn/1130</a></p><p><strong>4、MyBatis-Plus进阶-慕课网</strong></p><p><a href="https://www.imooc.com/learn/1171">MyBatis-Plus进阶-慕课网https://www.imooc.com/learn/1171https://www.imooc.com/learn/1171https://www.imooc.com/learn/1171</a></p><h3 id="Java框架整合"><a href="#Java框架整合" class="headerlink" title="Java框架整合"></a>Java框架整合</h3><p><strong>1、雷丰阳大神的Spring、Spring MVC、MyBatis课程</strong></p><p>69万播放，4千赞</p><p><a href="https://www.bilibili.com/video/av56193747">雷神的Spring、Spring MVC、MyBatis课程_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av56193747https://www.bilibili.com/video/av56193747https://www.bilibili.com/video/av56193747<img src="https://pic3.zhimg.com/v2-1119f76ae7641dab764350e458cdb6ce_180x120.jpg" alt="img"></a></p><p><strong>2、尚硅谷SSM实战演练丨ssm整合快速开发CRUD</strong></p><p>28万播放，2千赞</p><p>基于Maven+SpringMVC+Spring+MyBatis+Bootstrap的组合，快速开发一个完整的CRUD功能。</p><p><a href="https://www.bilibili.com/video/av21045215">尚硅谷SSM实战演练丨ssm整合快速开发CRUD_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av21045215https://www.bilibili.com/video/av21045215https://www.bilibili.com/video/av21045215<img src="https://pic4.zhimg.com/v2-ce6a9eaebf8dae1e0f153c91f34be497_180x120.jpg" alt="img"></a></p><p><strong>3、狂神说SSM框架整合教学IDEA版最新</strong></p><p>22万播放，3千赞</p><p><a href="https://www.bilibili.com/video/av73118229">【狂神说Java】SSM框架最新整合教学IDEA版_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av73118229https://www.bilibili.com/video/av73118229https://www.bilibili.com/video/av73118229<img src="https://pic4.zhimg.com/v2-c4b62c1cea064cfef5c57f532791f743_180x120.jpg" alt="img"></a></p><p><strong>4、传智播客SSM框架视频整合</strong></p><p>5.7万播放，200多赞</p><p><a href="https://www.bilibili.com/video/av29422149">【javaWeb(SSM)】+SSM框架视频整合+(传智播客)（一）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av29422149https://www.bilibili.com/video/av29422149https://www.bilibili.com/video/av29422149<img src="https://pic4.zhimg.com/v2-81388d23e2227ac698fc1e79687c865f_180x120.jpg" alt="img"></a></p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p><strong>1、雷丰阳2021版SpringBoot2零基础入门</strong></p><p>102万播放，1.4万赞</p><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT">雷丰阳2021版SpringBoot2零基础入门springboot全套完整版（spring boot2）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV19K4y1L7MThttps://www.bilibili.com/video/BV19K4y1L7MThttps://www.bilibili.com/video/BV19K4y1L7MT<img src="https://pic1.zhimg.com/v2-2f1aa26c1b10c7d20c39ac46c8c91e80_180x120.jpg" alt="img"></a></p><p><strong>2、SpringBoot教程-雷神源码级别讲解</strong></p><p>118万播放，8.6k赞</p><p><a href="https://www.bilibili.com/video/BV1gW411W76m">尚硅谷SpringBoot顶尖教程(springboot之idea版spring boot)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1gW411W76mhttps://www.bilibili.com/video/BV1gW411W76mhttps://www.bilibili.com/video/BV1gW411W76m<img src="https://pic2.zhimg.com/v2-695d606ab922e2307e28832f1d46a825_180x120.jpg" alt="img"></a></p><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p><strong>1、SpringCloud框架开发教程-SpringCloudAlibaba微服务分布式架构</strong></p><p>204万播放，1.8万赞</p><p><a href="https://www.bilibili.com/video/BV18E411x7eT">尚硅谷SpringCloud框架开发教程(SpringCloudAlibaba微服务分布式架构丨Spring Cloud)_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV18E411x7eThttps://www.bilibili.com/video/BV18E411x7eThttps://www.bilibili.com/video/BV18E411x7eT<img src="https://pic4.zhimg.com/v2-30b9fa1d652f5b33bd0e5318adb78a0b_180x120.jpg" alt="img"></a></p><p><strong>2、SpringCloud+Vue项目实战——社交项目</strong></p><p>12万播放，750赞</p><p><a href="https://www.bilibili.com/video/av63499215">SpringCloud+Vue项目实战——社交项目_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av63499215https://www.bilibili.com/video/av63499215https://www.bilibili.com/video/av63499215<img src="https://pic2.zhimg.com/v2-cd218b3141f87998bf66aaec8635da45_180x120.jpg" alt="img"></a></p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>尚硅谷宋红康JVM全套教程</p><p>171万播放，2万赞</p><p>课程的内容分为 3 部分：内存与垃圾回收篇、字节码与类的加载篇、性能监控与调优篇。基本把 JVM 中重要的知识点都涵盖到了。</p><p><a href="https://www.bilibili.com/video/av83622425">尚硅谷JVM全套教程，百万播放，全网巅峰（宋红康详解java虚拟机）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av83622425https://www.bilibili.com/video/av83622425https://www.bilibili.com/video/av83622425<img src="https://pic1.zhimg.com/v2-e72468ab70f1d880312da1a647186864_180x120.jpg" alt="img"></a></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><strong>1、2021韩顺平：一周学会Linux</strong></p><p>62万播放，1.7万赞</p><p><a href="https://www.bilibili.com/video/BV1Sv411r7vd">【小白入门 通俗易懂】2021韩顺平 一周学会Linux_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1Sv411r7vdhttps://www.bilibili.com/video/BV1Sv411r7vdhttps://www.bilibili.com/video/BV1Sv411r7vd<img src="https://pic1.zhimg.com/v2-914a9e8db7e53c60d4ea41ee739ab4b4_180x120.jpg" alt="img"></a></p><p><strong>2、史上最牛的Linux视频教程—兄弟连</strong></p><p>292万播放，3.3万赞</p><p><a href="https://www.bilibili.com/video/BV1mW411i7Qf">史上最牛的Linux视频教程—兄弟连_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1mW411i7Qfhttps://www.bilibili.com/video/BV1mW411i7Qfhttps://www.bilibili.com/video/BV1mW411i7Qf<img src="https://pic3.zhimg.com/v2-15cbbc37626a9c354ff6ee4471af9c66_180x120.jpg" alt="img"></a></p><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><h4 id="1、数据结构与算法基础（青岛大学-王卓）"><a href="#1、数据结构与算法基础（青岛大学-王卓）" class="headerlink" title="** 1、数据结构与算法基础（青岛大学-王卓）**"></a>** 1、数据结构与算法基础（青岛大学-王卓）**</h4><p>189万播放，2.6万赞，点赞率很高</p><p>老师的声音很好听，听起来如沐春风，PPT做的也很好。</p><p><a href="https://www.bilibili.com/video/BV1nJ411V7bd">数据结构与算法基础（青岛大学-王卓）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1nJ411V7bdhttps://www.bilibili.com/video/BV1nJ411V7bdhttps://www.bilibili.com/video/BV1nJ411V7bd<img src="https://pic4.zhimg.com/v2-f3a30aac4965687457c22ff7098b4903_180x120.jpg" alt="img"></a></p><h4 id="2、郝斌-数据结构入门"><a href="#2、郝斌-数据结构入门" class="headerlink" title="2、郝斌-数据结构入门"></a><strong>2、郝斌-数据结构入门</strong></h4><p>106万播放，1.3万赞</p><p>AVI转的MP4，网上源文件是swf格式的，帧率比较低，所以看着略有不流畅。</p><p><a href="https://www.bilibili.com/video/av6159200">【郝斌】-数据结构入门_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av6159200https://www.bilibili.com/video/av6159200https://www.bilibili.com/video/av6159200</a></p><h4 id="3、尚硅谷Java数据结构与java算法（Java数据结构与算法）"><a href="#3、尚硅谷Java数据结构与java算法（Java数据结构与算法）" class="headerlink" title="3、尚硅谷Java数据结构与java算法（Java数据结构与算法）"></a><strong>3、尚硅谷Java数据结构与java算法（Java数据结构与算法）</strong></h4><p>191万播放，1.9万赞</p><p>Java版本的数据结构很少，大部分是C语言。这个适合用Java语言的人看。</p><p><a href="https://www.bilibili.com/video/av54029771">尚硅谷Java数据结构与java算法（Java数据结构与算法）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av54029771https://www.bilibili.com/video/av54029771https://www.bilibili.com/video/av54029771<img src="https://pic2.zhimg.com/v2-ae729d0ee51f848fca01c5197d2708dd_180x120.jpg" alt="img"></a></p><h4 id="4、数据结构与算法基础-java版（罗召勇）"><a href="#4、数据结构与算法基础-java版（罗召勇）" class="headerlink" title="4、数据结构与算法基础-java版（罗召勇）"></a><strong>4、数据结构与算法基础-java版（罗召勇）</strong></h4><p>32万播放，3千赞</p><p>还是Java的，老师语言比较简单</p><p><a href="https://www.bilibili.com/video/av33835237">数据结构与算法基础-java版（罗召勇）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av33835237https://www.bilibili.com/video/av33835237https://www.bilibili.com/video/av33835237<img src="https://pic3.zhimg.com/v2-503f5501d2a95e4c245191b424b62e5e_180x120.jpg" alt="img"></a></p><h4 id="5、清华大学邓俊辉数据结构与算法"><a href="#5、清华大学邓俊辉数据结构与算法" class="headerlink" title="5、清华大学邓俊辉数据结构与算法"></a><strong>5、清华大学邓俊辉数据结构与算法</strong></h4><p>12万播放，1.5千赞</p><p>清华大学，yyds</p><p><a href="https://www.bilibili.com/video/BV1jt4y117KR">清华大学邓俊辉数据结构与算法【完】_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1jt4y117KRhttps://www.bilibili.com/video/BV1jt4y117KRhttps://www.bilibili.com/video/BV1jt4y117KR<img src="https://pic4.zhimg.com/v2-1934392a8d7643f2bb03c0256777a713_180x120.jpg" alt="img"></a></p><p>####<strong>6、(小甲鱼）数据结构与算法（全99讲完结版）</strong></p><p>20万播放，2.3千赞</p><p>全99课。主讲内容基本是照着《<a href="https://https//www.zhihu.com/search?q=%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2117581963%7D">大话数据结构</a>》这本书念的，但也有不少可取之处。看过书的，可以开启1.25倍速。</p><p><a href="https://www.bilibili.com/video/av29175690">(小甲鱼）数据结构与算法（全99讲完结版）_哔哩哔哩_bilibilihttps://www.bilibili.com/video/av29175690https://www.bilibili.com/video/av29175690https://www.bilibili.com/video/av29175690<img src="https://pic3.zhimg.com/v2-a7a4da8e28bda19f6e6257a03b00ac66_180x120.jpg" alt="img"></a></p><h4 id="7、数据结构-浙江大学"><a href="#7、数据结构-浙江大学" class="headerlink" title="7、数据结构-浙江大学"></a><strong>7、数据结构-浙江大学</strong></h4><p>95万播放，近万赞</p><p>[数据结构-浙江大学_哔哩哔哩(https&#x2F;&#x2F;<a href="https://www.bilibili.com/video/BV1JW411i731">https://www.bilibili.com/video/BV1JW411i731</a>)</p><h4 id="8、慕课-课堂实录-数据结构与算法Python版-北京大学-陈斌"><a href="#8、慕课-课堂实录-数据结构与算法Python版-北京大学-陈斌" class="headerlink" title="8、慕课+课堂实录 数据结构与算法Python版-北京大学-陈斌"></a><strong>8、慕课+课堂实录 数据结构与算法Python版-北京大学-陈斌</strong></h4><p>2.4万播放，700多赞</p><p>适合Python语言基础的同学看</p><p><a href="https://www.bilibili.com/video/BV1gy4y1E7M5">【慕课+课堂实录】数据结构与算法Python版-北京大学-陈斌-字幕校对-【完结！】_哔哩哔哩_bilibilihttps://www.bilibili.com/video/BV1gy4y1E7M5https://www.bilibili.com/video/BV1gy4y1E7M5https://www.bilibili.com/video/BV1gy4y1E7M5<img src="https://pic1.zhimg.com/v2-c70ad7109feef4822bf3a4d42676a548_180x120.jpg" alt="img"></a></p><p>至于你要选择听哪个？你可以根据我整理的播放、点赞数据判断，我更建议你去试听几节课，找一个自己听着舒服的，毕竟每个人的喜好不一样。</p><p>除了看视频，我建议学Java还得结合着看书，Java的最佳读书路线可以看我写的这个文章：</p><p><a href="https://zhuanlan.zhihu.com/p/444636383">四猿外：学Java，Java书籍的最佳阅读顺序22 赞同 · 5 评论文章23 赞同 · 5 评论文章</a></p><p>如果学完想进大厂，如果精力够、能学过来的话，再送你一套电子书，这里还包括很厉害的算法刷题笔记，这份资料已经帮很多人拿到了大厂offer</p><p><a href="mp.weixin.qq.com/s/Eb0EFGOdHutmg8QDq4363A">这些电子书，能帮你进大厂拿高薪，拿走不谢mp.weixin.qq.com&#x2F;s&#x2F;Eb0EFGOdHutmg8QDq4363A<img src="https://pic3.zhimg.com/v2-78a04c89de13c0beb5fbaae803c8e41e_180x120.jpg" alt="img"></a></p><p><strong>还有一点，Java 的知识体系繁冗复杂，但是有很多知识在实际工作中几乎没有人用。很多人在学习过程中，却经常把有限的时间和精力花在了这些“没有用”的知识上，事倍功半。</strong></p><p>所以呢，我接下要说说Java 中那些不建议学习的知识点，这些知识工作中很少用到，面试很少问到。</p><p><strong>Java 的桌面 GUI 相关技术，</strong>包括:</p><ol><li>AWT</li><li>Swing</li><li>SWT&#x2F;JFACE</li><li>JavaFx</li><li>JavaFx2</li></ol><p><strong>Java 的 XML 相关 API</strong></p><p><strong>Java 的安全相关</strong></p><p><strong>Java 的国际化</strong></p><p><strong>Java 的 native 方法</strong></p><p><strong>Struts 和 Hibernate</strong></p><p>以上这些，大家在看视频、看书的时候，可以先跳过，以后用的到的时候，再学也来得及。</p><p>不建议学的原因，不展开说了，否则篇幅太长了，想知道详细原因的看这个</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&mid=2247485760&idx=3&sn=1cb21c2b568ba2812d5ae5cfb5a58af8&chksm=fcd8c501cbaf4c17ac5978b0e3dadaa8b9a240a0f3c759380f1bfe1de2b478dff1add4dde9c8&token=909381664&lang=zh_CN#rd">Java学习之路上的“路障”太坑了</a></p><p>作者：四猿外<br>链接：<a href="https://https//www.zhihu.com/question/460988464/answer/2390732089">https://https://www.zhihu.com/question/460988464/answer/2390732089</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2022/03/14/za-ji-2022-3-14/"/>
      <url>/2022/03/14/za-ji-2022-3-14/</url>
      
        <content type="html"><![CDATA[<h3 id="杂说"><a href="#杂说" class="headerlink" title="杂说"></a>杂说</h3><p>今天算是把博客的东西搞完了，但是自己还是有很多东西都不是很懂，例如关于前端的<code>ejs</code>文件是什么东西，然后自己关于音乐的这一部分没有搞完，另外关于个人博客的东西自己目前知识储备不足还是不是很了解具体的实现过程。所以呢，自己什么不懂就学什么，以内需推动外求。</p><h4 id="自己目前的任务是"><a href="#自己目前的任务是" class="headerlink" title="自己目前的任务是"></a>自己目前的任务是</h4><ul><li>大论文的实验部分如何选择做，以及如何写论文</li></ul><p>我的理解过程主要还是分为三个部分</p><h4 id="求特征子集"><a href="#求特征子集" class="headerlink" title="求特征子集"></a>求特征子集</h4><h4 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h4><h4 id="检测算法"><a href="#检测算法" class="headerlink" title="检测算法"></a>检测算法</h4><h2 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心理抚养</title>
      <link href="/2022/03/14/xin-li-fu-yang/"/>
      <url>/2022/03/14/xin-li-fu-yang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今人有过,不喜人规,如讳病而忌医,宁灭其身而无悟也</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 书单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客需要的改进</title>
      <link href="/2022/03/14/hexo-bo-ke-xu-yao-de-gai-jin/"/>
      <url>/2022/03/14/hexo-bo-ke-xu-yao-de-gai-jin/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客需要的改进"><a href="#hexo博客需要的改进" class="headerlink" title="hexo博客需要的改进"></a>hexo博客需要的改进</h2><ul><li>关于这个博客主题，音乐的方面没有搞好，目前自己对前端不是很懂，这方面需要学习，不过可以用视频的方式实现关于音乐的歌唱</li><li>其他的感觉还是比较完善的</li><li>希望自己能够坚持下去持续输出</li></ul><ol><li>关于统计某一个类别的总用时长，干了什么</li></ol>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo主题matery的使用</title>
      <link href="/2022/03/14/guan-yu-hexo-zhu-ti-matery-de-shi-yong/"/>
      <url>/2022/03/14/guan-yu-hexo-zhu-ti-matery-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="关于hexo主题matery的使用"><a href="#关于hexo主题matery的使用" class="headerlink" title="关于hexo主题matery的使用"></a>关于hexo主题matery的使用</h1><p><strong>具体操作连接可参考</strong>：<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">hexo主题matery的使用</a></p><p>本文主要是说明还有一些可以改进的点</p><ol><li>关于音乐的插件</li><li>关于视频的插件</li></ol><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/14/hello-world/"/>
      <url>/2022/03/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
